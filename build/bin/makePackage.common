#
#   makePackage.common - Shared routines between makeInstall and makePackage
#
################################################################################
#
#   Copyright (c) Embedthis Software LLC, 2003-2009. All Rights Reserved.
#   The latest version of this code is available at http://www.embedthis.com
#
#   This software is open source; you can redistribute it and/or modify it 
#   under the terms of the GNU General Public License as published by the 
#   Free Software Foundation; either version 2 of the License, or (at your 
#   option) any later version.
#
#   This program is distributed WITHOUT ANY WARRANTY; without even the 
#   implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details at:
#   http://www.embedthis.com/downloads/gplLicense.html
#   
#   This General Public License does NOT permit incorporating this software 
#   into proprietary programs. If you are unable to comply with the GPL, a 
#   commercial license for this software and support services are available
#   from Embedthis Software at http://www.embedthis.com
#

CHGRP=chgrp
CHOWN=chown
CHMOD=chmod
CP=cp
GZIP=gzip
LN=ln
MKDIR=mkdir
PATCH=patchFile
RM=rm
RMDIR=rmdir
UNIX2DOS=unix2dos

#
#   Windows path conversion utility
#
type -p cygpath >/dev/null 2>&1
if [ $? = 0 ] ; then
    HAS_CYGPATH=1
else
    HAS_CYGPATH=0
fi

################################################################################
#
#   Patch the !!BLD_XXX!! keywords if installing.
#
patchFile() {
    local file arg

    [ $# -lt 1 ] && echo "Bad args: patchFile $*" && exit 255

    if [ $TASK = Install -o $TASK = Package ] ; then
        arg=1
        while [ $arg -le $# ] ; do
            file=${!arg}
            cp "$file" /tmp/.pbldtmp
            sed -e < /tmp/.pbldtmp "s/!!BLD_HOST_DIST!!/${BLD_HOST_DIST}/g;s/!!BLD_HOST_CPU!!/${BLD_HOST_CPU}/g;s/!!BLD_OSVER!!/${BLD_OSVER}/g; s/!!BLD_HOST_OS!!/${BLD_HOST_OS}/g; s/!!BLD_TYPE!!/${BLD_TYPE}/g; s/!!BLD_NUMBER!!/${BLD_NUMBER}/g; s/!!BLD_COMPANY!!/${BLD_COMPANY}/g; s/!!BLD_PRODUCT!!/${BLD_PRODUCT}/g; s/!!BLD_VERSION!!/${BLD_VERSION}/g; s/!!BLD_NAME!!/${BLD_NAME}/g; s/!!BLD_DATE!!/${BLD_DATE}/g; s^!!BLD_PREFIX!!^${ORIG_BLD_PREFIX}^g; s^!!BLD_DOC_PREFIX!!^${ORIG_BLD_DOC_PREFIX}^g; s^!!BLD_INC_PREFIX!!^${ORIG_BLD_INC_PREFIX}^g; s^!!BLD_LIB_PREFIX!!^${ORIG_BLD_LIB_PREFIX}^g; s^!!BLD_BIN_PREFIX!!^${ORIG_BLD_BIN_PREFIX}^g; s^!!BLD_SBIN_PREFIX!!^${ORIG_BLD_SBIN_PREFIX}^g; s^!!BLD_SRC_PREFIX!!^${ORIG_BLD_SRC_PREFIX}^g; s^!!BLD_WEB_PREFIX!!^${ORIG_BLD_WEB_PREFIX}^g; s^!!BLD_MAN_PREFIX!!^${ORIG_BLD_MAN_PREFIX}^g; s^!!BLD_SAM_PREFIX!!^${ORIG_BLD_SAM_PREFIX}^g; s^!!BLD_MOD_PREFIX!!^${ORIG_BLD_MOD_PREFIX}^g; s^!!BLD_LOG_PREFIX!!^${ORIG_BLD_LOG_PREFIX}^g;  s^!!ROOT_DIR!!^${ROOT_DIR}^g; s^!!BLD_HOST_CPU_MAPPED!!^${BLD_HOST_CPU_MAPPED}^g" > "$file"
            rm -f /tmp/.pbldtmp
            arg=$((arg + 1))
        done
    fi
}


createFileList() {
    local prev

    prev=`pwd`
    list=`getpath -a "$1/fileList.txt"`
    cd "$2" >/dev/null
    find . -type f -print > "${list}"
    find . -type l -print >> "${list}"
    [ $BLD_HOST_OS != WIN ] && chgrp 0 "${list}"
    cd "$prev" >/dev/null
}


createPackageName() {
    echo ${1}-${BLD_VERSION}-${BLD_NUMBER}-${BLD_HOST_DIST}-${BLD_HOST_OS}-${BLD_HOST_CPU}
}


makeDir() {
    local d arg

    [ $# -lt 1 ] && echo "Bad args: makeDir $*" && exit 255

    arg=1
    while [ $arg -le $# ] ; do
        d="${!arg}"
        if [ $TASK = Install -o $TASK = Package ] ; then
            if [ ! -d "$d" ] ; then
                ${MKDIR} -p "$d"
                ${CHMOD} 755 "$d"
                if [ $BLD_BUILD_OS != WIN ] ; then
                    ${CHOWN} root "${d}"
                    ${CHGRP} 0 "${d}"
                fi
            fi
        fi
        arg=$((arg + 1))
    done
}


setmod() {

    [ $# != 2 ] && echo "Bad args: setmod $*" && exit 255
    if [ $TASK = Install -o $TASK = Package ] ; then
        ${CHMOD} $1 "$2"
    fi
}


setp() {
    local mode group owner f

    [ "$SKIP_PERMS" = 1 ] && return

    mode=$1
    group=$2
    owner=$3
    f=$4

    ${CHMOD} $mode "${f}"
    if [ $BLD_BUILD_OS != WIN ] ; then
        ${CHOWN} ${owner} "${f}"
        ${CHGRP} ${group} "${f}"
    fi
}


getDefaultMode() {
    local ext mode

    ext=${1##*.}
    case "$ext" in
    exe|lib|so|dylib|sh|ksh)
        mode=0755
        ;;
    exe|lib|so|dylib|sh|ksh)
        mode=0755
        ;;
    a|gif|jpg|jpeg|pdf|o)
        mode=0644
        ;;
    c|h|cc|es|htm|html|txt|TXT|xml|supp|tst|rc)
        mode=0644
        ;;
    *)
        mode=0644
        ;;
    esac
    echo $mode
}


#
#   cpy Recursive pattern matching copy program. Options:
#       --check pattern             Check that all files match the pattern
#       --dir dir                   Prefix all files with directory, but don't include dir in target
#       --expand                    Expand %%Vars%%
#       --filter pattern            Remove files that match the pattern
#       --group grp                 Set the group permissions
#       --mode mode                 Set the mode permissions
#       --owner owner               Set the owner permissions
#       --strip                     Strip executables
#       --verbose                   Trace commands
#       --windows                   Convert file to windows text format
#       --zip                       Compress target using gzip
#
#   NOTE:
#       cpy dir target              This will create target/dir and recursively copy the dir contents
#       cpy -d dir Makefile target  This will copy all Makefiles dir/* and create under target. Dir itself not copied.
#
cpy() {
    local argc optind arg target baseDir mode v expand files owner group f check src dirPortion pattern base 
    local rest isDir depth d parent windows

    expand=0
    mode=0
    strip=0
    zip=0
    owner=root
    group=0
    windows=0
    filter=" _ _ "
    stndFilter="\.makedep$|*\.o$|*\.pdb$|\.tmp$|\.save$|\.sav$|OLD|/Archive/|/sav/|/save/|oldFiles|\.libs/|\.nc|\.orig"
    check=""

    v=${TRACE:-0}
    target=${!#}

    argc=$#
    optind=1
    while [ $optind -le $argc ] ; do

        arg=${!optind}
        case "$arg" in
        --check|-c)
            optind=$((optind + 1))
            check=${!optind}
            ;;
        --dir|-d)
            optind=$((optind + 1))
            baseDir=${!optind}
            baseDir=${baseDir##./}
            ;;
        --expand|-e)
            expand=1
            ;;
        --filter|-f)
            optind=$((optind + 1))
            filter=${!optind}
            ;;
        --group|-g)
            optind=$((optind + 1))
            group=${!optind}
            ;;
        --mode|-m)
            optind=$((optind + 1))
            mode=${!optind}
            ;;
        --owner|-o)
            optind=$((optind + 1))
            owner=${!optind}
            ;;
        --strip|-s)
            strip=1
            ;;
        --verbose|-v)
            v=1
            ;;
        --windows|-w)
            windows=1
            ;;
        --zip|-z)
            zip=1
            ;;
        *)
            break
            ;;
        esac
        optind=$((optind + 1))
    done

    [ $v -gt 0 ] && echo -e "\n " cpy "$*"

    argc=$((argc - 1))
    if [ $optind -le $argc ] ; then
        files="${!optind}"
    else
        files="*"
    fi

    while : ;  do

        if [ "$baseDir" != "" ] ; then
            if [ "$files" = "*" ] ; then
                files=$baseDir
            else
                files=$baseDir/$files
            fi
        fi

        if [ -d "${files}" ] ; then
            isDir=1
            dirPortion=${files}
            pattern="*"
            depth=9999
        else
            isDir=0
            dirPortion=${files%/*}
            pattern=${files##*/}
            depth=1
        fi

        [ $v -gt 1 ] && echo -e "  find ${dirPortion}" -name \""$pattern"\" -maxdepth $depth \| \
            egrep -v \""$filter"\" \| egrep \""$check"\"

		rm -f .cpy_copied
        find ${dirPortion} -maxdepth $depth -name "$pattern" | egrep -v "$stndFilter" | egrep -v "$filter" | \
            egrep "$check" | while read src ; do


            [ -d "${src#}" ] && continue

            #
            #   Remove directory portions. Artifact of using find.
            #
            base=${src##*/}
            if [ "${base#.*}" != "${base}" ] ; then
                #
                #   Skip files starting with "."
                #
                continue
            fi

            src=${src##./}
            if [ "$baseDir" != "" ] ; then
                #
                #   baseDir provided, must only copy contents, so must strip the directory off.
                #
                rest=${src/${baseDir}\//}
                dest=$target/${rest}

            else
                if [ "$isDir" = 1 ] ; then
                    #
                    #   Source is a directory so strip the dirname of the dirPortion off the source
                    #
                    d=${dirPortion%/*}
                    if [ "$d" != "$dirPortion" ] ; then
                        dest=$target/${src/${d}/}
                    else
                        dest=$target/${src}
                    fi
                else
                    #
                    #   Source is a file, so just take the basename of the source
                    #   If the target is a directory, copy into that dir. Otherwise copy to the target file itself.
                    #
                    if [ -d "$target" ] ; then
                        dest=$target/${src##*/}
                    else
                        dest=$target
                    fi
                fi
            fi

            dest=`getpath -a "$dest"`

			touch .cpy_copied

            if [ $TASK = Remove ] ; then
                [ $v -gt 0 ] && echo "  rm -f $dest"
                ${RM} -f "$dest"
                if [ $zip = 1 ] ; then 
                    [ $v -gt 0 ] && echo "  rm -f $dest.gz"
                    ${RM} -f "$dest".gz
                fi
                continue
            else
                parent="${dest%/*}"
                if [ ! -d "$parent" ] ; then
                    [ $v -gt 0 ] && echo -e "  mkdir -p $parent\n"
                    ${MKDIR} -p "$parent"
                    setp 755 $group $owner "$parent"
                fi
            fi

            [ $v -gt 0 ] && echo -e "  cp -pf ${src} ${dest}"
            ${CP} -pf "${src}" "${dest}"
            if [ $? != 0 ] ; then
                echo "# Can't copy: cp -pf $src \"$file\""
                echo -e "\nIf installing to system directories, become administrator or attain"
                echo -e "administrator privilege and retry.\n"
                exit 2
            fi

            if [ $TASK = Install ] ; then
                echo "${dest}" >>install.log
            fi

            if [ "$SKIP_PERMS" != 1 -a "$mode" = 0 ] ; then
                mode=`getDefaultMode $src`
            fi
            [ $v -gt 1 ] && echo -e "      setp $mode ${group} ${owner} ${dest}\n"
            setp $mode $group $owner "$dest"

            if [ $expand = 1 ] ; then
                [ $v -gt 1 ] && echo -e "  patchFile $dest\n"
                ${PATCH} "$dest"
#               if [ $BLD_BUILD_OS = WIN ] ; then
#                   ${UNIX2DOS} -D "$dest" 2>/dev/null
#               fi
            fi
            if [ $windows = 1 ] ; then
                if [ $BLD_BUILD_OS = WIN ] ; then
                    [ $v -gt 1 ] && echo -e "  ${UNIX2DOS} -D $dest" 2>/dev/null
                    ${UNIX2DOS} -D "$dest" 2>/dev/null
               fi
            fi
#           if [ $strip = 1 -a $BLD_TYPE != DEBUG ] ; then
#               [ $v -gt 1 ] && echo -e "  ${BLD_HOST_STRIP:-strip} $dest\n"
#               ${BLD_HOST_STRIP:-strip} "$dest" 2>&1 >/dev/null
#           fi
            if [ $zip = 1 ] ; then
                ${RM} -f "$dest".gz
                ${GZIP} --best "$dest"
            fi
            if [ "${dest##*.}" = "so" -a $BLD_HOST_OS = LINUX -a $TASK = Install ] ; then
                ldconfig "${dest}"
            fi
        done

        if [ $TASK != Remove -a ! -f .cpy_copied ] ; then
			echo cpy: ERROR: no files copied for $files
			exit 255
		fi
		rm -f .cpy_copied 

        [ $optind -ge $argc ] && break
        optind=$((optind + 1))
        files="${!optind}"
    done
}


#
#   Return true if the directory is likely to be a system directory
#
isSysDir() {

    [ $# != 1 ] && echo "Bad args: patchFile $*" && exit 255

    _dir=`echo $1 | sed -e 's/.*://'`
    if [ $BLD_BUILD_OS = WIN ] ; then
        for d in /windows /windows/system32 / "/Program Files" "/Documents and Settings" /Inetpub /tmp /temp /windows/temp
        do
            [ "$_dir" = "$d" ] && return 1
        done
    else 
        for d in /bin /lib /etc /tmp /sbin /usr/bin /usr/src /usr/etc /usr/sbin /usr/include /usr/lib /usr/local /usr/local/bin /home /var /usr /usr/share /usr/share/doc /usr/share/man /usr/share/man/man1 /windows /windows/system32 /Applications /Developer /Developer/Applications
        do
            [ "$_dir" = "$d" ] && return 1
        done
    fi
    return 0
}


preparePrefixes() {
    local name dir d subdir prefixes

    cd ${BLD_TOP} >/dev/null ; ABS_BLD_TOP=`pwd` ; cd - >/dev/null
    cd ${BLD_BIN_DIR} >/dev/null ; ABS_BLD_BIN_DIR=`pwd` ; cd - >/dev/null
    cd ${BLD_TOOLS_DIR} >/dev/null ; ABS_BLD_TOOLS_DIR=`pwd` ; cd - >/dev/null

    export PATH="$ABS_BLD_BIN_DIR:$ABS_BLD_TOOLS_DIR:$PATH"

    #
    #   Save the as-installed prefix values for patching files.
    #
    ORIG_BLD_PREFIX=`getpath -a "${BLD_PREFIX}"`
    ORIG_BLD_ROOT_PREFIX=`getpath -a "${BLD_ROOT_PREFIX}"`
    ORIG_BLD_DOC_PREFIX=`getpath -a "${BLD_DOC_PREFIX}"`
    ORIG_BLD_INC_PREFIX=`getpath -a "${BLD_INC_PREFIX}"`
    ORIG_BLD_LIB_PREFIX=`getpath -a "${BLD_LIB_PREFIX}"`
    ORIG_BLD_LOG_PREFIX=`getpath -a "${BLD_LOG_PREFIX}"`
    ORIG_BLD_MAN_PREFIX=`getpath -a "${BLD_MAN_PREFIX}"`
    ORIG_BLD_SAM_PREFIX=`getpath -a "${BLD_SAM_PREFIX}"`
    ORIG_BLD_BIN_PREFIX=`getpath -a "${BLD_BIN_PREFIX}"`
    ORIG_BLD_SRC_PREFIX=`getpath -a "${BLD_SRC_PREFIX}"`
    ORIG_BLD_WEB_PREFIX=`getpath -a "${BLD_WEB_PREFIX}"`
    ORIG_BLD_MOD_PREFIX=`getpath -a "${BLD_MOD_PREFIX}"`

    #
    #   Update prefixes
    #
    prefixes=
    if [ "${PACKS/binary/}" != "$PACKS" ] ; then
        prefixes="$prefixes PREFIX ROOT_PREFIX MOD_PREFIX LIB_PREFIX BIN_PREFIX"
        if [ "$BLD_WEB_PREFIX" != "" ] ; then
            prefixes="$prefixes WEB_PREFIX"
        fi
        if [ "$BLD_LOG_PREFIX" != "" ] ; then
            prefixes="$prefixes LOG_PREFIX"
        fi
    fi
    if [ "${PACKS/dev/}" != "$PACKS" ] ; then
        prefixes="$prefixes INC_PREFIX DOC_PREFIX SAM_PREFIX MAN_PREFIX"
    fi
    if [ "${PACKS/source/}" != "$PACKS" ] ; then
        prefixes="$prefixes SRC_PREFIX "
    fi
    for name in $prefixes
    do
        subdir=
        d=BLD_${name}
        eval dir="$`echo ${d}`"

        if [ $TASK = Package ] ; then
            case "$name" in 
            INC_PREFIX|DOC_PREFIX|SAM_PREFIX|MAN_PREFIX)
                subdir="/DEV"
                ;;
            SRC_PREFIX)
                subdir="/SRC"
                ;;
            *)
                subdir="/BIN"
                ;;
            esac
        fi

        if [ "$dir" != "" ] ; then
            dir="${ROOT_DIR}${subdir}`echo ${dir}`"
            dir=`echo ${dir} | sed -e 's^//^/^g'`
            if type cygpath >/dev/null 2>&1 ; then
                dir=`cygpath -m "${dir}"`
            fi
            dir=`getpath -a "$dir"`
            eval ${d}=\"$dir\"
            if [ ! -d "${dir}" ] ; then
                [ "${TRACE}" = 1 ] && echo "  ${MKDIR} -p \"$dir\""
                ${MKDIR} -p "${dir}"
                ${CHMOD} 755 "$dir"
                if [ $BLD_BUILD_OS != WIN ] ; then
                    ${CHOWN} root "${dir}"
                    ${CHGRP} 0 "${dir}"
                fi
            fi
        fi
    done

    #
    #   Create some overrides that are not handled by the standard prefixes above
    #
    BLD_DEVLIB_PREFIX="`echo $BLD_LIB_PREFIX | sed \"s/${BLD_PRODUCT}-bin/${BLD_PRODUCT}-dev/\"`"
}
