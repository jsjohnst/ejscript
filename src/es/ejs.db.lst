#
#  ejs.db.lst -- Module Listing for ejs.db.mod
#
#  Header version 1.4, Head Flags 0
#

==============================================================================================

MODULE:   ejs.db <hasInitializer, >


FUNCTION:   [initializer]  intrinsic function __initializer__() : Void

   LOCAL:   [local-00] var block_0007_1 : Block
   LOCAL:   [local-01] var block_0011_18 : Block

    0000: [0] 93 00 00 ................... OpenBlock <slot: 0> <0> 

    # db/Database.es:388        }

    0008: [0] 01 12 ...................... AddNamespace <internal-0> 
    0010: [0] 01 1d ...................... AddNamespace <ejs.db> 

    # db/Database.es:7          module ejs.db {
    # db/Database.es:14         	class Database {

    0020: [0] 34 99 02 1d ................ DefineClass <var: 0x119,  ejs.db::Database> 
    0024: [0] 23 ......................... CloseBlock 
    0025: [0] 93 01 00 ................... OpenBlock <slot: 1> <0> 

    # db/Record.es:993          }

    0034: [0] 01 85 3e ................... AddNamespace <internal-1> 
    0037: [0] 01 1d ...................... AddNamespace <ejs.db> 

    # db/Record.es:11           module ejs.db {
    # db/Record.es:20               dynamic class Record {

    0050: [0] 34 ad f9 01 1d ............. DefineClass <var: 0x7cad,  ejs.db::Record> 

    # db/Record.es:988              function pluralize(name: String): String {

    0063: [0] 23 ......................... CloseBlock 
    0064: [0] 3d ......................... EndCode 
    

BLOCK:      [__initializer__-00]  block_0007_1 (Slots 0)

BLOCK:      [__initializer__-01]  block_0011_18 (Slots 0)

CLASS:      class Database extends Object
            #  Class Details: 35 class traits, 2 instance traits, requested slot 111

FUNCTION:   [Database-05]  -constructor- native function Database(connectionString: String) : void

     ARG:   [arg-00]   private connectionString : String

    

VARIABLE:   [Database-00]  private var connectionString : String

FUNCTION:   [Database-06]  -initializer- function Database-initializer() : Void



    # db/Database.es:16                 use default namespace public

    0004: [0] 83 23 ...................... GetGlobalSlot <35> 
    0006: [1] 02 ......................... AddNamespaceRef 

    # db/Database.es:18         		private static var _defaultDb: Database
    # db/Database.es:19         		private static var _traceSql: Boolean
    # db/Database.es:21         		private var _name: String
    # db/Database.es:22         		private var _connection: String
    # db/Database.es:51         		native function Database(connectionString: String)
    # db/Database.es:58         		native function connect(connectionString: String): Void
    # db/Database.es:65         		native function close(): Void
    # db/Database.es:75         		native function sql(cmd: String): Array
    # db/Database.es:84                 function query(cmd: String): Array {
    # db/Database.es:93         		function get connection(): String {
    # db/Database.es:102        		function get name(): String {
    # db/Database.es:111        		function getTables(): Array {
    # db/Database.es:125                function getColumns(table: String): Array {
    # db/Database.es:140                static function get defaultDatabase(): Database {
    # db/Database.es:149                static function set defaultDatabase(db: Database): Void {
    # db/Database.es:157                static const DatatypeToSqlite: Object = {
    # db/Database.es:158                    "binary":       "blob",

    0095: [0] 5c 9f 10 ................... LoadString <binary> 
    0098: [1] 5c a6 10 ................... LoadString <blob> 

    # db/Database.es:159                    "boolean":      "tinyint",

    0107: [2] 5c d2 10 ................... LoadString <boolean> 
    0110: [3] 5c da 10 ................... LoadString <tinyint> 

    # db/Database.es:160                    "date":         "date",

    0119: [4] 5c 86 11 ................... LoadString <date> 
    0122: [5] 5c 86 11 ................... LoadString <date> 

    # db/Database.es:161                    "datetime":     "datetime",

    0131: [6] 5c b3 11 ................... LoadString <datetime> 
    0134: [7] 5c b3 11 ................... LoadString <datetime> 

    # db/Database.es:162                    "decimal":      "decimal",

    0143: [8] 5c e3 11 ................... LoadString <decimal> 
    0146: [9] 5c e3 11 ................... LoadString <decimal> 

    # db/Database.es:163                    "float":        "float",

    0155: [10] 5c 90 12 ................... LoadString <float> 
    0158: [11] 5c 90 12 ................... LoadString <float> 

    # db/Database.es:164                    "integer":      "int",

    0167: [12] 5c b9 12 ................... LoadString <integer> 
    0170: [13] 5c c1 12 ................... LoadString <int> 

    # db/Database.es:165                    "number":       "decimal",

    0179: [14] 5c ec 12 ................... LoadString <number> 
    0182: [15] 5c e3 11 ................... LoadString <decimal> 

    # db/Database.es:166                    "string":       "varchar",

    0191: [16] 5c 9a 13 ................... LoadString <string> 
    0194: [17] 5c a1 13 ................... LoadString <varchar> 

    # db/Database.es:167                    "text":         "text",

    0203: [18] 5c cd 13 ................... LoadString <text> 
    0206: [19] 5c cd 13 ................... LoadString <text> 

    # db/Database.es:168                    "time":         "time",

    0215: [20] 5c f6 13 ................... LoadString <time> 
    0218: [21] 5c f6 13 ................... LoadString <time> 

    # db/Database.es:169                    "timestamp":    "datetime",

    0227: [22] 5c a3 14 ................... LoadString <timestamp> 
    0230: [23] 5c b3 11 ................... LoadString <datetime> 
    0233: [24] 90 02 0c ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 12> 

    # db/Database.es:157                static const DatatypeToSqlite: Object = {

    0242: [1] 52 ......................... LoadGlobal 
    0243: [2] 80 46 1d ................... GetObjName <Database> <ejs.db> 
    0246: [2] bf 13 ...................... PutObjSlot <slot: 19> 

    # db/Database.es:176                static const SqliteToDatatype: Object = {
    # db/Database.es:177                    "blob":         "binary",

    0260: [0] 5c a6 10 ................... LoadString <blob> 
    0263: [1] 5c 9f 10 ................... LoadString <binary> 

    # db/Database.es:178                    "tinyint":      "boolean",

    0272: [2] 5c da 10 ................... LoadString <tinyint> 
    0275: [3] 5c d2 10 ................... LoadString <boolean> 

    # db/Database.es:179                    "date":         "date",

    0284: [4] 5c 86 11 ................... LoadString <date> 
    0287: [5] 5c 86 11 ................... LoadString <date> 

    # db/Database.es:180                    "datetime":     "datetime",

    0296: [6] 5c b3 11 ................... LoadString <datetime> 
    0299: [7] 5c b3 11 ................... LoadString <datetime> 

    # db/Database.es:181                    "decimal":      "decimal",

    0308: [8] 5c e3 11 ................... LoadString <decimal> 
    0311: [9] 5c e3 11 ................... LoadString <decimal> 

    # db/Database.es:182                    "float":        "float",

    0320: [10] 5c 90 12 ................... LoadString <float> 
    0323: [11] 5c 90 12 ................... LoadString <float> 

    # db/Database.es:183                    "int":          "integer",

    0332: [12] 5c c1 12 ................... LoadString <int> 
    0335: [13] 5c b9 12 ................... LoadString <integer> 

    # db/Database.es:184                    "varchar":      "string",

    0344: [14] 5c a1 13 ................... LoadString <varchar> 
    0347: [15] 5c 9a 13 ................... LoadString <string> 

    # db/Database.es:185                    "text":         "text",

    0356: [16] 5c cd 13 ................... LoadString <text> 
    0359: [17] 5c cd 13 ................... LoadString <text> 

    # db/Database.es:186                    "time":         "time",

    0368: [18] 5c f6 13 ................... LoadString <time> 
    0371: [19] 5c f6 13 ................... LoadString <time> 
    0374: [20] 90 02 0a ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 10> 

    # db/Database.es:176                static const SqliteToDatatype: Object = {

    0383: [1] 52 ......................... LoadGlobal 
    0384: [2] 80 46 1d ................... GetObjName <Database> <ejs.db> 
    0387: [2] bf 14 ...................... PutObjSlot <slot: 20> 

    # db/Database.es:193                static const SqliteToEjs: Object = {
    # db/Database.es:194                    "blob":         String,

    0401: [0] 5c a6 10 ................... LoadString <blob> 
    0404: [1] 83 04 ...................... GetGlobalSlot <4> 

    # db/Database.es:195                    "date":         Date,

    0412: [2] 5c 86 11 ................... LoadString <date> 
    0415: [3] 83 0a ...................... GetGlobalSlot <10> 

    # db/Database.es:196                    "datetime":     Date,

    0423: [4] 5c b3 11 ................... LoadString <datetime> 
    0426: [5] 83 0a ...................... GetGlobalSlot <10> 

    # db/Database.es:197                    "decimal":      Number,

    0434: [6] 5c e3 11 ................... LoadString <decimal> 
    0437: [7] 83 03 ...................... GetGlobalSlot <3> 

    # db/Database.es:198                    "integer":      Number,

    0445: [8] 5c b9 12 ................... LoadString <integer> 
    0448: [9] 83 03 ...................... GetGlobalSlot <3> 

    # db/Database.es:199                    "float":        Number,

    0456: [10] 5c 90 12 ................... LoadString <float> 
    0459: [11] 83 03 ...................... GetGlobalSlot <3> 

    # db/Database.es:200                    "time":         Date,

    0467: [12] 5c f6 13 ................... LoadString <time> 
    0470: [13] 83 0a ...................... GetGlobalSlot <10> 

    # db/Database.es:201                    "tinyint":      Boolean,

    0478: [14] 5c da 10 ................... LoadString <tinyint> 
    0481: [15] 83 01 ...................... GetGlobalSlot <1> 

    # db/Database.es:202                    "text":         String,

    0489: [16] 5c cd 13 ................... LoadString <text> 
    0492: [17] 83 04 ...................... GetGlobalSlot <4> 

    # db/Database.es:203                    "varchar":      String,

    0500: [18] 5c a1 13 ................... LoadString <varchar> 
    0503: [19] 83 04 ...................... GetGlobalSlot <4> 
    0505: [20] 90 02 0a ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 10> 

    # db/Database.es:193                static const SqliteToEjs: Object = {

    0514: [1] 52 ......................... LoadGlobal 
    0515: [2] 80 46 1d ................... GetObjName <Database> <ejs.db> 
    0518: [2] bf 15 ...................... PutObjSlot <slot: 21> 

    # db/Database.es:218                function createDatabase(name: String, options: Object = null): Void {
    # db/Database.es:223                function destroyDatabase(name: String): Void {
    # db/Database.es:229                function createTable(table: String, columns: Array = null): Void {
    # db/Database.es:251                function renameTable(oldTable: String, newTable: String): Void {
    # db/Database.es:256                function destroyTable(table: String): Void {
    # db/Database.es:261                function addIndex(table: String, column: String, indexName: String): Void {
    # db/Database.es:266                function removeIndex(table: String, indexName: String): Void {
    # db/Database.es:272                function addColumn(table: String, column: String, datatype: String, options: Object = null): Void {
    # db/Database.es:282                function changeColumn(table: String, column: String, datatype: String, options: Object = null): Void {
    # db/Database.es:294                function renameColumn(table: String, oldColumn: String, newColumn: String): Void {
    # db/Database.es:299                function removeColumns(table: String, columns: Array): Void {
    # db/Database.es:347                private static function log(cmd: String): Void {
    # db/Database.es:359                static function trace(on: Boolean): void {

    0598: [0] c4 ......................... Return 
    

VARIABLE:   [Database-07]  [ejs.db::Database,private] static var _defaultDb : Database

VARIABLE:   [Database-08]  [ejs.db::Database,private] static var _traceSql : Boolean

FUNCTION:   [Database-09]  public native function connect(connectionString: String) : Void

     ARG:   [arg-00]   private connectionString : String

    

VARIABLE:   [connect-00]  private var connectionString : String

FUNCTION:   [Database-10]  public native function close() : Void


    

FUNCTION:   [Database-11]  public native function sql(cmd: String) : Array

     ARG:   [arg-00]   private cmd : String

    

VARIABLE:   [sql-00]  private var cmd : String

FUNCTION:   [Database-12]  public function query(cmd: String) : Array

     ARG:   [arg-00]   private cmd : String


    # db/Database.es:85                     log(cmd)

    0005: [0] 61 ......................... GetLocalSlot_0 
    0006: [1] 1c 21 01 01 ................ CallThisStaticSlot <slot: 33> <1> <argc: 1> 

    # db/Database.es:86                     return sql(cmd)

    0015: [0] 61 ......................... GetLocalSlot_0 
    0016: [1] 18 0b 01 ................... CallThisSlot <slot: 11> <argc: 1> 
    0019: [0] 99 ......................... PushResult 
    0020: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [query-00]  private var cmd : String

FUNCTION:   [Database-13]  public get function connection() : String



    # db/Database.es:94         			return _connection

    0005: [0] 76 ......................... GetThisSlot_1 
    0006: [1] c5 ......................... ReturnValue 
    

FUNCTION:   [Database-14]  public get function name() : String



    # db/Database.es:103        			return _name

    0005: [0] 75 ......................... GetThisSlot_0 
    0006: [1] c5 ......................... ReturnValue 
    

FUNCTION:   [Database-15]  public function getTables() : Array

   LOCAL:   [local-00] var cmd : String
   LOCAL:   [local-01] var grid : Array
   LOCAL:   [local-02] var result : Array
   LOCAL:   [local-03] var row : Object
   LOCAL:   [local-04] var name : String


    # db/Database.es:112        			let cmd: String = "SELECT name from sqlite_master WHERE type = 'table' order by NAME;"

    0005: [0] 5c c1 07 ................... LoadString <SELECT name from sqlite_master WHERE type = 'table' order by NAME;> 
    0008: [1] 9a ......................... PutLocalSlot_0 

    # db/Database.es:113        			let grid: Array = query(cmd)

    0014: [0] 61 ......................... GetLocalSlot_0 
    0015: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0018: [0] 99 ......................... PushResult 
    0019: [1] 9b ......................... PutLocalSlot_1 

    # db/Database.es:114        			let result: Array = new Array

    0025: [0] 83 07 ...................... GetGlobalSlot <7> 
    0027: [1] 8e ......................... New 
    0028: [1] 1f 00 ...................... CallConstructor <argc: 0> 
    0030: [1] 9c ......................... PutLocalSlot_2 

    # db/Database.es:115        			for each (let row: Object in grid) {

    0036: [0] 62 ......................... GetLocalSlot_1 
    0037: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0040: [0] 99 ......................... PushResult 
    0041: [1] 3b ......................... Dup 
    0042: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0045: [1] 99 ......................... PushResult 
    0046: [2] 9d ......................... PutLocalSlot_3 

    # db/Database.es:116        				let name: String = row["name"]

    0052: [1] 64 ......................... GetLocalSlot_3 
    0053: [2] 5c c2 06 ................... LoadString <name> 
    0056: [3] 81 ......................... GetObjNameExpr 
    0057: [2] 9e ......................... PutLocalSlot_4 

    # db/Database.es:117        				if (!name.contains("sqlite_") && !name.contains("_Ejs")) {

    0063: [1] 65 ......................... GetLocalSlot_4 
    0064: [2] 5c fc 09 ................... LoadString <sqlite_> 
    0067: [3] 17 0a 01 ................... CallObjSlot <slot: 10> <argc: 1> 
    0070: [1] 99 ......................... PushResult 
    0071: [2] 8b ......................... LogicalNot 
    0072: [2] 22 ......................... CastBoolean 
    0073: [2] 3b ......................... Dup 
    0074: [3] 12 0b ...................... BranchFalse.8 <addr: 87> 
    0076: [2] 96 ......................... Pop 
    0077: [1] 65 ......................... GetLocalSlot_4 
    0078: [2] 5c 84 0a ................... LoadString <_Ejs> 
    0081: [3] 17 0a 01 ................... CallObjSlot <slot: 10> <argc: 1> 
    0084: [1] 99 ......................... PushResult 
    0085: [2] 8b ......................... LogicalNot 
    0086: [2] 22 ......................... CastBoolean 
    0087: [2] 12 10 ...................... BranchFalse.8 <addr: 105> 

    # db/Database.es:118        					result.append(row["name"])

    0094: [1] 63 ......................... GetLocalSlot_2 
    0095: [2] 64 ......................... GetLocalSlot_3 
    0096: [3] 5c c2 06 ................... LoadString <name> 
    0099: [4] 81 ......................... GetObjNameExpr 
    0100: [3] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0103: [1] 40 00 ...................... Goto.8 <addr: 105> 
    0105: [1] 40 be ...................... Goto.8 <addr: 41> 
    0107: [1] 96 ......................... Pop 

    # db/Database.es:121        			return result

    0113: [0] 63 ......................... GetLocalSlot_2 
    0114: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     42      45        107          107       StopIteration

VARIABLE:   [getTables-00]  private var cmd : String

VARIABLE:   [getTables-01]  private var grid : Array

VARIABLE:   [getTables-02]  private var result : Array

VARIABLE:   [getTables-03]  -hoisted-3 var row : Object

VARIABLE:   [getTables-04]  -hoisted-4 var name : String

FUNCTION:   [Database-16]  public function getColumns(table: String) : Array

     ARG:   [arg-00]   private table : String
   LOCAL:   [local-01] var names
   LOCAL:   [local-02] var row
   LOCAL:   [local-03] var name : String


    # db/Database.es:126                    grid =  query('PRAGMA table_info("' + table + '");')

    0005: [0] 5c d7 0b ................... LoadString <PRAGMA table_info("> 
    0008: [1] 61 ......................... GetLocalSlot_0 
    0009: [2] 00 ......................... Add 
    0010: [1] 5c eb 0b ................... LoadString <");> 
    0013: [2] 00 ......................... Add 
    0014: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0017: [0] 99 ......................... PushResult 
    0018: [1] bb a4 08 c4 0a ............. PutScopedName <grid> <> 

    # db/Database.es:127                    let names = []

    0028: [0] 83 07 ...................... GetGlobalSlot <7> 
    0030: [1] 8e ......................... New 
    0031: [1] 9b ......................... PutLocalSlot_1 

    # db/Database.es:128                    for each (let row in grid) {

    0038: [0] 7f a4 08 c4 0a ............. GetScopedName <grid> <> 
    0043: [1] 1d c4 0c d9 0a 00 .......... CallObjName <getValues> <iterator> <argc: 0> 
    0049: [0] 99 ......................... PushResult 
    0050: [1] 3b ......................... Dup 
    0051: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0054: [1] 99 ......................... PushResult 
    0055: [2] 9c ......................... PutLocalSlot_2 

    # db/Database.es:129                        let name: String = row["name"]

    0062: [1] 63 ......................... GetLocalSlot_2 
    0063: [2] 5c c2 06 ................... LoadString <name> 
    0066: [3] 81 ......................... GetObjNameExpr 
    0067: [2] 9d ......................... PutLocalSlot_3 

    # db/Database.es:130                        names.append(name)

    0074: [1] 62 ......................... GetLocalSlot_1 
    0075: [2] 64 ......................... GetLocalSlot_3 
    0076: [3] 1d a0 0d 00 01 ............. CallObjName <append> <> <argc: 1> 
    0081: [1] 40 df ...................... Goto.8 <addr: 50> 
    0083: [1] 96 ......................... Pop 

    # db/Database.es:132                    return names

    0090: [0] 62 ......................... GetLocalSlot_1 
    0091: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     51      54         83           83       StopIteration

VARIABLE:   [getColumns-00]  private var table : String

VARIABLE:   [getColumns-01]  private var names

VARIABLE:   [getColumns-02]  -hoisted-2 var row

VARIABLE:   [getColumns-03]  -hoisted-3 var name : String

FUNCTION:   [Database-17]  public get function defaultDatabase() : Database



    # db/Database.es:141                    return _defaultDb

    0006: [0] 88 07 01 ................... GetThisTypeSlot <slot: 7> <1> 
    0009: [1] c5 ......................... ReturnValue 
    

FUNCTION:   [Database-18]  public set function set-defaultDatabase(db) : Void

     ARG:   [arg-00]   private db


    # db/Database.es:150                    _defaultDb = db

    0006: [0] 61 ......................... GetLocalSlot_0 
    0007: [1] c2 07 01 ................... PutThisTypeSlot <slot: 7> <1> 
    0010: [0] c4 ......................... Return 

    # db/Database.es:151                }
    

VARIABLE:   [set-defaultDatabase-00]  private var db

VARIABLE:   [Database-19]  public static var DatatypeToSqlite : Object

VARIABLE:   [Database-20]  public static var SqliteToDatatype : Object

VARIABLE:   [Database-21]  public static var SqliteToEjs : Object

FUNCTION:   [Database-22]  public function createDatabase(name: String, options: Object) : Void

     ARG:   [arg-00]   private name : String
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 
    0006: [0] c4 ......................... Return 

    # db/Database.es:220                }
    

VARIABLE:   [createDatabase-00]  private var name : String

VARIABLE:   [createDatabase-01]  private var options : Object

FUNCTION:   [Database-23]  public function destroyDatabase(name: String) : Void

     ARG:   [arg-00]   private name : String

    0000: [0] c4 ......................... Return 

    # db/Database.es:225                }
    

VARIABLE:   [destroyDatabase-00]  private var name : String

FUNCTION:   [Database-24]  public function createTable(table: String, columns: Array) : Void

     ARG:   [arg-00]   private table : String
     ARG:   [arg-01]   private columns : Array
   LOCAL:   [local-02] var cmd : String
   LOCAL:   [local-03] var colspec : String
   LOCAL:   [local-04] var spec : Array
   LOCAL:   [local-05] var column : String
   LOCAL:   [local-06] var datatype : String

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Database.es:230                    let cmd: String
    # db/Database.es:232                    query("DROP TABLE IF EXISTS " + table + ";")

    0018: [0] 5c f2 1b ................... LoadString <DROP TABLE IF EXISTS > 
    0021: [1] 61 ......................... GetLocalSlot_0 
    0022: [2] 00 ......................... Add 
    0023: [1] 5c 88 1c ................... LoadString <;> 
    0026: [2] 00 ......................... Add 
    0027: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 

    # db/Database.es:233                    query("CREATE TABLE " + table + "(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL);")

    0036: [0] 5c ea 1c ................... LoadString <CREATE TABLE > 
    0039: [1] 61 ......................... GetLocalSlot_0 
    0040: [2] 00 ......................... Add 
    0041: [1] 5c f8 1c ................... LoadString <(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL);> 
    0044: [2] 00 ......................... Add 
    0045: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 

    # db/Database.es:235                    if (columns) {

    0054: [0] 62 ......................... GetLocalSlot_1 
    0055: [1] 12 6f ...................... BranchFalse.8 <addr: 168> 

    # db/Database.es:237                        for each (let colspec: String in columns) {

    0063: [0] 62 ......................... GetLocalSlot_1 
    0064: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0067: [0] 99 ......................... PushResult 
    0068: [1] 3b ......................... Dup 
    0069: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0072: [1] 99 ......................... PushResult 
    0073: [2] 9d ......................... PutLocalSlot_3 

    # db/Database.es:239                            let spec: Array = colspec.split(":")

    0080: [1] 64 ......................... GetLocalSlot_3 
    0081: [2] 5c c6 1e ................... LoadString <:> 
    0084: [3] 17 1f 01 ................... CallObjSlot <slot: 31> <argc: 1> 
    0087: [1] 99 ......................... PushResult 
    0088: [2] 9e ......................... PutLocalSlot_4 

    # db/Database.es:240                            if (spec.length != 2) {

    0095: [1] 65 ......................... GetLocalSlot_4 
    0096: [2] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0099: [2] 48 ......................... Load2 
    0100: [3] 2c ......................... CompareNE 
    0101: [2] 12 0e ...................... BranchFalse.8 <addr: 117> 

    # db/Database.es:241                                throw "Bad column spec: " + spec

    0109: [1] 5c ad 1f ................... LoadString <Bad column spec: > 
    0112: [2] 65 ......................... GetLocalSlot_4 
    0113: [3] 00 ......................... Add 
    0114: [2] cc ......................... Throw 
    0115: [2] 40 00 ...................... Goto.8 <addr: 117> 

    # db/Database.es:242                            }
    # db/Database.es:243                            let column: String = spec[0]

    0129: [2] 65 ......................... GetLocalSlot_4 
    0130: [3] 46 ......................... Load0 
    0131: [4] 81 ......................... GetObjNameExpr 
    0132: [3] 9f ......................... PutLocalSlot_5 

    # db/Database.es:244                            let datatype: String = spec[1]

    0139: [2] 65 ......................... GetLocalSlot_4 
    0140: [3] 47 ......................... Load1 
    0141: [4] 81 ......................... GetObjNameExpr 
    0142: [3] a0 ......................... PutLocalSlot_6 

    # db/Database.es:245                            addColumn(table, column.trim(), datatype.trim())

    0149: [2] 61 ......................... GetLocalSlot_0 
    0150: [3] 66 ......................... GetLocalSlot_5 
    0151: [4] 17 26 00 ................... CallObjSlot <slot: 38> <argc: 0> 
    0154: [3] 99 ......................... PushResult 
    0155: [4] 67 ......................... GetLocalSlot_6 
    0156: [5] 17 26 00 ................... CallObjSlot <slot: 38> <argc: 0> 
    0159: [4] 99 ......................... PushResult 
    0160: [5] 18 1d 03 ................... CallThisSlot <slot: 29> <argc: 3> 
    0163: [2] 40 9f ...................... Goto.8 <addr: 68> 
    0165: [2] 96 ......................... Pop 
    0166: [1] 40 00 ...................... Goto.8 <addr: 168> 
    0168: [1] c4 ......................... Return 

    # db/Database.es:248                }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     69      72        165          165       StopIteration

VARIABLE:   [createTable-00]  private var table : String

VARIABLE:   [createTable-01]  private var columns : Array

VARIABLE:   [createTable-02]  private var cmd : String

VARIABLE:   [createTable-03]  -hoisted-3 var colspec : String

VARIABLE:   [createTable-04]  -hoisted-4 var spec : Array

VARIABLE:   [createTable-05]  -hoisted-5 var column : String

VARIABLE:   [createTable-06]  -hoisted-6 var datatype : String

FUNCTION:   [Database-25]  public function renameTable(oldTable: String, newTable: String) : Void

     ARG:   [arg-00]   private oldTable : String
     ARG:   [arg-01]   private newTable : String


    # db/Database.es:252                    query("ALTER TABLE " + oldTable + " RENAME TO " + newTable + ";")

    0006: [0] 5c cf 22 ................... LoadString <ALTER TABLE > 
    0009: [1] 61 ......................... GetLocalSlot_0 
    0010: [2] 00 ......................... Add 
    0011: [1] 5c dc 22 ................... LoadString < RENAME TO > 
    0014: [2] 00 ......................... Add 
    0015: [1] 62 ......................... GetLocalSlot_1 
    0016: [2] 00 ......................... Add 
    0017: [1] 5c 88 1c ................... LoadString <;> 
    0020: [2] 00 ......................... Add 
    0021: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0024: [0] c4 ......................... Return 

    # db/Database.es:253                }
    

VARIABLE:   [renameTable-00]  private var oldTable : String

VARIABLE:   [renameTable-01]  private var newTable : String

FUNCTION:   [Database-26]  public function destroyTable(table: String) : Void

     ARG:   [arg-00]   private table : String


    # db/Database.es:257                    query("DROP TABLE IF EXISTS " + table + ";")

    0006: [0] 5c f2 1b ................... LoadString <DROP TABLE IF EXISTS > 
    0009: [1] 61 ......................... GetLocalSlot_0 
    0010: [2] 00 ......................... Add 
    0011: [1] 5c 88 1c ................... LoadString <;> 
    0014: [2] 00 ......................... Add 
    0015: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0018: [0] c4 ......................... Return 

    # db/Database.es:258                }
    

VARIABLE:   [destroyTable-00]  private var table : String

FUNCTION:   [Database-27]  public function addIndex(table: String, column: String, indexName: String) : Void

     ARG:   [arg-00]   private table : String
     ARG:   [arg-01]   private column : String
     ARG:   [arg-02]   private indexName : String


    # db/Database.es:262                    query("CREATE INDEX " + indexName + " ON " + table + " (" + column + ");")

    0006: [0] 5c f3 24 ................... LoadString <CREATE INDEX > 
    0009: [1] 63 ......................... GetLocalSlot_2 
    0010: [2] 00 ......................... Add 
    0011: [1] 5c 81 25 ................... LoadString < ON > 
    0014: [2] 00 ......................... Add 
    0015: [1] 61 ......................... GetLocalSlot_0 
    0016: [2] 00 ......................... Add 
    0017: [1] 5c 86 25 ................... LoadString < (> 
    0020: [2] 00 ......................... Add 
    0021: [1] 62 ......................... GetLocalSlot_1 
    0022: [2] 00 ......................... Add 
    0023: [1] 5c 89 25 ................... LoadString <);> 
    0026: [2] 00 ......................... Add 
    0027: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0030: [0] c4 ......................... Return 

    # db/Database.es:263                }
    

VARIABLE:   [addIndex-00]  private var table : String

VARIABLE:   [addIndex-01]  private var column : String

VARIABLE:   [addIndex-02]  private var indexName : String

FUNCTION:   [Database-28]  public function removeIndex(table: String, indexName: String) : Void

     ARG:   [arg-00]   private table : String
     ARG:   [arg-01]   private indexName : String


    # db/Database.es:267                    query("DROP INDEX " + indexName + ";")

    0006: [0] 5c 99 26 ................... LoadString <DROP INDEX > 
    0009: [1] 62 ......................... GetLocalSlot_1 
    0010: [2] 00 ......................... Add 
    0011: [1] 5c 88 1c ................... LoadString <;> 
    0014: [2] 00 ......................... Add 
    0015: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0018: [0] c4 ......................... Return 

    # db/Database.es:268                }
    

VARIABLE:   [removeIndex-00]  private var table : String

VARIABLE:   [removeIndex-01]  private var indexName : String

FUNCTION:   [Database-29]  public function addColumn(table: String, column: String, datatype: String, options: Object) : Void

     ARG:   [arg-00]   private table : String
     ARG:   [arg-01]   private column : String
     ARG:   [arg-02]   private datatype : String
     ARG:   [arg-03]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9d ......................... PutLocalSlot_3 

    # db/Database.es:273                    datatype = DatatypeToSqlite[datatype.toLower()]

    0012: [0] 88 13 01 ................... GetThisTypeSlot <slot: 19> <1> 
    0015: [1] 63 ......................... GetLocalSlot_2 
    0016: [2] 17 24 00 ................... CallObjSlot <slot: 36> <argc: 0> 
    0019: [1] 99 ......................... PushResult 
    0020: [2] 81 ......................... GetObjNameExpr 
    0021: [1] 9c ......................... PutLocalSlot_2 

    # db/Database.es:274                    if (datatype == undefined) {

    0028: [0] 63 ......................... GetLocalSlot_2 
    0029: [1] 83 3a ...................... GetGlobalSlot <58> 
    0031: [2] 25 ......................... CompareEQ 
    0032: [1] 12 0e ...................... BranchFalse.8 <addr: 48> 

    # db/Database.es:275                        throw "Bad Ejscript column type: " + datatype

    0040: [0] 5c c0 28 ................... LoadString <Bad Ejscript column type: > 
    0043: [1] 63 ......................... GetLocalSlot_2 
    0044: [2] 00 ......................... Add 
    0045: [1] cc ......................... Throw 
    0046: [1] 40 00 ...................... Goto.8 <addr: 48> 

    # db/Database.es:276                    }
    # db/Database.es:277                    query("ALTER TABLE " + table + " ADD " + column + " " + datatype)

    0060: [1] 5c cf 22 ................... LoadString <ALTER TABLE > 
    0063: [2] 61 ......................... GetLocalSlot_0 
    0064: [3] 00 ......................... Add 
    0065: [2] 5c b7 29 ................... LoadString < ADD > 
    0068: [3] 00 ......................... Add 
    0069: [2] 62 ......................... GetLocalSlot_1 
    0070: [3] 00 ......................... Add 
    0071: [2] 5c bd 29 ................... LoadString < > 
    0074: [3] 00 ......................... Add 
    0075: [2] 63 ......................... GetLocalSlot_2 
    0076: [3] 00 ......................... Add 
    0077: [2] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0080: [1] c4 ......................... Return 

    # db/Database.es:278                }
    

VARIABLE:   [addColumn-00]  private var table : String

VARIABLE:   [addColumn-01]  private var column : String

VARIABLE:   [addColumn-02]  private var datatype : String

VARIABLE:   [addColumn-03]  private var options : Object

FUNCTION:   [Database-30]  public function changeColumn(table: String, column: String, datatype: String, options: Object) : Void

     ARG:   [arg-00]   private table : String
     ARG:   [arg-01]   private column : String
     ARG:   [arg-02]   private datatype : String
     ARG:   [arg-03]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9d ......................... PutLocalSlot_3 

    # db/Database.es:283                    datatype = datatype.toLower()

    0012: [0] 63 ......................... GetLocalSlot_2 
    0013: [1] 17 24 00 ................... CallObjSlot <slot: 36> <argc: 0> 
    0016: [0] 99 ......................... PushResult 
    0017: [1] 9c ......................... PutLocalSlot_2 

    # db/Database.es:284                    if (DatatypeToSqlite[datatype] == undefined) {

    0024: [0] 88 13 01 ................... GetThisTypeSlot <slot: 19> <1> 
    0027: [1] 63 ......................... GetLocalSlot_2 
    0028: [2] 81 ......................... GetObjNameExpr 
    0029: [1] 83 3a ...................... GetGlobalSlot <58> 
    0031: [2] 25 ......................... CompareEQ 
    0032: [1] 12 0e ...................... BranchFalse.8 <addr: 48> 

    # db/Database.es:285                        throw "Bad column type: " + datatype

    0040: [0] 5c d2 2b ................... LoadString <Bad column type: > 
    0043: [1] 63 ......................... GetLocalSlot_2 
    0044: [2] 00 ......................... Add 
    0045: [1] cc ......................... Throw 
    0046: [1] 40 00 ...................... Goto.8 <addr: 48> 

    # db/Database.es:290                    throw "SQLite does not support column changes"

    0054: [1] 5c 9f 2c ................... LoadString <SQLite does not support column changes> 
    0057: [2] cc ......................... Throw 
    0058: [2] c4 ......................... Return 

    # db/Database.es:291                }
    

VARIABLE:   [changeColumn-00]  private var table : String

VARIABLE:   [changeColumn-01]  private var column : String

VARIABLE:   [changeColumn-02]  private var datatype : String

VARIABLE:   [changeColumn-03]  private var options : Object

FUNCTION:   [Database-31]  public function renameColumn(table: String, oldColumn: String, newColumn: String) : Void

     ARG:   [arg-00]   private table : String
     ARG:   [arg-01]   private oldColumn : String
     ARG:   [arg-02]   private newColumn : String


    # db/Database.es:295                    query("ALTER TABLE " + table + " RENAME " + oldColumn + " TO " + newColumn + ";")

    0006: [0] 5c cf 22 ................... LoadString <ALTER TABLE > 
    0009: [1] 61 ......................... GetLocalSlot_0 
    0010: [2] 00 ......................... Add 
    0011: [1] 5c 8c 2e ................... LoadString < RENAME > 
    0014: [2] 00 ......................... Add 
    0015: [1] 62 ......................... GetLocalSlot_1 
    0016: [2] 00 ......................... Add 
    0017: [1] 5c 95 2e ................... LoadString < TO > 
    0020: [2] 00 ......................... Add 
    0021: [1] 63 ......................... GetLocalSlot_2 
    0022: [2] 00 ......................... Add 
    0023: [1] 5c 88 1c ................... LoadString <;> 
    0026: [2] 00 ......................... Add 
    0027: [1] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0030: [0] c4 ......................... Return 

    # db/Database.es:296                }
    

VARIABLE:   [renameColumn-00]  private var table : String

VARIABLE:   [renameColumn-01]  private var oldColumn : String

VARIABLE:   [renameColumn-02]  private var newColumn : String

FUNCTION:   [Database-32]  public function removeColumns(table: String, columns: Array) : Void

     ARG:   [arg-00]   private table : String
     ARG:   [arg-01]   private columns : Array
   LOCAL:   [local-02] var column
   LOCAL:   [local-03] var 
   LOCAL:   [local-04] var row
   LOCAL:   [local-05] var name : String
   LOCAL:   [local-06] var 
   LOCAL:   [local-07] var k


    # db/Database.es:308                    backup = "_backup_" + table

    0006: [0] 5c a9 2f ................... LoadString <_backup_> 
    0009: [1] 61 ......................... GetLocalSlot_0 
    0010: [2] 00 ......................... Add 
    0011: [1] bb b2 2f c4 0a ............. PutScopedName <backup> <> 

    # db/Database.es:309                    keep = getColumns(table)

    0022: [0] 61 ......................... GetLocalSlot_0 
    0023: [1] 18 10 01 ................... CallThisSlot <slot: 16> <argc: 1> 
    0026: [0] 99 ......................... PushResult 
    0027: [1] bb de 2f c4 0a ............. PutScopedName <keep> <> 

    # db/Database.es:310                    for each (column in columns) {

    0038: [0] 62 ......................... GetLocalSlot_1 
    0039: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0042: [0] 99 ......................... PushResult 
    0043: [1] 3b ......................... Dup 
    0044: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0047: [1] 99 ......................... PushResult 
    0048: [2] 9c ......................... PutLocalSlot_2 

    # db/Database.es:311                        if ((index = keep.indexOf(column)) < 0) {

    0055: [1] 7f de 2f c4 0a ............. GetScopedName <keep> <> 
    0060: [2] 63 ......................... GetLocalSlot_2 
    0061: [3] 1d c8 30 00 01 ............. CallObjName <indexOf> <> <argc: 1> 
    0066: [1] 99 ......................... PushResult 
    0067: [2] 3b ......................... Dup 
    0068: [3] bb d0 30 c4 0a ............. PutScopedName <index> <> 
    0073: [2] 46 ......................... Load0 
    0074: [3] 2b ......................... CompareLT 
    0075: [2] 12 14 ...................... BranchFalse.8 <addr: 97> 

    # db/Database.es:312                            throw "Column \"" + column + "\" does not exist in " + table

    0083: [1] 5c a7 31 ................... LoadString <Column "> 
    0086: [2] 63 ......................... GetLocalSlot_2 
    0087: [3] 00 ......................... Add 
    0088: [2] 5c b0 31 ................... LoadString <" does not exist in > 
    0091: [3] 00 ......................... Add 
    0092: [2] 61 ......................... GetLocalSlot_0 
    0093: [3] 00 ......................... Add 
    0094: [2] cc ......................... Throw 
    0095: [2] 40 00 ...................... Goto.8 <addr: 97> 

    # db/Database.es:313                        } 
    # db/Database.es:314                        keep.remove(index)

    0109: [2] 7f de 2f c4 0a ............. GetScopedName <keep> <> 
    0114: [3] 7f d0 30 c4 0a ............. GetScopedName <index> <> 
    0119: [4] 1d fb 31 00 01 ............. CallObjName <remove> <> <argc: 1> 
    0124: [2] 40 ad ...................... Goto.8 <addr: 43> 
    0126: [2] 96 ......................... Pop 

    # db/Database.es:315                    }
    # db/Database.es:318                    schema = 'PRAGMA table_info("' + table + '");'

    0139: [1] 5c d7 0b ................... LoadString <PRAGMA table_info("> 
    0142: [2] 61 ......................... GetLocalSlot_0 
    0143: [3] 00 ......................... Add 
    0144: [2] 5c eb 0b ................... LoadString <");> 
    0147: [3] 00 ......................... Add 
    0148: [2] bb bd 32 c4 0a ............. PutScopedName <schema> <> 

    # db/Database.es:319                    grid = query(schema)

    0159: [1] 7f bd 32 c4 0a ............. GetScopedName <schema> <> 
    0164: [2] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0167: [1] 99 ......................... PushResult 
    0168: [2] bb a4 08 c4 0a ............. PutScopedName <grid> <> 

    # db/Database.es:320                    types = {}

    0179: [1] 90 02 00 ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 0> 
    0182: [2] bb fc 32 c4 0a ............. PutScopedName <types> <> 

    # db/Database.es:321                    for each (let row in grid) {

    0193: [1] 7f a4 08 c4 0a ............. GetScopedName <grid> <> 
    0198: [2] 1d c4 0c d9 0a 00 .......... CallObjName <getValues> <iterator> <argc: 0> 
    0204: [1] 99 ......................... PushResult 
    0205: [2] 3b ......................... Dup 
    0206: [3] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0209: [2] 99 ......................... PushResult 
    0210: [3] 9e ......................... PutLocalSlot_4 

    # db/Database.es:322                        let name: String = row["name"]

    0217: [2] 65 ......................... GetLocalSlot_4 
    0218: [3] 5c c2 06 ................... LoadString <name> 
    0221: [4] 81 ......................... GetObjNameExpr 
    0222: [3] 9f ......................... PutLocalSlot_5 

    # db/Database.es:323                        types[name] = row["type"]

    0229: [2] 65 ......................... GetLocalSlot_4 
    0230: [3] 5c ac 33 ................... LoadString <type> 
    0233: [4] 81 ......................... GetObjNameExpr 
    0234: [3] 7f fc 32 c4 0a ............. GetScopedName <types> <> 
    0239: [4] 66 ......................... GetLocalSlot_5 
    0240: [5] b8 ......................... PutObjNameExpr 
    0241: [2] 40 da ...................... Goto.8 <addr: 205> 
    0243: [2] 96 ......................... Pop 

    # db/Database.es:324                    }
    # db/Database.es:326                    columnSpec = []

    0256: [1] 83 07 ...................... GetGlobalSlot <7> 
    0258: [2] 8e ......................... New 
    0259: [2] bb cd 33 c4 0a ............. PutScopedName <columnSpec> <> 

    # db/Database.es:327                    for each (k in keep) {

    0270: [1] 7f de 2f c4 0a ............. GetScopedName <keep> <> 
    0275: [2] 1d c4 0c d9 0a 00 .......... CallObjName <getValues> <iterator> <argc: 0> 
    0281: [1] 99 ......................... PushResult 
    0282: [2] 3b ......................... Dup 
    0283: [3] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0286: [2] 99 ......................... PushResult 
    0287: [3] a1 ......................... PutLocalSlot_7 

    # db/Database.es:328                        if (k == "id") {

    0294: [2] 68 ......................... GetLocalSlot_7 
    0295: [3] 5c a9 34 ................... LoadString <id> 
    0298: [4] 25 ......................... CompareEQ 
    0299: [3] 12 17 ...................... BranchFalse.8 <addr: 324> 

    # db/Database.es:329                            columnSpec.append(k + " INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL")

    0307: [2] 7f cd 33 c4 0a ............. GetScopedName <columnSpec> <> 
    0312: [3] 68 ......................... GetLocalSlot_7 
    0313: [4] 5c 85 35 ................... LoadString < INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL> 
    0316: [5] 00 ......................... Add 
    0317: [4] 1d a0 0d 00 01 ............. CallObjName <append> <> <argc: 1> 
    0322: [2] 40 23 ...................... Goto.8 <addr: 359> 

    # db/Database.es:330                        } else {
    # db/Database.es:331                            columnSpec.append(k + " " + types[k])

    0336: [2] 7f cd 33 c4 0a ............. GetScopedName <columnSpec> <> 
    0341: [3] 68 ......................... GetLocalSlot_7 
    0342: [4] 5c bd 29 ................... LoadString < > 
    0345: [5] 00 ......................... Add 
    0346: [4] 7f fc 32 c4 0a ............. GetScopedName <types> <> 
    0351: [5] 68 ......................... GetLocalSlot_7 
    0352: [6] 81 ......................... GetObjNameExpr 
    0353: [5] 00 ......................... Add 
    0354: [4] 1d a0 0d 00 01 ............. CallObjName <append> <> <argc: 1> 
    0359: [2] 40 b1 ...................... Goto.8 <addr: 282> 
    0361: [2] 96 ......................... Pop 

    # db/Database.es:333                    }
    # db/Database.es:335                    cmd = "BEGIN TRANSACTION;
    # db/Database.es:341                        DROP TABLE " + backup + ";
    # db/Database.es:340                        INSERT INTO " + table + " SELECT " + keep + " FROM " + backup + ";
    # db/Database.es:339                        CREATE TABLE " + table + "(" + columnSpec + ");
    # db/Database.es:338                        DROP TABLE " + table + ";
    # db/Database.es:337                        INSERT INTO " + backup + " SELECT " + keep + " FROM " + table + ";
    # db/Database.es:336                        CREATE TEMPORARY TABLE " + backup + "(" + columnSpec + ");
    # db/Database.es:335                    cmd = "BEGIN TRANSACTION;

    0416: [1] 5c b0 39 ................... LoadString <BEGIN TRANSACTION;
                CREATE TEMPORARY TABLE > 

    # db/Database.es:336                        CREATE TEMPORARY TABLE " + backup + "(" + columnSpec + ");

    0425: [2] 7f b2 2f c4 0a ............. GetScopedName <backup> <> 
    0430: [3] 00 ......................... Add 
    0431: [2] 5c eb 39 ................... LoadString <(> 
    0434: [3] 00 ......................... Add 
    0435: [2] 7f cd 33 c4 0a ............. GetScopedName <columnSpec> <> 
    0440: [3] 00 ......................... Add 
    0441: [2] 5c ed 39 ................... LoadString <);
                INSERT INTO > 
    0444: [3] 00 ......................... Add 

    # db/Database.es:337                        INSERT INTO " + backup + " SELECT " + keep + " FROM " + table + ";

    0451: [2] 7f b2 2f c4 0a ............. GetScopedName <backup> <> 
    0456: [3] 00 ......................... Add 
    0457: [2] 5c 8d 3a ................... LoadString < SELECT > 
    0460: [3] 00 ......................... Add 
    0461: [2] 7f de 2f c4 0a ............. GetScopedName <keep> <> 
    0466: [3] 00 ......................... Add 
    0467: [2] 5c 96 3a ................... LoadString < FROM > 
    0470: [3] 00 ......................... Add 
    0471: [2] 61 ......................... GetLocalSlot_0 
    0472: [3] 00 ......................... Add 
    0473: [2] 5c 9d 3a ................... LoadString <;
                DROP TABLE > 
    0476: [3] 00 ......................... Add 

    # db/Database.es:338                        DROP TABLE " + table + ";

    0483: [2] 61 ......................... GetLocalSlot_0 
    0484: [3] 00 ......................... Add 
    0485: [2] 5c bb 3a ................... LoadString <;
                CREATE TABLE > 
    0488: [3] 00 ......................... Add 

    # db/Database.es:339                        CREATE TABLE " + table + "(" + columnSpec + ");

    0495: [2] 61 ......................... GetLocalSlot_0 
    0496: [3] 00 ......................... Add 
    0497: [2] 5c eb 39 ................... LoadString <(> 
    0500: [3] 00 ......................... Add 
    0501: [2] 7f cd 33 c4 0a ............. GetScopedName <columnSpec> <> 
    0506: [3] 00 ......................... Add 
    0507: [2] 5c ed 39 ................... LoadString <);
                INSERT INTO > 
    0510: [3] 00 ......................... Add 

    # db/Database.es:340                        INSERT INTO " + table + " SELECT " + keep + " FROM " + backup + ";

    0517: [2] 61 ......................... GetLocalSlot_0 
    0518: [3] 00 ......................... Add 
    0519: [2] 5c 8d 3a ................... LoadString < SELECT > 
    0522: [3] 00 ......................... Add 
    0523: [2] 7f de 2f c4 0a ............. GetScopedName <keep> <> 
    0528: [3] 00 ......................... Add 
    0529: [2] 5c 96 3a ................... LoadString < FROM > 
    0532: [3] 00 ......................... Add 
    0533: [2] 7f b2 2f c4 0a ............. GetScopedName <backup> <> 
    0538: [3] 00 ......................... Add 
    0539: [2] 5c 9d 3a ................... LoadString <;
                DROP TABLE > 
    0542: [3] 00 ......................... Add 

    # db/Database.es:341                        DROP TABLE " + backup + ";

    0549: [2] 7f b2 2f c4 0a ............. GetScopedName <backup> <> 
    0554: [3] 00 ......................... Add 
    0555: [2] 5c db 3a ................... LoadString <;
                COMMIT;> 
    0558: [3] 00 ......................... Add 

    # db/Database.es:335                    cmd = "BEGIN TRANSACTION;

    0565: [2] bb dd 04 c4 0a ............. PutScopedName <cmd> <> 

    # db/Database.es:343                    query(cmd)

    0576: [1] 7f dd 04 c4 0a ............. GetScopedName <cmd> <> 
    0581: [2] 18 0c 01 ................... CallThisSlot <slot: 12> <argc: 1> 
    0584: [1] c4 ......................... Return 

    # db/Database.es:344                }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     44      47        126          126       StopIteration
1   iteration    206     209        243          243       StopIteration
2   iteration    283     286        361          361       StopIteration

VARIABLE:   [removeColumns-00]  private var table : String

VARIABLE:   [removeColumns-01]  private var columns : Array

VARIABLE:   [removeColumns-02]  -hoisted-2 var column

VARIABLE:   [removeColumns-04]  -hoisted-4 var row

VARIABLE:   [removeColumns-05]  -hoisted-5 var name : String

VARIABLE:   [removeColumns-07]  -hoisted-7 var k

FUNCTION:   [Database-33]  [ejs.db::Database,private] static function log(cmd: String) : Void

     ARG:   [arg-00]   private cmd : String


    # db/Database.es:348                    if (_traceSql) {

    0006: [0] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0009: [1] 12 10 ...................... BranchFalse.8 <addr: 27> 

    # db/Database.es:349                        print("SQL: " + cmd)

    0017: [0] 5c 95 3c ................... LoadString <SQL: > 
    0020: [1] 61 ......................... GetLocalSlot_0 
    0021: [2] 00 ......................... Add 
    0022: [1] 16 45 01 ................... CallGlobalSlot <slot: 69> <argc: 1> 
    0025: [0] 40 00 ...................... Goto.8 <addr: 27> 
    0027: [0] c4 ......................... Return 

    # db/Database.es:351                }
    

VARIABLE:   [log-00]  private var cmd : String

FUNCTION:   [Database-34]  public static function trace(on: Boolean) : Void

     ARG:   [arg-00]   private on : Boolean


    # db/Database.es:360                    _traceSql = on

    0006: [0] 61 ......................... GetLocalSlot_0 
    0007: [1] c2 08 01 ................... PutThisTypeSlot <slot: 8> <1> 
    0010: [0] c4 ......................... Return 

    # db/Database.es:361                }
    

VARIABLE:   [trace-00]  private var on : Boolean

VARIABLE:   [DatabaseInstanceType-00]  [ejs.db::Database,private] var _name : String

VARIABLE:   [DatabaseInstanceType-01]  [ejs.db::Database,private] var _connection : String

CLASS:      dynamic class Record extends Object
            #  Class Details: 71 class traits, 2 instance traits, requested slot 112

FUNCTION:   [Record-05]  -initializer- function Record-initializer() : Void



    # db/Record.es:22                   use default namespace public

    0005: [0] 83 23 ...................... GetGlobalSlot <35> 
    0007: [1] 02 ......................... AddNamespaceRef 

    # db/Record.es:27                   private static var  _belongsTo: Object
    # db/Record.es:28                   private static var  _className: String
    # db/Record.es:29                   private static var  _columnNames: Object
    # db/Record.es:30                   private static var  _columnTypes: Object
    # db/Record.es:31                   private static var  _sqlColumnTypes: Object
    # db/Record.es:32                   private static var  _db: Database = undefined

    0044: [0] 83 3a ...................... GetGlobalSlot <58> 
    0046: [1] 52 ......................... LoadGlobal 
    0047: [2] 80 ab 3e 1d ................ GetObjName <Record> <ejs.db> 
    0051: [2] bf 0b ...................... PutObjSlot <slot: 11> 

    # db/Record.es:33                   private static var  _foreignId: String
    # db/Record.es:34                   private static var  _keyName: String
    # db/Record.es:35                   private static var  _tableName: String
    # db/Record.es:36                   private static var  _traceSql: Boolean = false

    0077: [0] 51 ......................... LoadFalse 
    0078: [1] 52 ......................... LoadGlobal 
    0079: [2] 80 ab 3e 1d ................ GetObjName <Record> <ejs.db> 
    0083: [2] bf 0f ...................... PutObjSlot <slot: 15> 

    # db/Record.es:37                   private static var  _validations: Array
    # db/Record.es:39                   private static var  _beforeFilters: Array
    # db/Record.es:40                   private static var  _afterFilters: Array
    # db/Record.es:41                   private static var  _wrapFilters: Array
    # db/Record.es:43                   private var         _keyValue: Object
    # db/Record.es:44                   private var         _errors: Object
    # db/Record.es:54                   function constructor(fields: Object = null): Void {
    # db/Record.es:72                   static function beforeFilter(fn, options: Object = null): Void {
    # db/Record.es:79                   static function afterFilter(fn, options: Object = null): Void {
    # db/Record.es:86                   static function wrapFilter(fn, options: Object = null): Void {
    # db/Record.es:93                   private function runFilters(filters): Void {
    # db/Record.es:132                  function save(): Boolean {
    # db/Record.es:186                  function saveUpdate(fields: Object): Boolean {
    # db/Record.es:207                  static function belongsTo(owner, options: Object = null): Void {
    # db/Record.es:220                  private static function createRecord(rowData: Object): Record {
    # db/Record.es:256                  static function find(key: Object, options: Object = null): Object {
    # db/Record.es:271                  static function findAll(options: Object = null): Array {
    # db/Record.es:288                  static function findOneWhere(where: String): Object {
    # db/Record.es:304                  static function findWhere(where: String, count: Number = null): Array {
    # db/Record.es:314                  private static function includeJoin(joins: Object): String {
    # db/Record.es:328                  static private function innerFind(key: Object, options: Object = null): Array {
    # db/Record.es:490                  static function getDb(): Database {
    # db/Record.es:504                  static function get columnNames(): Array { 
    # db/Record.es:521                  static function get columnTitles(): Array { 
    # db/Record.es:536                  static function getKeyName(): String {
    # db/Record.es:545                  static function getNumRows(): Number {
    # db/Record.es:556                  private static function getSchema(): Void {
    # db/Record.es:585                  static function getTableName(): String {
    # db/Record.es:600                  static function hasMany(model: Object, options: Object = null): Void {
    # db/Record.es:619                  static function hasAndBelongsToMany(thing: Object, options: Object = null): Void {
    # db/Record.es:635                  static function hasOne(model: Object, options: Object = null): Void {
    # db/Record.es:645                  private static function loadReference(model: Record, key: String, hasMany: Boolean = false): Object {
    # db/Record.es:664                  private static function log(where: String, cmd: String): Void {
    # db/Record.es:672                  private static function logResult(data: Object): Void {
    # db/Record.es:677                  private static function mapSqlTypeToEjs(sqlType: String): String {
    # db/Record.es:692                  static function remove(...keys): Void {
    # db/Record.es:705                  static function setDb(dbase: Database): Void {
    # db/Record.es:714                  static function setup(database: Database = null): Void {
    # db/Record.es:727                  static function setTableName(name: String): Void {
    # db/Record.es:735                  static function setKeyName(value: String): Void {
    # db/Record.es:745                  static function sql(cmd: String, count: Number = null): Array {
    # db/Record.es:756                  static function trace(on: Boolean): void {
    # db/Record.es:761                  static function validateFormat(fields: Object, options: Object = null) {
    # db/Record.es:769                  static function validateNumber(fields: Object, options: Object = null) {
    # db/Record.es:777                  static function validatePresence(fields: Object, options: Object = null) {
    # db/Record.es:785                  static function validateUnique(fields: Object, options: Object = null) {
    # db/Record.es:790                  static var ErrorMessages = {
    # db/Record.es:791                      accepted: "must be accepted",

    0436: [0] 5c d5 b3 01 ................ LoadString <accepted> 
    0440: [1] 5c de b3 01 ................ LoadString <must be accepted> 

    # db/Record.es:792                      blank: "can't be blank",

    0452: [2] 5c 94 b4 01 ................ LoadString <blank> 
    0456: [3] 5c 9a b4 01 ................ LoadString <can't be blank> 

    # db/Record.es:793                      confirmation: "doesn't match confirmation",

    0468: [4] 5c e1 b4 01 ................ LoadString <confirmation> 
    0472: [5] 5c ee b4 01 ................ LoadString <doesn't match confirmation> 

    # db/Record.es:794                      empty: "can't be empty",

    0484: [6] 5c ae b5 01 ................ LoadString <empty> 
    0488: [7] 5c b4 b5 01 ................ LoadString <can't be empty> 

    # db/Record.es:795                      invalid: "is invalid",

    0500: [8] 5c e6 b5 01 ................ LoadString <invalid> 
    0504: [9] 5c ee b5 01 ................ LoadString <is invalid> 

    # db/Record.es:796                      missing: "is missing",

    0516: [10] 5c 9c b6 01 ................ LoadString <missing> 
    0520: [11] 5c a4 b6 01 ................ LoadString <is missing> 

    # db/Record.es:797                      notNumber: "is not a number",

    0532: [12] 5c d9 b6 01 ................ LoadString <notNumber> 
    0536: [13] 5c e3 b6 01 ................ LoadString <is not a number> 

    # db/Record.es:798                      notUnique: "is not unique",

    0548: [14] 5c 9b b7 01 ................ LoadString <notUnique> 
    0552: [15] 5c a5 b7 01 ................ LoadString <is not unique> 

    # db/Record.es:799                      taken: "already taken",

    0564: [16] 5c d7 b7 01 ................ LoadString <taken> 
    0568: [17] 5c dd b7 01 ................ LoadString <already taken> 

    # db/Record.es:800                      tooLong: "is too long",

    0580: [18] 5c 8f b8 01 ................ LoadString <tooLong> 
    0584: [19] 5c 97 b8 01 ................ LoadString <is too long> 

    # db/Record.es:801                      tooShort: "is too short",

    0596: [20] 5c c9 b8 01 ................ LoadString <tooShort> 
    0600: [21] 5c d2 b8 01 ................ LoadString <is too short> 

    # db/Record.es:802                      wrongLength: "wrong length",

    0612: [22] 5c 88 b9 01 ................ LoadString <wrongLength> 
    0616: [23] 5c 94 b9 01 ................ LoadString <wrong length> 

    # db/Record.es:803                      wrongFormat: "wrong format",

    0628: [24] 5c ca b9 01 ................ LoadString <wrongFormat> 
    0632: [25] 5c d6 b9 01 ................ LoadString <wrong format> 
    0636: [26] 90 02 0d ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 13> 

    # db/Record.es:790                  static var ErrorMessages = {

    0647: [1] 52 ......................... LoadGlobal 
    0648: [2] 80 ab 3e 1d ................ GetObjName <Record> <ejs.db> 
    0652: [2] bf 3c ...................... PutObjSlot <slot: 60> 

    # db/Record.es:807                  private static function checkFormat(thisObj: Object, field: String, value, options): Void {
    # db/Record.es:814                  private static function checkNumber(thisObj: Object, field: String, value, options): Void {
    # db/Record.es:821                  private static function checkPresent(thisObj: Object, field: String, value, options): Void {
    # db/Record.es:830                  private static function checkUnique(thisObj: Object, field: String, value, options): Void {
    # db/Record.es:841                  function error(field: String, msg: String): Void {
    # db/Record.es:848                  function validateModel(): Boolean {
    # db/Record.es:878                  function getErrors(): Array {
    # db/Record.es:883                  function hasError(field: String = null): Boolean {
    # db/Record.es:891                  function getFieldType(field: String): String {
    # db/Record.es:899                  private function coerceTypes(): Void {

    0734: [0] c4 ......................... Return 
    

VARIABLE:   [Record-06]  [ejs.db::Record,private] static var _belongsTo : Object

VARIABLE:   [Record-07]  [ejs.db::Record,private] static var _className : String

VARIABLE:   [Record-08]  [ejs.db::Record,private] static var _columnNames : Object

VARIABLE:   [Record-09]  [ejs.db::Record,private] static var _columnTypes : Object

VARIABLE:   [Record-10]  [ejs.db::Record,private] static var _sqlColumnTypes : Object

VARIABLE:   [Record-11]  [ejs.db::Record,private] static var _db : Database

VARIABLE:   [Record-12]  [ejs.db::Record,private] static var _foreignId : String

VARIABLE:   [Record-13]  [ejs.db::Record,private] static var _keyName : String

VARIABLE:   [Record-14]  [ejs.db::Record,private] static var _tableName : String

VARIABLE:   [Record-15]  [ejs.db::Record,private] static var _traceSql : Boolean

VARIABLE:   [Record-16]  [ejs.db::Record,private] static var _validations : Array

VARIABLE:   [Record-17]  [ejs.db::Record,private] static var _beforeFilters : Array

VARIABLE:   [Record-18]  [ejs.db::Record,private] static var _afterFilters : Array

VARIABLE:   [Record-19]  [ejs.db::Record,private] static var _wrapFilters : Array

FUNCTION:   [Record-20]  public function constructor(fields: Object) : Void

     ARG:   [arg-00]   private fields : Object
   LOCAL:   [local-01] var field

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:55                       if (_columnNames == null) {

    0012: [0] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0015: [1] 5a ......................... LoadNull 
    0016: [2] 25 ......................... CompareEQ 
    0017: [1] 12 0c ...................... BranchFalse.8 <addr: 31> 

    # db/Record.es:56                           getSchema()

    0025: [0] 1c 28 01 00 ................ CallThisStaticSlot <slot: 40> <1> <argc: 0> 
    0029: [0] 40 00 ...................... Goto.8 <addr: 31> 

    # db/Record.es:61                       if (fields) {

    0037: [0] 61 ......................... GetLocalSlot_0 
    0038: [1] 12 57 ...................... BranchFalse.8 <addr: 127> 

    # db/Record.es:62                           for (field in fields) {

    0046: [0] 61 ......................... GetLocalSlot_0 
    0047: [1] 17 01 00 ................... CallObjSlot <slot: 1> <argc: 0> 
    0050: [0] 99 ......................... PushResult 
    0051: [1] 3b ......................... Dup 
    0052: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0055: [1] 99 ......................... PushResult 
    0056: [2] 9b ......................... PutLocalSlot_1 

    # db/Record.es:63                               if (_columnNames[field] == undefined) {

    0063: [1] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0066: [2] 62 ......................... GetLocalSlot_1 
    0067: [3] 81 ......................... GetObjNameExpr 
    0068: [2] 83 3a ...................... GetGlobalSlot <58> 
    0070: [3] 25 ......................... CompareEQ 
    0071: [2] 12 1f ...................... BranchFalse.8 <addr: 104> 

    # db/Record.es:64                                   throw new Error("Column " + field + " is not a column in the table \"" + _tableName + "\"")

    0079: [1] 83 0f ...................... GetGlobalSlot <15> 
    0081: [2] 8e ......................... New 
    0082: [2] 5c 83 49 ................... LoadString <Column > 
    0085: [3] 62 ......................... GetLocalSlot_1 
    0086: [4] 00 ......................... Add 
    0087: [3] 5c 8b 49 ................... LoadString < is not a column in the table "> 
    0090: [4] 00 ......................... Add 
    0091: [3] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0094: [4] 00 ......................... Add 
    0095: [3] 5c ab 49 ................... LoadString <"> 
    0098: [4] 00 ......................... Add 
    0099: [3] 1f 01 ...................... CallConstructor <argc: 1> 
    0101: [2] cc ......................... Throw 
    0102: [2] 40 12 ...................... Goto.8 <addr: 122> 

    # db/Record.es:65                               } else {
    # db/Record.es:66                                   this[field] = fields[field]

    0116: [2] 61 ......................... GetLocalSlot_0 
    0117: [3] 62 ......................... GetLocalSlot_1 
    0118: [4] 81 ......................... GetObjNameExpr 
    0119: [3] 5d ......................... LoadThis 
    0120: [4] 62 ......................... GetLocalSlot_1 
    0121: [5] b8 ......................... PutObjNameExpr 
    0122: [2] 40 b7 ...................... Goto.8 <addr: 51> 
    0124: [2] 96 ......................... Pop 
    0125: [1] 40 00 ...................... Goto.8 <addr: 127> 
    0127: [1] c4 ......................... Return 

    # db/Record.es:70                   }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     52      55        124          124       StopIteration

VARIABLE:   [constructor-00]  private var fields : Object

VARIABLE:   [constructor-01]  -hoisted-1 var field

FUNCTION:   [Record-21]  public static function beforeFilter(fn, options: Object) : Void

     ARG:   [arg-00]   private fn
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:73                       if (_beforeFilters == undefined) {

    0012: [0] 88 11 01 ................... GetThisTypeSlot <slot: 17> <1> 
    0015: [1] 83 3a ...................... GetGlobalSlot <58> 
    0017: [2] 25 ......................... CompareEQ 
    0018: [1] 12 0e ...................... BranchFalse.8 <addr: 34> 

    # db/Record.es:74                           _beforeFilters = []

    0026: [0] 83 07 ...................... GetGlobalSlot <7> 
    0028: [1] 8e ......................... New 
    0029: [1] c2 11 01 ................... PutThisTypeSlot <slot: 17> <1> 
    0032: [0] 40 00 ...................... Goto.8 <addr: 34> 

    # db/Record.es:75                       }
    # db/Record.es:76                       _beforeFilters.append([fn, options])

    0046: [0] 88 11 01 ................... GetThisTypeSlot <slot: 17> <1> 
    0049: [1] 83 07 ...................... GetGlobalSlot <7> 
    0051: [2] 8e ......................... New 
    0052: [2] 3b ......................... Dup 
    0053: [3] 61 ......................... GetLocalSlot_0 
    0054: [4] cb ......................... Swap 
    0055: [4] 46 ......................... Load0 
    0056: [5] b8 ......................... PutObjNameExpr 
    0057: [2] 3b ......................... Dup 
    0058: [3] 62 ......................... GetLocalSlot_1 
    0059: [4] cb ......................... Swap 
    0060: [4] 47 ......................... Load1 
    0061: [5] b8 ......................... PutObjNameExpr 
    0062: [2] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0065: [0] c4 ......................... Return 

    # db/Record.es:77                   }
    

VARIABLE:   [beforeFilter-00]  private var fn

VARIABLE:   [beforeFilter-01]  private var options : Object

FUNCTION:   [Record-22]  public static function afterFilter(fn, options: Object) : Void

     ARG:   [arg-00]   private fn
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:80                       if (_afterFilters == undefined) {

    0012: [0] 88 12 01 ................... GetThisTypeSlot <slot: 18> <1> 
    0015: [1] 83 3a ...................... GetGlobalSlot <58> 
    0017: [2] 25 ......................... CompareEQ 
    0018: [1] 12 0e ...................... BranchFalse.8 <addr: 34> 

    # db/Record.es:81                           _afterFilters = []

    0026: [0] 83 07 ...................... GetGlobalSlot <7> 
    0028: [1] 8e ......................... New 
    0029: [1] c2 12 01 ................... PutThisTypeSlot <slot: 18> <1> 
    0032: [0] 40 00 ...................... Goto.8 <addr: 34> 

    # db/Record.es:82                       }
    # db/Record.es:83                       _afterFilters.append([fn, options])

    0046: [0] 88 12 01 ................... GetThisTypeSlot <slot: 18> <1> 
    0049: [1] 83 07 ...................... GetGlobalSlot <7> 
    0051: [2] 8e ......................... New 
    0052: [2] 3b ......................... Dup 
    0053: [3] 61 ......................... GetLocalSlot_0 
    0054: [4] cb ......................... Swap 
    0055: [4] 46 ......................... Load0 
    0056: [5] b8 ......................... PutObjNameExpr 
    0057: [2] 3b ......................... Dup 
    0058: [3] 62 ......................... GetLocalSlot_1 
    0059: [4] cb ......................... Swap 
    0060: [4] 47 ......................... Load1 
    0061: [5] b8 ......................... PutObjNameExpr 
    0062: [2] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0065: [0] c4 ......................... Return 

    # db/Record.es:84                   }
    

VARIABLE:   [afterFilter-00]  private var fn

VARIABLE:   [afterFilter-01]  private var options : Object

FUNCTION:   [Record-23]  public static function wrapFilter(fn, options: Object) : Void

     ARG:   [arg-00]   private fn
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:87                       if (_wrapFilters == undefined) {

    0012: [0] 88 13 01 ................... GetThisTypeSlot <slot: 19> <1> 
    0015: [1] 83 3a ...................... GetGlobalSlot <58> 
    0017: [2] 25 ......................... CompareEQ 
    0018: [1] 12 0e ...................... BranchFalse.8 <addr: 34> 

    # db/Record.es:88                           _wrapFilters = []

    0026: [0] 83 07 ...................... GetGlobalSlot <7> 
    0028: [1] 8e ......................... New 
    0029: [1] c2 13 01 ................... PutThisTypeSlot <slot: 19> <1> 
    0032: [0] 40 00 ...................... Goto.8 <addr: 34> 

    # db/Record.es:89                       }
    # db/Record.es:90                       _wrapFilters.append([fn, options])

    0046: [0] 88 13 01 ................... GetThisTypeSlot <slot: 19> <1> 
    0049: [1] 83 07 ...................... GetGlobalSlot <7> 
    0051: [2] 8e ......................... New 
    0052: [2] 3b ......................... Dup 
    0053: [3] 61 ......................... GetLocalSlot_0 
    0054: [4] cb ......................... Swap 
    0055: [4] 46 ......................... Load0 
    0056: [5] b8 ......................... PutObjNameExpr 
    0057: [2] 3b ......................... Dup 
    0058: [3] 62 ......................... GetLocalSlot_1 
    0059: [4] cb ......................... Swap 
    0060: [4] 47 ......................... Load1 
    0061: [5] b8 ......................... PutObjNameExpr 
    0062: [2] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0065: [0] c4 ......................... Return 

    # db/Record.es:91                   }
    

VARIABLE:   [wrapFilter-00]  private var fn

VARIABLE:   [wrapFilter-01]  private var options : Object

FUNCTION:   [Record-24]  [ejs.db::Record,private] function runFilters(filters) : Void

     ARG:   [arg-00]   private filters
   LOCAL:   [local-01] var filter
   LOCAL:   [local-02] var fn
   LOCAL:   [local-03] var options


    # db/Record.es:94                       if (!filters) {

    0006: [0] 61 ......................... GetLocalSlot_0 
    0007: [1] 8b ......................... LogicalNot 
    0008: [1] 12 09 ...................... BranchFalse.8 <addr: 19> 

    # db/Record.es:95                           return

    0016: [0] c4 ......................... Return 
    0017: [0] 40 00 ...................... Goto.8 <addr: 19> 

    # db/Record.es:97                       for each (filter in filters) {

    0025: [0] 61 ......................... GetLocalSlot_0 
    0026: [1] 1d c4 0c d9 0a 00 .......... CallObjName <getValues> <iterator> <argc: 0> 
    0032: [0] 99 ......................... PushResult 
    0033: [1] 3b ......................... Dup 
    0034: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0037: [1] 99 ......................... PushResult 
    0038: [2] 9b ......................... PutLocalSlot_1 

    # db/Record.es:98                           let fn = filter[0]

    0045: [1] 62 ......................... GetLocalSlot_1 
    0046: [2] 46 ......................... Load0 
    0047: [3] 81 ......................... GetObjNameExpr 
    0048: [2] 9c ......................... PutLocalSlot_2 

    # db/Record.es:99                           let options = filter[1]

    0055: [1] 62 ......................... GetLocalSlot_1 
    0056: [2] 47 ......................... Load1 
    0057: [3] 81 ......................... GetObjNameExpr 
    0058: [2] 9d ......................... PutLocalSlot_3 

    # db/Record.es:100                          if (options) {

    0065: [1] 64 ......................... GetLocalSlot_3 
    0066: [2] 12 12 ...................... BranchFalse.8 <addr: 86> 

    # db/Record.es:101                              only = options.only

    0074: [1] 64 ......................... GetLocalSlot_3 
    0075: [2] 80 bf 51 00 ................ GetObjName <only> <> 
    0079: [2] bb bf 51 c4 0a ............. PutScopedName <only> <> 
    0084: [1] 40 00 ...................... Goto.8 <addr: 86> 

    # db/Record.es:121                          }
    # db/Record.es:122                          fn.call(this)

    0098: [1] 63 ......................... GetLocalSlot_2 
    0099: [2] 5d ......................... LoadThis 
    0100: [3] 1d f4 51 00 01 ............. CallObjName <call> <> <argc: 1> 
    0105: [1] 40 b6 ...................... Goto.8 <addr: 33> 
    0107: [1] 96 ......................... Pop 
    0108: [0] c4 ......................... Return 

    # db/Record.es:124                  }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     34      37        107          107       StopIteration

VARIABLE:   [runFilters-00]  private var filters

VARIABLE:   [runFilters-01]  -hoisted-1 var filter

VARIABLE:   [runFilters-02]  -hoisted-2 var fn

VARIABLE:   [runFilters-03]  -hoisted-3 var options

FUNCTION:   [Record-25]  public function save() : Boolean

   LOCAL:   [local-00] var sql : String
   LOCAL:   [local-01] var result : Array
   LOCAL:   [local-02] var field : String
   LOCAL:   [local-03] var field : String
   LOCAL:   [local-04] var 
   LOCAL:   [local-05] var field : String


    # db/Record.es:133                      var sql: String
    # db/Record.es:135                      if (!validateModel()) {

    0014: [0] 18 42 00 ................... CallThisSlot <slot: 66> <argc: 0> 
    0017: [0] 99 ......................... PushResult 
    0018: [1] 8b ......................... LogicalNot 
    0019: [1] 12 0b ...................... BranchFalse.8 <addr: 32> 

    # db/Record.es:136                          return false

    0028: [0] 51 ......................... LoadFalse 
    0029: [1] c5 ......................... ReturnValue 
    0030: [0] 40 00 ...................... Goto.8 <addr: 32> 

    # db/Record.es:137                      }
    # db/Record.es:139                      runFilters(_beforeFilters)

    0046: [0] 88 11 01 ................... GetThisTypeSlot <slot: 17> <1> 
    0049: [1] 18 18 01 ................... CallThisSlot <slot: 24> <argc: 1> 

    # db/Record.es:141                      if (_keyValue == null) {

    0059: [0] 75 ......................... GetThisSlot_0 
    0060: [1] 5a ......................... LoadNull 
    0061: [2] 25 ......................... CompareEQ 
    0062: [1] 06 c4 00 00 00 ............. BranchFalse <addr: 263> 

    # db/Record.es:142                          sql = "INSERT INTO " + _tableName + " ("

    0074: [0] 5c 91 54 ................... LoadString <INSERT INTO > 
    0077: [1] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0080: [2] 00 ......................... Add 
    0081: [1] 5c 86 25 ................... LoadString < (> 
    0084: [2] 00 ......................... Add 
    0085: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:143                          for (let field: String in this) {

    0093: [0] 5d ......................... LoadThis 
    0094: [1] 1d ad 3d d9 0a 00 .......... CallObjName <get> <iterator> <argc: 0> 
    0100: [0] 99 ......................... PushResult 
    0101: [1] 3b ......................... Dup 
    0102: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0105: [1] 99 ......................... PushResult 
    0106: [2] 9c ......................... PutLocalSlot_2 

    # db/Record.es:144                              if (_columnNames[field]) {

    0114: [1] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0117: [2] 63 ......................... GetLocalSlot_2 
    0118: [3] 81 ......................... GetObjNameExpr 
    0119: [2] 12 11 ...................... BranchFalse.8 <addr: 138> 

    # db/Record.es:145                                  sql += field + ", "

    0128: [1] 61 ......................... GetLocalSlot_0 
    0129: [2] 63 ......................... GetLocalSlot_2 
    0130: [3] 5c ab 55 ................... LoadString <, > 
    0133: [4] 00 ......................... Add 
    0134: [3] 00 ......................... Add 
    0135: [2] 9a ......................... PutLocalSlot_0 
    0136: [1] 40 00 ...................... Goto.8 <addr: 138> 
    0138: [1] 40 d9 ...................... Goto.8 <addr: 101> 
    0140: [1] 96 ......................... Pop 

    # db/Record.es:147                          }
    # db/Record.es:148                          sql = sql.trim(', ')

    0155: [0] 61 ......................... GetLocalSlot_0 
    0156: [1] 5c ab 55 ................... LoadString <, > 
    0159: [2] 17 26 01 ................... CallObjSlot <slot: 38> <argc: 1> 
    0162: [0] 99 ......................... PushResult 
    0163: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:149                          sql += ") VALUES("

    0171: [0] 61 ......................... GetLocalSlot_0 
    0172: [1] 5c f6 55 ................... LoadString <) VALUES(> 
    0175: [2] 00 ......................... Add 
    0176: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:150                          for (let field: String in this) {

    0184: [0] 5d ......................... LoadThis 
    0185: [1] 1d ad 3d d9 0a 00 .......... CallObjName <get> <iterator> <argc: 0> 
    0191: [0] 99 ......................... PushResult 
    0192: [1] 3b ......................... Dup 
    0193: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0196: [1] 99 ......................... PushResult 
    0197: [2] 9d ......................... PutLocalSlot_3 

    # db/Record.es:151                              sql += "'" + this[field] + "', "

    0205: [1] 61 ......................... GetLocalSlot_0 
    0206: [2] 5c b5 56 ................... LoadString <'> 
    0209: [3] 5d ......................... LoadThis 
    0210: [4] 64 ......................... GetLocalSlot_3 
    0211: [5] 81 ......................... GetObjNameExpr 
    0212: [4] 00 ......................... Add 
    0213: [3] 5c b7 56 ................... LoadString <', > 
    0216: [4] 00 ......................... Add 
    0217: [3] 00 ......................... Add 
    0218: [2] 9a ......................... PutLocalSlot_0 
    0219: [1] 40 e3 ...................... Goto.8 <addr: 192> 
    0221: [1] 96 ......................... Pop 

    # db/Record.es:152                          }
    # db/Record.es:153                          sql = sql.trim(', ')

    0236: [0] 61 ......................... GetLocalSlot_0 
    0237: [1] 5c ab 55 ................... LoadString <, > 
    0240: [2] 17 26 01 ................... CallObjSlot <slot: 38> <argc: 1> 
    0243: [0] 99 ......................... PushResult 
    0244: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:154                          sql += ")"

    0252: [0] 61 ......................... GetLocalSlot_0 
    0253: [1] 5c d6 56 ................... LoadString <)> 
    0256: [2] 00 ......................... Add 
    0257: [1] 9a ......................... PutLocalSlot_0 
    0258: [0] 3f 87 00 00 00 ............. Goto <addr: 398> 

    # db/Record.es:156                      } else {
    # db/Record.es:157                          sql = "UPDATE " + _tableName + " SET "

    0277: [0] 5c a4 57 ................... LoadString <UPDATE > 
    0280: [1] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0283: [2] 00 ......................... Add 
    0284: [1] 5c ac 57 ................... LoadString < SET > 
    0287: [2] 00 ......................... Add 
    0288: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:158                          for (let field: String in this) {

    0296: [0] 5d ......................... LoadThis 
    0297: [1] 1d ad 3d d9 0a 00 .......... CallObjName <get> <iterator> <argc: 0> 
    0303: [0] 99 ......................... PushResult 
    0304: [1] 3b ......................... Dup 
    0305: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0308: [1] 99 ......................... PushResult 
    0309: [2] 9f ......................... PutLocalSlot_5 

    # db/Record.es:159                              if (_columnNames[field]) {

    0317: [1] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0320: [2] 66 ......................... GetLocalSlot_5 
    0321: [3] 81 ......................... GetObjNameExpr 
    0322: [2] 12 19 ...................... BranchFalse.8 <addr: 349> 

    # db/Record.es:160                                  sql += field + " = '" + this[field] + "', "

    0331: [1] 61 ......................... GetLocalSlot_0 
    0332: [2] 66 ......................... GetLocalSlot_5 
    0333: [3] 5c f6 57 ................... LoadString < = '> 
    0336: [4] 00 ......................... Add 
    0337: [3] 5d ......................... LoadThis 
    0338: [4] 66 ......................... GetLocalSlot_5 
    0339: [5] 81 ......................... GetObjNameExpr 
    0340: [4] 00 ......................... Add 
    0341: [3] 5c b7 56 ................... LoadString <', > 
    0344: [4] 00 ......................... Add 
    0345: [3] 00 ......................... Add 
    0346: [2] 9a ......................... PutLocalSlot_0 
    0347: [1] 40 00 ...................... Goto.8 <addr: 349> 
    0349: [1] 40 d1 ...................... Goto.8 <addr: 304> 
    0351: [1] 96 ......................... Pop 

    # db/Record.es:162                          }
    # db/Record.es:163                          sql = sql.trim(', ')

    0366: [0] 61 ......................... GetLocalSlot_0 
    0367: [1] 5c ab 55 ................... LoadString <, > 
    0370: [2] 17 26 01 ................... CallObjSlot <slot: 38> <argc: 1> 
    0373: [0] 99 ......................... PushResult 
    0374: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:164                          sql += " WHERE " + _keyName + " = " +  _keyValue

    0382: [0] 61 ......................... GetLocalSlot_0 
    0383: [1] 5c bc 58 ................... LoadString < WHERE > 
    0386: [2] 88 0d 01 ................... GetThisTypeSlot <slot: 13> <1> 
    0389: [3] 00 ......................... Add 
    0390: [2] 5c c4 58 ................... LoadString < = > 
    0393: [3] 00 ......................... Add 
    0394: [2] 75 ......................... GetThisSlot_0 
    0395: [3] 00 ......................... Add 
    0396: [2] 00 ......................... Add 
    0397: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:165                      }
    # db/Record.es:166                      sql += "; SELECT last_insert_rowid();"

    0412: [0] 61 ......................... GetLocalSlot_0 
    0413: [1] 5c fb 58 ................... LoadString <; SELECT last_insert_rowid();> 
    0416: [2] 00 ......................... Add 
    0417: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:168                      log("save", sql)

    0425: [0] 5c b6 59 ................... LoadString <save> 
    0428: [1] 61 ......................... GetLocalSlot_0 
    0429: [2] 1c 2e 01 02 ................ CallThisStaticSlot <slot: 46> <1> <argc: 2> 

    # db/Record.es:170                      let result: Array = getDb().query(sql)

    0440: [0] 1c 23 01 00 ................ CallThisStaticSlot <slot: 35> <1> <argc: 0> 
    0444: [0] 99 ......................... PushResult 
    0445: [1] 61 ......................... GetLocalSlot_0 
    0446: [2] 1d c5 05 c4 0a 01 .......... CallObjName <query> <> <argc: 1> 
    0452: [0] 99 ......................... PushResult 
    0453: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:171                      _keyValue = this["id"] = result[0]["last_insert_rowid()"] cast Number

    0461: [0] 62 ......................... GetLocalSlot_1 
    0462: [1] 46 ......................... Load0 
    0463: [2] 81 ......................... GetObjNameExpr 
    0464: [1] 5c c0 5a ................... LoadString <last_insert_rowid()> 
    0467: [2] 81 ......................... GetObjNameExpr 
    0468: [1] 83 03 ...................... GetGlobalSlot <3> 
    0470: [2] 21 ......................... Cast 
    0471: [1] 3b ......................... Dup 
    0472: [2] 5d ......................... LoadThis 
    0473: [3] 5c a9 34 ................... LoadString <id> 
    0476: [4] b8 ......................... PutObjNameExpr 
    0477: [1] ae ......................... PutThisSlot_0 

    # db/Record.es:173                      runFilters(_afterFilters)

    0485: [0] 88 12 01 ................... GetThisTypeSlot <slot: 18> <1> 
    0488: [1] 18 18 01 ................... CallThisSlot <slot: 24> <argc: 1> 

    # db/Record.es:175                      return true

    0498: [0] 5e ......................... LoadTrue 
    0499: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    102     105        140          140       StopIteration
1   iteration    193     196        221          221       StopIteration
2   iteration    305     308        351          351       StopIteration

VARIABLE:   [save-00]  private var sql : String

VARIABLE:   [save-01]  private var result : Array

VARIABLE:   [save-02]  -hoisted-2 var field : String

VARIABLE:   [save-03]  -hoisted-3 var field : String

VARIABLE:   [save-05]  -hoisted-5 var field : String

FUNCTION:   [Record-26]  public function saveUpdate(fields: Object) : Boolean

     ARG:   [arg-00]   private fields : Object
   LOCAL:   [local-01] var field


    # db/Record.es:187                      for (field in fields) {

    0007: [0] 61 ......................... GetLocalSlot_0 
    0008: [1] 17 01 00 ................... CallObjSlot <slot: 1> <argc: 0> 
    0011: [0] 99 ......................... PushResult 
    0012: [1] 3b ......................... Dup 
    0013: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0016: [1] 99 ......................... PushResult 
    0017: [2] 9b ......................... PutLocalSlot_1 

    # db/Record.es:188                          if (this[field] != undefined) {

    0025: [1] 5d ......................... LoadThis 
    0026: [2] 62 ......................... GetLocalSlot_1 
    0027: [3] 81 ......................... GetObjNameExpr 
    0028: [2] 83 3a ...................... GetGlobalSlot <58> 
    0030: [3] 2c ......................... CompareNE 
    0031: [2] 12 0f ...................... BranchFalse.8 <addr: 48> 

    # db/Record.es:189                              this[field] = fields[field]

    0040: [1] 61 ......................... GetLocalSlot_0 
    0041: [2] 62 ......................... GetLocalSlot_1 
    0042: [3] 81 ......................... GetObjNameExpr 
    0043: [2] 5d ......................... LoadThis 
    0044: [3] 62 ......................... GetLocalSlot_1 
    0045: [4] b8 ......................... PutObjNameExpr 
    0046: [1] 40 00 ...................... Goto.8 <addr: 48> 
    0048: [1] 40 da ...................... Goto.8 <addr: 12> 
    0050: [1] 96 ......................... Pop 

    # db/Record.es:192                      return save()

    0058: [0] 18 19 00 ................... CallThisSlot <slot: 25> <argc: 0> 
    0061: [0] 99 ......................... PushResult 
    0062: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     13      16         50           50       StopIteration

VARIABLE:   [saveUpdate-00]  private var fields : Object

VARIABLE:   [saveUpdate-01]  -hoisted-1 var field

FUNCTION:   [Record-27]  public static function belongsTo(owner, options: Object) : Void

     ARG:   [arg-00]   private owner
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:208                      if (_belongsTo == undefined) {

    0013: [0] 88 06 01 ................... GetThisTypeSlot <slot: 6> <1> 
    0016: [1] 83 3a ...................... GetGlobalSlot <58> 
    0018: [2] 25 ......................... CompareEQ 
    0019: [1] 12 14 ...................... BranchFalse.8 <addr: 41> 

    # db/Record.es:209                          _belongsTo = [owner]

    0028: [0] 83 07 ...................... GetGlobalSlot <7> 
    0030: [1] 8e ......................... New 
    0031: [1] 3b ......................... Dup 
    0032: [2] 61 ......................... GetLocalSlot_0 
    0033: [3] cb ......................... Swap 
    0034: [3] 46 ......................... Load0 
    0035: [4] b8 ......................... PutObjNameExpr 
    0036: [1] c2 06 01 ................... PutThisTypeSlot <slot: 6> <1> 
    0039: [0] 40 18 ...................... Goto.8 <addr: 65> 

    # db/Record.es:210                      } else {
    # db/Record.es:211                          _belongsTo.append(owner)

    0055: [0] 88 06 01 ................... GetThisTypeSlot <slot: 6> <1> 
    0058: [1] 61 ......................... GetLocalSlot_0 
    0059: [2] 1d a0 0d c4 0a 01 .......... CallObjName <append> <> <argc: 1> 
    0065: [0] c4 ......................... Return 

    # db/Record.es:213                  }
    

VARIABLE:   [belongsTo-00]  private var owner

VARIABLE:   [belongsTo-01]  private var options : Object

FUNCTION:   [Record-28]  [ejs.db::Record,private] static function createRecord(rowData: Object) : Record

     ARG:   [arg-00]   private rowData : Object
   LOCAL:   [local-01] var rec : Record
   LOCAL:   [local-02] var field : String


    # db/Record.es:221                      let rec: Record = new global[_className]

    0007: [0] 83 33 ...................... GetGlobalSlot <51> 
    0009: [1] 88 07 01 ................... GetThisTypeSlot <slot: 7> <1> 
    0012: [2] 81 ......................... GetObjNameExpr 
    0013: [1] 8e ......................... New 
    0014: [1] 1f 00 ...................... CallConstructor <argc: 0> 
    0016: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:222                      rec.constructor(rec)

    0024: [0] 62 ......................... GetLocalSlot_1 
    0025: [1] 62 ......................... GetLocalSlot_1 
    0026: [2] 17 14 01 ................... CallObjSlot <slot: 20> <argc: 1> 

    # db/Record.es:223                      for (let field: String in rowData) {

    0036: [0] 61 ......................... GetLocalSlot_0 
    0037: [1] 17 01 00 ................... CallObjSlot <slot: 1> <argc: 0> 
    0040: [0] 99 ......................... PushResult 
    0041: [1] 3b ......................... Dup 
    0042: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0045: [1] 99 ......................... PushResult 
    0046: [2] 9c ......................... PutLocalSlot_2 

    # db/Record.es:224                          rec[field] = rowData[field]

    0054: [1] 61 ......................... GetLocalSlot_0 
    0055: [2] 63 ......................... GetLocalSlot_2 
    0056: [3] 81 ......................... GetObjNameExpr 
    0057: [2] 62 ......................... GetLocalSlot_1 
    0058: [3] 63 ......................... GetLocalSlot_2 
    0059: [4] b8 ......................... PutObjNameExpr 
    0060: [1] 40 eb ...................... Goto.8 <addr: 41> 
    0062: [1] 96 ......................... Pop 

    # db/Record.es:225                      }
    # db/Record.es:226                      rec.coerceTypes()

    0077: [0] 62 ......................... GetLocalSlot_1 
    0078: [1] 17 46 00 ................... CallObjSlot <slot: 70> <argc: 0> 

    # db/Record.es:227                      rec._keyValue = rowData[_keyName]

    0088: [0] 61 ......................... GetLocalSlot_0 
    0089: [1] 88 0d 01 ................... GetThisTypeSlot <slot: 13> <1> 
    0092: [2] 81 ......................... GetObjNameExpr 
    0093: [1] 62 ......................... GetLocalSlot_1 
    0094: [2] a4 ......................... PutObjSlot_0 

    # db/Record.es:228                      return rec

    0102: [0] 62 ......................... GetLocalSlot_1 
    0103: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     42      45         62           62       StopIteration

VARIABLE:   [createRecord-00]  private var rowData : Object

VARIABLE:   [createRecord-01]  private var rec : Record

VARIABLE:   [createRecord-02]  -hoisted-2 var field : String

FUNCTION:   [Record-29]  public static function find(key: Object, options: Object) : Object

     ARG:   [arg-00]   private key : Object
     ARG:   [arg-01]   private options : Object
   LOCAL:   [local-02] var grid : Array

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:257                      let grid: Array = innerFind(key, options)

    0013: [0] 61 ......................... GetLocalSlot_0 
    0014: [1] 62 ......................... GetLocalSlot_1 
    0015: [2] 1c 22 00 02 ................ CallThisStaticSlot <slot: 34> <0> <argc: 2> 
    0019: [0] 99 ......................... PushResult 
    0020: [1] 9c ......................... PutLocalSlot_2 

    # db/Record.es:258                      if (grid.length >= 1) {

    0028: [0] 63 ......................... GetLocalSlot_2 
    0029: [1] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0032: [1] 47 ......................... Load1 
    0033: [2] 28 ......................... CompareGE 
    0034: [1] 12 12 ...................... BranchFalse.8 <addr: 54> 

    # db/Record.es:259                          return createRecord(grid[0])

    0043: [0] 63 ......................... GetLocalSlot_2 
    0044: [1] 46 ......................... Load0 
    0045: [2] 81 ......................... GetObjNameExpr 
    0046: [1] 1c 1c 00 01 ................ CallThisStaticSlot <slot: 28> <0> <argc: 1> 
    0050: [0] 99 ......................... PushResult 
    0051: [1] c5 ......................... ReturnValue 
    0052: [0] 40 00 ...................... Goto.8 <addr: 54> 

    # db/Record.es:261                      return null

    0061: [0] 5a ......................... LoadNull 
    0062: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [find-00]  private var key : Object

VARIABLE:   [find-01]  private var options : Object

VARIABLE:   [find-02]  private var grid : Array

FUNCTION:   [Record-30]  public static function findAll(options: Object) : Array

     ARG:   [arg-00]   private options : Object
   LOCAL:   [local-01] var grid : Array
   LOCAL:   [local-02] var i

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:272                      let grid: Array = innerFind(null, options)

    0013: [0] 5a ......................... LoadNull 
    0014: [1] 61 ......................... GetLocalSlot_0 
    0015: [2] 1c 22 00 02 ................ CallThisStaticSlot <slot: 34> <0> <argc: 2> 
    0019: [0] 99 ......................... PushResult 
    0020: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:273                      for (let i = 0; i < grid.length; i++) {

    0028: [0] 46 ......................... Load0 
    0029: [1] 9c ......................... PutLocalSlot_2 
    0030: [0] 63 ......................... GetLocalSlot_2 
    0031: [1] 62 ......................... GetLocalSlot_1 
    0032: [2] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0035: [2] 2b ......................... CompareLT 
    0036: [1] 12 21 ...................... BranchFalse.8 <addr: 71> 

    # db/Record.es:274                          grid[i] = createRecord(grid[i])

    0045: [0] 62 ......................... GetLocalSlot_1 
    0046: [1] 63 ......................... GetLocalSlot_2 
    0047: [2] 81 ......................... GetObjNameExpr 
    0048: [1] 1c 1c 00 01 ................ CallThisStaticSlot <slot: 28> <0> <argc: 1> 
    0052: [0] 99 ......................... PushResult 
    0053: [1] 62 ......................... GetLocalSlot_1 
    0054: [2] 63 ......................... GetLocalSlot_2 
    0055: [3] b8 ......................... PutObjNameExpr 

    # db/Record.es:273                      for (let i = 0; i < grid.length; i++) {

    0063: [0] 63 ......................... GetLocalSlot_2 
    0064: [1] 3b ......................... Dup 
    0065: [2] 41 01 ...................... Inc <1> 
    0067: [2] 9c ......................... PutLocalSlot_2 
    0068: [1] 96 ......................... Pop 
    0069: [0] 40 d7 ...................... Goto.8 <addr: 30> 

    # db/Record.es:276                      return grid

    0078: [0] 62 ......................... GetLocalSlot_1 
    0079: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [findAll-00]  private var options : Object

VARIABLE:   [findAll-01]  private var grid : Array

VARIABLE:   [findAll-02]  -hoisted-2 var i

FUNCTION:   [Record-31]  public static function findOneWhere(where: String) : Object

     ARG:   [arg-00]   private where : String
   LOCAL:   [local-01] var grid : Array


    # db/Record.es:289                      let grid: Array = innerFind(null, { conditions: [where]})

    0007: [0] 5a ......................... LoadNull 
    0008: [1] 5c b1 66 ................... LoadString <conditions> 
    0011: [2] 83 07 ...................... GetGlobalSlot <7> 
    0013: [3] 8e ......................... New 
    0014: [3] 3b ......................... Dup 
    0015: [4] 61 ......................... GetLocalSlot_0 
    0016: [5] cb ......................... Swap 
    0017: [5] 46 ......................... Load0 
    0018: [6] b8 ......................... PutObjNameExpr 
    0019: [3] 90 02 01 ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 1> 
    0022: [2] 1c 22 00 02 ................ CallThisStaticSlot <slot: 34> <0> <argc: 2> 
    0026: [0] 99 ......................... PushResult 
    0027: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:290                      if (grid.length >= 1) {

    0035: [0] 62 ......................... GetLocalSlot_1 
    0036: [1] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0039: [1] 47 ......................... Load1 
    0040: [2] 28 ......................... CompareGE 
    0041: [1] 12 12 ...................... BranchFalse.8 <addr: 61> 

    # db/Record.es:291                          return createRecord(grid[0])

    0050: [0] 62 ......................... GetLocalSlot_1 
    0051: [1] 46 ......................... Load0 
    0052: [2] 81 ......................... GetObjNameExpr 
    0053: [1] 1c 1c 00 01 ................ CallThisStaticSlot <slot: 28> <0> <argc: 1> 
    0057: [0] 99 ......................... PushResult 
    0058: [1] c5 ......................... ReturnValue 
    0059: [0] 40 00 ...................... Goto.8 <addr: 61> 

    # db/Record.es:293                      return null

    0068: [0] 5a ......................... LoadNull 
    0069: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [findOneWhere-00]  private var where : String

VARIABLE:   [findOneWhere-01]  private var grid : Array

FUNCTION:   [Record-32]  public static function findWhere(where: String, count: Number) : Array

     ARG:   [arg-00]   private where : String
     ARG:   [arg-01]   private count : Number
   LOCAL:   [local-02] var grid : Array
   LOCAL:   [local-03] var i

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:305                      let grid: Array = innerFind(null, { conditions: [where]})

    0013: [0] 5a ......................... LoadNull 
    0014: [1] 5c b1 66 ................... LoadString <conditions> 
    0017: [2] 83 07 ...................... GetGlobalSlot <7> 
    0019: [3] 8e ......................... New 
    0020: [3] 3b ......................... Dup 
    0021: [4] 61 ......................... GetLocalSlot_0 
    0022: [5] cb ......................... Swap 
    0023: [5] 46 ......................... Load0 
    0024: [6] b8 ......................... PutObjNameExpr 
    0025: [3] 90 02 01 ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 1> 
    0028: [2] 1c 22 00 02 ................ CallThisStaticSlot <slot: 34> <0> <argc: 2> 
    0032: [0] 99 ......................... PushResult 
    0033: [1] 9c ......................... PutLocalSlot_2 

    # db/Record.es:306                      for (let i = 0; i < grid.length; i++) {

    0041: [0] 46 ......................... Load0 
    0042: [1] 9d ......................... PutLocalSlot_3 
    0043: [0] 64 ......................... GetLocalSlot_3 
    0044: [1] 63 ......................... GetLocalSlot_2 
    0045: [2] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0048: [2] 2b ......................... CompareLT 
    0049: [1] 12 21 ...................... BranchFalse.8 <addr: 84> 

    # db/Record.es:307                          grid[i] = createRecord(grid[i])

    0058: [0] 63 ......................... GetLocalSlot_2 
    0059: [1] 64 ......................... GetLocalSlot_3 
    0060: [2] 81 ......................... GetObjNameExpr 
    0061: [1] 1c 1c 00 01 ................ CallThisStaticSlot <slot: 28> <0> <argc: 1> 
    0065: [0] 99 ......................... PushResult 
    0066: [1] 63 ......................... GetLocalSlot_2 
    0067: [2] 64 ......................... GetLocalSlot_3 
    0068: [3] b8 ......................... PutObjNameExpr 

    # db/Record.es:306                      for (let i = 0; i < grid.length; i++) {

    0076: [0] 64 ......................... GetLocalSlot_3 
    0077: [1] 3b ......................... Dup 
    0078: [2] 41 01 ...................... Inc <1> 
    0080: [2] 9d ......................... PutLocalSlot_3 
    0081: [1] 96 ......................... Pop 
    0082: [0] 40 d7 ...................... Goto.8 <addr: 43> 

    # db/Record.es:309                      return grid

    0091: [0] 63 ......................... GetLocalSlot_2 
    0092: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [findWhere-00]  private var where : String

VARIABLE:   [findWhere-01]  private var count : Number

VARIABLE:   [findWhere-02]  private var grid : Array

VARIABLE:   [findWhere-03]  -hoisted-3 var i

FUNCTION:   [Record-33]  [ejs.db::Record,private] static function includeJoin(joins: Object) : String

     ARG:   [arg-00]   private joins : Object
   LOCAL:   [local-01] var cmd : String
   LOCAL:   [local-02] var join


    # db/Record.es:315                      var cmd: String = ""

    0007: [0] 5c c4 0a ................... LoadString <> 
    0010: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:316                      for each (join in joins) {

    0018: [0] 61 ......................... GetLocalSlot_0 
    0019: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0022: [0] 99 ......................... PushResult 
    0023: [1] 3b ......................... Dup 
    0024: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0027: [1] 99 ......................... PushResult 
    0028: [2] 9c ......................... PutLocalSlot_2 

    # db/Record.es:317                          cmd ="LEFT OUTER JOIN " + join + ON + " " + prev + ".id = " + join + "." + singular(prev) + "Id" +

    0036: [1] 5c b4 69 ................... LoadString <LEFT OUTER JOIN > 
    0039: [2] 63 ......................... GetLocalSlot_2 
    0040: [3] 00 ......................... Add 
    0041: [2] 7f c5 69 c4 0a ............. GetScopedName <ON> <> 
    0046: [3] 00 ......................... Add 
    0047: [2] 5c bd 29 ................... LoadString < > 
    0050: [3] 00 ......................... Add 
    0051: [2] 7f c8 69 c4 0a ............. GetScopedName <prev> <> 
    0056: [3] 00 ......................... Add 
    0057: [2] 5c cd 69 ................... LoadString <.id = > 
    0060: [3] 00 ......................... Add 
    0061: [2] 63 ......................... GetLocalSlot_2 
    0062: [3] 00 ......................... Add 
    0063: [2] 5c d4 69 ................... LoadString <.> 
    0066: [3] 00 ......................... Add 
    0067: [2] 7f c8 69 c4 0a ............. GetScopedName <prev> <> 
    0072: [3] 1e d6 69 c4 0a 01 .......... CallScopedName <singular> <> <argc: 1> 
    0078: [2] 99 ......................... PushResult 
    0079: [3] 00 ......................... Add 
    0080: [2] 5c df 69 ................... LoadString <Id> 
    0083: [3] 00 ......................... Add 

    # db/Record.es:318                               includeJoin(join)

    0091: [2] 63 ......................... GetLocalSlot_2 
    0092: [3] 1c 21 00 01 ................ CallThisStaticSlot <slot: 33> <0> <argc: 1> 
    0096: [2] 99 ......................... PushResult 
    0097: [3] 00 ......................... Add 

    # db/Record.es:317                          cmd ="LEFT OUTER JOIN " + join + ON + " " + prev + ".id = " + join + "." + singular(prev) + "Id" +

    0105: [2] 9b ......................... PutLocalSlot_1 

    # db/Record.es:319                          break

    0113: [1] 3f 03 00 00 00 ............. Goto <addr: 121> 
    0118: [1] 40 9f ...................... Goto.8 <addr: 23> 
    0120: [1] 96 ......................... Pop 

    # db/Record.es:321                      return cmd

    0128: [0] 62 ......................... GetLocalSlot_1 
    0129: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     24      27        120          120       StopIteration

VARIABLE:   [includeJoin-00]  private var joins : Object

VARIABLE:   [includeJoin-01]  private var cmd : String

VARIABLE:   [includeJoin-02]  -hoisted-2 var join

FUNCTION:   [Record-34]  [ejs.db::Record,private] static function innerFind(key: Object, options: Object) : Array

     ARG:   [arg-00]   private key : Object
     ARG:   [arg-01]   private options : Object
   LOCAL:   [local-02] var cmd : String
   LOCAL:   [local-03] var columns : Array
   LOCAL:   [local-04] var from : String
   LOCAL:   [local-05] var conditions : String
   LOCAL:   [local-06] var where : String
   LOCAL:   [local-07] var db
   LOCAL:   [local-08] var results : Array
   LOCAL:   [local-09] var index : Number
   LOCAL:   [local-10] var 
   LOCAL:   [local-11] var owner
   LOCAL:   [local-12] var owner
   LOCAL:   [local-13] var tname
   LOCAL:   [local-14] var parts : Array
   LOCAL:   [local-15] var 
   LOCAL:   [local-16] var cond
   LOCAL:   [local-17] var field
   LOCAL:   [local-18] var 
   LOCAL:   [local-19] var e

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:329                      let cmd: String
    # db/Record.es:330                      let columns: Array
    # db/Record.es:331                      let from: String
    # db/Record.es:332                      let conditions: String
    # db/Record.es:333                      let where: String
    # db/Record.es:336                      if (options == null) {

    0048: [0] 62 ......................... GetLocalSlot_1 
    0049: [1] 5a ......................... LoadNull 
    0050: [2] 25 ......................... CompareEQ 
    0051: [1] 12 0d ...................... BranchFalse.8 <addr: 66> 

    # db/Record.es:337                          options = {}

    0060: [0] 90 02 00 ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 0> 
    0063: [1] 9b ......................... PutLocalSlot_1 
    0064: [0] 40 00 ...................... Goto.8 <addr: 66> 

    # db/Record.es:340                      if (options.columns) {

    0073: [0] 62 ......................... GetLocalSlot_1 
    0074: [1] 80 b0 21 c4 0a ............. GetObjName <columns> <> 
    0079: [1] 12 6a ...................... BranchFalse.8 <addr: 187> 

    # db/Record.es:341                          columns = options.columns

    0088: [0] 62 ......................... GetLocalSlot_1 
    0089: [1] 80 b0 21 c4 0a ............. GetObjName <columns> <> 
    0094: [1] 9d ......................... PutLocalSlot_3 

    # db/Record.es:346                          let index: Number = columns.indexOf("id")

    0102: [0] 64 ......................... GetLocalSlot_3 
    0103: [1] 5c a9 34 ................... LoadString <id> 
    0106: [2] 17 10 01 ................... CallObjSlot <slot: 16> <argc: 1> 
    0109: [0] 99 ......................... PushResult 
    0110: [1] a3 ......................... PutLocalSlot_9 

    # db/Record.es:347                          if (index >= 0) {

    0118: [0] 6a ......................... GetLocalSlot_9 
    0119: [1] 46 ......................... Load0 
    0120: [2] 28 ......................... CompareGE 
    0121: [1] 12 13 ...................... BranchFalse.8 <addr: 142> 

    # db/Record.es:348                              columns[index] = _tableName + ".id"

    0130: [0] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0133: [1] 5c ce 6e ................... LoadString <.id> 
    0136: [2] 00 ......................... Add 
    0137: [1] 64 ......................... GetLocalSlot_3 
    0138: [2] 6a ......................... GetLocalSlot_9 
    0139: [3] b8 ......................... PutObjNameExpr 
    0140: [0] 40 2b ...................... Goto.8 <addr: 185> 

    # db/Record.es:349                          } else if (!columns.contains(_tableName + ".id")) {

    0149: [0] 64 ......................... GetLocalSlot_3 
    0150: [1] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0153: [2] 5c ce 6e ................... LoadString <.id> 
    0156: [3] 00 ......................... Add 
    0157: [2] 17 0a 01 ................... CallObjSlot <slot: 10> <argc: 1> 
    0160: [0] 99 ......................... PushResult 
    0161: [1] 8b ......................... LogicalNot 
    0162: [1] 12 15 ...................... BranchFalse.8 <addr: 185> 

    # db/Record.es:350                              columns.insert(0, _tableName + ".id")

    0171: [0] 64 ......................... GetLocalSlot_3 
    0172: [1] 46 ......................... Load0 
    0173: [2] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0176: [3] 5c ce 6e ................... LoadString <.id> 
    0179: [4] 00 ......................... Add 
    0180: [3] 17 11 02 ................... CallObjSlot <slot: 17> <argc: 2> 
    0183: [0] 40 00 ...................... Goto.8 <addr: 185> 
    0185: [0] 40 12 ...................... Goto.8 <addr: 205> 

    # db/Record.es:352                      } else {
    # db/Record.es:353                          columns =  "*"

    0201: [0] 5c ef 6f ................... LoadString <*> 
    0204: [1] 9d ......................... PutLocalSlot_3 

    # db/Record.es:354                      }
    # db/Record.es:356                      conditions = ""

    0219: [0] 5c c4 0a ................... LoadString <> 
    0222: [1] 9f ......................... PutLocalSlot_5 

    # db/Record.es:357                      from = ""

    0230: [0] 5c c4 0a ................... LoadString <> 
    0233: [1] 9e ......................... PutLocalSlot_4 

    # db/Record.es:358                      where = false

    0241: [0] 51 ......................... LoadFalse 
    0242: [1] a0 ......................... PutLocalSlot_6 

    # db/Record.es:360                      if (options.from) {

    0250: [0] 62 ......................... GetLocalSlot_1 
    0251: [1] 80 dc 6b c4 0a ............. GetObjName <from> <> 
    0256: [1] 12 13 ...................... BranchFalse.8 <addr: 277> 

    # db/Record.es:361                          from = options.from

    0265: [0] 62 ......................... GetLocalSlot_1 
    0266: [1] 80 dc 6b c4 0a ............. GetObjName <from> <> 
    0271: [1] 9e ......................... PutLocalSlot_4 
    0272: [0] 3f 93 01 00 00 ............. Goto <addr: 680> 

    # db/Record.es:363                      } else if (options.include) {

    0284: [0] 62 ......................... GetLocalSlot_1 
    0285: [1] 80 ab 71 c4 0a ............. GetObjName <include> <> 
    0290: [1] 12 22 ...................... BranchFalse.8 <addr: 326> 

    # db/Record.es:365                          from = _tableName + " " + includeJoins(options.include)

    0299: [0] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0302: [1] 5c bd 29 ................... LoadString < > 
    0305: [2] 00 ......................... Add 
    0306: [1] 62 ......................... GetLocalSlot_1 
    0307: [2] 80 ab 71 c4 0a ............. GetObjName <include> <> 
    0312: [2] 1e fb 71 c4 0a 01 .......... CallScopedName <includeJoins> <> <argc: 1> 
    0318: [1] 99 ......................... PushResult 
    0319: [2] 00 ......................... Add 
    0320: [1] 9e ......................... PutLocalSlot_4 
    0321: [0] 3f 62 01 00 00 ............. Goto <addr: 680> 

    # db/Record.es:367                      } else {
    # db/Record.es:368                          from = _tableName

    0340: [0] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0343: [1] 9e ......................... PutLocalSlot_4 

    # db/Record.es:373                          if (_belongsTo && options.joinBelongs != false) {

    0351: [0] 88 06 01 ................... GetThisTypeSlot <slot: 6> <1> 
    0354: [1] 22 ......................... CastBoolean 
    0355: [1] 3b ......................... Dup 
    0356: [2] 12 0a ...................... BranchFalse.8 <addr: 368> 
    0358: [1] 96 ......................... Pop 
    0359: [0] 62 ......................... GetLocalSlot_1 
    0360: [1] 80 ec 72 c4 0a ............. GetObjName <joinBelongs> <> 
    0365: [1] 51 ......................... LoadFalse 
    0366: [2] 2c ......................... CompareNE 
    0367: [1] 22 ......................... CastBoolean 
    0368: [1] 06 b2 00 00 00 ............. BranchFalse <addr: 551> 

    # db/Record.es:374                              conditions = " ON "

    0380: [0] 5c 81 25 ................... LoadString < ON > 
    0383: [1] 9f ......................... PutLocalSlot_5 

    # db/Record.es:375                              for each (let owner in _belongsTo) {

    0391: [0] 88 06 01 ................... GetThisTypeSlot <slot: 6> <1> 
    0394: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0397: [0] 99 ......................... PushResult 
    0398: [1] 3b ......................... Dup 
    0399: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0402: [1] 99 ......................... PushResult 
    0403: [2] be 0b ...................... PutLocalSlot <slot: 11> 

    # db/Record.es:376                                  from += " INNER JOIN " + owner._tableName

    0412: [1] 65 ......................... GetLocalSlot_4 
    0413: [2] 5c a7 74 ................... LoadString < INNER JOIN > 
    0416: [3] 84 0b ...................... GetLocalSlot <slot: 11> 
    0418: [4] 80 d8 42 00 ................ GetObjName <_tableName> <> 
    0422: [4] 00 ......................... Add 
    0423: [3] 00 ......................... Add 
    0424: [2] 9e ......................... PutLocalSlot_4 
    0425: [1] 40 e3 ...................... Goto.8 <addr: 398> 
    0427: [1] 96 ......................... Pop 

    # db/Record.es:378                              for each (let owner in _belongsTo) {

    0435: [0] 88 06 01 ................... GetThisTypeSlot <slot: 6> <1> 
    0438: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0441: [0] 99 ......................... PushResult 
    0442: [1] 3b ......................... Dup 
    0443: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0446: [1] 99 ......................... PushResult 
    0447: [2] be 0c ...................... PutLocalSlot <slot: 12> 

    # db/Record.es:379                                  let tname = Reflect(owner).name

    0456: [1] 84 0c ...................... GetLocalSlot <slot: 12> 
    0458: [2] 16 1e 01 ................... CallGlobalSlot <slot: 30> <argc: 1> 
    0461: [1] 99 ......................... PushResult 
    0462: [2] 87 06 00 ................... GetTypeSlot <slot: 6> <0> 
    0465: [2] be 0d ...................... PutLocalSlot <slot: 13> 

    # db/Record.es:380                                  tname = tname[0].toLower() + tname.slice(1) + "Id"

    0474: [1] 84 0d ...................... GetLocalSlot <slot: 13> 
    0476: [2] 46 ......................... Load0 
    0477: [3] 81 ......................... GetObjNameExpr 
    0478: [2] 1d d5 75 00 00 ............. CallObjName <toLower> <> <argc: 0> 
    0483: [1] 99 ......................... PushResult 
    0484: [2] 84 0d ...................... GetLocalSlot <slot: 13> 
    0486: [3] 47 ......................... Load1 
    0487: [4] 1d dd 75 00 01 ............. CallObjName <slice> <> <argc: 1> 
    0492: [2] 99 ......................... PushResult 
    0493: [3] 00 ......................... Add 
    0494: [2] 5c df 69 ................... LoadString <Id> 
    0497: [3] 00 ......................... Add 
    0498: [2] be 0d ...................... PutLocalSlot <slot: 13> 

    # db/Record.es:381                                  conditions += _tableName + "." + tname + " = " + owner._tableName + "." + owner._keyName + " AND "

    0507: [1] 66 ......................... GetLocalSlot_5 
    0508: [2] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0511: [3] 5c d4 69 ................... LoadString <.> 
    0514: [4] 00 ......................... Add 
    0515: [3] 84 0d ...................... GetLocalSlot <slot: 13> 
    0517: [4] 00 ......................... Add 
    0518: [3] 5c c4 58 ................... LoadString < = > 
    0521: [4] 00 ......................... Add 
    0522: [3] 84 0c ...................... GetLocalSlot <slot: 12> 
    0524: [4] 80 d8 42 00 ................ GetObjName <_tableName> <> 
    0528: [4] 00 ......................... Add 
    0529: [3] 5c d4 69 ................... LoadString <.> 
    0532: [4] 00 ......................... Add 
    0533: [3] 84 0c ...................... GetLocalSlot <slot: 12> 
    0535: [4] 80 a0 42 00 ................ GetObjName <_keyName> <> 
    0539: [4] 00 ......................... Add 
    0540: [3] 5c de 76 ................... LoadString < AND > 
    0543: [4] 00 ......................... Add 
    0544: [3] 00 ......................... Add 
    0545: [2] 9f ......................... PutLocalSlot_5 
    0546: [1] 40 96 ...................... Goto.8 <addr: 442> 
    0548: [1] 96 ......................... Pop 
    0549: [0] 40 00 ...................... Goto.8 <addr: 551> 

    # db/Record.es:384                          if (options.joins) {

    0558: [0] 62 ......................... GetLocalSlot_1 
    0559: [1] 80 c2 6a c4 0a ............. GetObjName <joins> <> 
    0564: [1] 12 72 ...................... BranchFalse.8 <addr: 680> 

    # db/Record.es:385                              if (conditions == "") {

    0573: [0] 66 ......................... GetLocalSlot_5 
    0574: [1] 5c c4 0a ................... LoadString <> 
    0577: [2] 25 ......................... CompareEQ 
    0578: [1] 12 0d ...................... BranchFalse.8 <addr: 593> 

    # db/Record.es:386                                  conditions = " ON "

    0587: [0] 5c 81 25 ................... LoadString < ON > 
    0590: [1] 9f ......................... PutLocalSlot_5 
    0591: [0] 40 00 ...................... Goto.8 <addr: 593> 

    # db/Record.es:387                              }
    # db/Record.es:388                              let parts: Array = options.joins.split(" ON ")

    0607: [0] 62 ......................... GetLocalSlot_1 
    0608: [1] 80 c2 6a c4 0a ............. GetObjName <joins> <> 
    0613: [1] 5c 81 25 ................... LoadString < ON > 
    0616: [2] 1d b6 78 00 01 ............. CallObjName <split> <> <argc: 1> 
    0621: [0] 99 ......................... PushResult 
    0622: [1] be 0e ...................... PutLocalSlot <slot: 14> 

    # db/Record.es:389                              from += " " + parts[0]

    0631: [0] 65 ......................... GetLocalSlot_4 
    0632: [1] 5c bd 29 ................... LoadString < > 
    0635: [2] 84 0e ...................... GetLocalSlot <slot: 14> 
    0637: [3] 46 ......................... Load0 
    0638: [4] 81 ......................... GetObjNameExpr 
    0639: [3] 00 ......................... Add 
    0640: [2] 00 ......................... Add 
    0641: [1] 9e ......................... PutLocalSlot_4 

    # db/Record.es:390                              if (parts.length > 1) {

    0649: [0] 84 0e ...................... GetLocalSlot <slot: 14> 
    0651: [1] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0654: [1] 47 ......................... Load1 
    0655: [2] 29 ......................... CompareGT 
    0656: [1] 12 14 ...................... BranchFalse.8 <addr: 678> 

    # db/Record.es:391                                  conditions += parts[1] + " AND "

    0665: [0] 66 ......................... GetLocalSlot_5 
    0666: [1] 84 0e ...................... GetLocalSlot <slot: 14> 
    0668: [2] 47 ......................... Load1 
    0669: [3] 81 ......................... GetObjNameExpr 
    0670: [2] 5c de 76 ................... LoadString < AND > 
    0673: [3] 00 ......................... Add 
    0674: [2] 00 ......................... Add 
    0675: [1] 9f ......................... PutLocalSlot_5 
    0676: [0] 40 00 ...................... Goto.8 <addr: 678> 
    0678: [0] 40 00 ...................... Goto.8 <addr: 680> 

    # db/Record.es:394                      }
    # db/Record.es:395                      conditions = conditions.trim(" AND ")

    0694: [0] 66 ......................... GetLocalSlot_5 
    0695: [1] 5c de 76 ................... LoadString < AND > 
    0698: [2] 17 26 01 ................... CallObjSlot <slot: 38> <argc: 1> 
    0701: [0] 99 ......................... PushResult 
    0702: [1] 9f ......................... PutLocalSlot_5 

    # db/Record.es:397                      if (options.conditions) {

    0710: [0] 62 ......................... GetLocalSlot_1 
    0711: [1] 80 b1 66 c4 0a ............. GetObjName <conditions> <> 
    0716: [1] 06 e0 00 00 00 ............. BranchFalse <addr: 945> 

    # db/Record.es:398                          where = true

    0728: [0] 5e ......................... LoadTrue 
    0729: [1] a0 ......................... PutLocalSlot_6 

    # db/Record.es:399                          conditions += " WHERE "

    0737: [0] 66 ......................... GetLocalSlot_5 
    0738: [1] 5c bc 58 ................... LoadString < WHERE > 
    0741: [2] 00 ......................... Add 
    0742: [1] 9f ......................... PutLocalSlot_5 

    # db/Record.es:400                          if (options.conditions is Array) {

    0750: [0] 62 ......................... GetLocalSlot_1 
    0751: [1] 80 b1 66 c4 0a ............. GetObjName <conditions> <> 
    0756: [1] 83 07 ...................... GetGlobalSlot <7> 
    0758: [2] 45 ......................... IsA 
    0759: [1] 12 4b ...................... BranchFalse.8 <addr: 836> 

    # db/Record.es:401                              for each (cond in options.conditions) {

    0768: [0] 62 ......................... GetLocalSlot_1 
    0769: [1] 80 b1 66 c4 0a ............. GetObjName <conditions> <> 
    0774: [1] 1d c4 0c d9 0a 00 .......... CallObjName <getValues> <iterator> <argc: 0> 
    0780: [0] 99 ......................... PushResult 
    0781: [1] 3b ......................... Dup 
    0782: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0785: [1] 99 ......................... PushResult 
    0786: [2] be 10 ...................... PutLocalSlot <slot: 16> 

    # db/Record.es:402                                  conditions += cond + " " + " OR "

    0795: [1] 66 ......................... GetLocalSlot_5 
    0796: [2] 84 10 ...................... GetLocalSlot <slot: 16> 
    0798: [3] 5c bd 29 ................... LoadString < > 
    0801: [4] 00 ......................... Add 
    0802: [3] 5c a3 7c ................... LoadString < OR > 
    0805: [4] 00 ......................... Add 
    0806: [3] 00 ......................... Add 
    0807: [2] 9f ......................... PutLocalSlot_5 
    0808: [1] 40 e3 ...................... Goto.8 <addr: 781> 
    0810: [1] 96 ......................... Pop 

    # db/Record.es:403                              }
    # db/Record.es:404                              conditions = conditions.trim(" OR ")

    0825: [0] 66 ......................... GetLocalSlot_5 
    0826: [1] 5c a3 7c ................... LoadString < OR > 
    0829: [2] 17 26 01 ................... CallObjSlot <slot: 38> <argc: 1> 
    0832: [0] 99 ......................... PushResult 
    0833: [1] 9f ......................... PutLocalSlot_5 
    0834: [0] 40 54 ...................... Goto.8 <addr: 920> 

    # db/Record.es:406                          } else if (options.conditions is Object) {

    0843: [0] 62 ......................... GetLocalSlot_1 
    0844: [1] 80 b1 66 c4 0a ............. GetObjName <conditions> <> 
    0849: [1] 83 00 ...................... GetGlobalSlot <0> 
    0851: [2] 45 ......................... IsA 
    0852: [1] 12 42 ...................... BranchFalse.8 <addr: 920> 

    # db/Record.es:407                              for (field in options.conditions) {

    0861: [0] 62 ......................... GetLocalSlot_1 
    0862: [1] 80 b1 66 c4 0a ............. GetObjName <conditions> <> 
    0867: [1] 1d ad 3d d9 0a 00 .......... CallObjName <get> <iterator> <argc: 0> 
    0873: [0] 99 ......................... PushResult 
    0874: [1] 3b ......................... Dup 
    0875: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0878: [1] 99 ......................... PushResult 
    0879: [2] be 11 ...................... PutLocalSlot <slot: 17> 

    # db/Record.es:408                                  conditions += field + " = '" + options.conditions[field] + "' " + " AND "

    0888: [1] 66 ......................... GetLocalSlot_5 
    0889: [2] 84 11 ...................... GetLocalSlot <slot: 17> 
    0891: [3] 5c f6 57 ................... LoadString < = '> 
    0894: [4] 00 ......................... Add 
    0895: [3] 62 ......................... GetLocalSlot_1 
    0896: [4] 80 b1 66 c4 0a ............. GetObjName <conditions> <> 
    0901: [4] 84 11 ...................... GetLocalSlot <slot: 17> 
    0903: [5] 81 ......................... GetObjNameExpr 
    0904: [4] 00 ......................... Add 
    0905: [3] 5c c2 7e ................... LoadString <' > 
    0908: [4] 00 ......................... Add 
    0909: [3] 5c de 76 ................... LoadString < AND > 
    0912: [4] 00 ......................... Add 
    0913: [3] 00 ......................... Add 
    0914: [2] 9f ......................... PutLocalSlot_5 
    0915: [1] 40 d5 ...................... Goto.8 <addr: 874> 
    0917: [1] 96 ......................... Pop 
    0918: [0] 40 00 ...................... Goto.8 <addr: 920> 

    # db/Record.es:410                          }
    # db/Record.es:411                          conditions = conditions.trim(" AND ")

    0934: [0] 66 ......................... GetLocalSlot_5 
    0935: [1] 5c de 76 ................... LoadString < AND > 
    0938: [2] 17 26 01 ................... CallObjSlot <slot: 38> <argc: 1> 
    0941: [0] 99 ......................... PushResult 
    0942: [1] 9f ......................... PutLocalSlot_5 
    0943: [0] 40 17 ...................... Goto.8 <addr: 968> 

    # db/Record.es:413                      } else {
    # db/Record.es:414                          from = from.trim(" AND ")

    0959: [0] 65 ......................... GetLocalSlot_4 
    0960: [1] 5c de 76 ................... LoadString < AND > 
    0963: [2] 17 26 01 ................... CallObjSlot <slot: 38> <argc: 1> 
    0966: [0] 99 ......................... PushResult 
    0967: [1] 9e ......................... PutLocalSlot_4 

    # db/Record.es:417                      if (key || options.key) {

    0975: [0] 61 ......................... GetLocalSlot_0 
    0976: [1] 22 ......................... CastBoolean 
    0977: [1] 3b ......................... Dup 
    0978: [2] 13 08 ...................... BranchTrue.8 <addr: 988> 
    0980: [1] 96 ......................... Pop 
    0981: [0] 62 ......................... GetLocalSlot_1 
    0982: [1] 80 ab 63 c4 0a ............. GetObjName <key> <> 
    0987: [1] 22 ......................... CastBoolean 
    0988: [1] 12 69 ...................... BranchFalse.8 <addr: 1095> 

    # db/Record.es:418                          if (!where) {

    0997: [0] 67 ......................... GetLocalSlot_6 
    0998: [1] 8b ......................... LogicalNot 
    0999: [1] 12 19 ...................... BranchFalse.8 <addr: 1026> 

    # db/Record.es:419                              conditions += " WHERE "

    1008: [0] 66 ......................... GetLocalSlot_5 
    1009: [1] 5c bc 58 ................... LoadString < WHERE > 
    1012: [2] 00 ......................... Add 
    1013: [1] 9f ......................... PutLocalSlot_5 

    # db/Record.es:420                              where = true

    1022: [0] 5e ......................... LoadTrue 
    1023: [1] a0 ......................... PutLocalSlot_6 
    1024: [0] 40 15 ...................... Goto.8 <addr: 1047> 

    # db/Record.es:421                          } else {
    # db/Record.es:422                              conditions += " AND "

    1041: [0] 66 ......................... GetLocalSlot_5 
    1042: [1] 5c de 76 ................... LoadString < AND > 
    1045: [2] 00 ......................... Add 
    1046: [1] 9f ......................... PutLocalSlot_5 

    # db/Record.es:423                          }
    # db/Record.es:424                          conditions += (_tableName + "." + _keyName + " = ") + ((key) ? key : options.key)

    1062: [0] 66 ......................... GetLocalSlot_5 
    1063: [1] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    1066: [2] 5c d4 69 ................... LoadString <.> 
    1069: [3] 00 ......................... Add 
    1070: [2] 88 0d 01 ................... GetThisTypeSlot <slot: 13> <1> 
    1073: [3] 00 ......................... Add 
    1074: [2] 5c c4 58 ................... LoadString < = > 
    1077: [3] 00 ......................... Add 
    1078: [2] 61 ......................... GetLocalSlot_0 
    1079: [3] 12 03 ...................... BranchFalse.8 <addr: 1084> 
    1081: [2] 61 ......................... GetLocalSlot_0 
    1082: [3] 40 06 ...................... Goto.8 <addr: 1090> 
    1084: [3] 62 ......................... GetLocalSlot_1 
    1085: [4] 80 ab 63 c4 0a ............. GetObjName <key> <> 
    1090: [4] 00 ......................... Add 
    1091: [3] 00 ......................... Add 
    1092: [2] 9f ......................... PutLocalSlot_5 
    1093: [1] 40 00 ...................... Goto.8 <addr: 1095> 

    # db/Record.es:425                      }
    # db/Record.es:427                      cmd = "SELECT " + columns + " FROM " + from + conditions

    1110: [1] 5c 87 82 01 ................ LoadString <SELECT > 
    1114: [2] 64 ......................... GetLocalSlot_3 
    1115: [3] 00 ......................... Add 
    1116: [2] 5c 96 3a ................... LoadString < FROM > 
    1119: [3] 00 ......................... Add 
    1120: [2] 65 ......................... GetLocalSlot_4 
    1121: [3] 00 ......................... Add 
    1122: [2] 66 ......................... GetLocalSlot_5 
    1123: [3] 00 ......................... Add 
    1124: [2] 9c ......................... PutLocalSlot_2 

    # db/Record.es:428                      if (options.group) {

    1133: [1] 62 ......................... GetLocalSlot_1 
    1134: [2] 80 b0 82 01 c4 0a .......... GetObjName <group> <> 
    1140: [2] 12 19 ...................... BranchFalse.8 <addr: 1167> 

    # db/Record.es:429                          cmd += " GROUP BY " + options.group

    1150: [1] 63 ......................... GetLocalSlot_2 
    1151: [2] 5c ea 82 01 ................ LoadString < GROUP BY > 
    1155: [3] 62 ......................... GetLocalSlot_1 
    1156: [4] 80 b0 82 01 c4 0a .......... GetObjName <group> <> 
    1162: [4] 00 ......................... Add 
    1163: [3] 00 ......................... Add 
    1164: [2] 9c ......................... PutLocalSlot_2 
    1165: [1] 40 00 ...................... Goto.8 <addr: 1167> 

    # db/Record.es:431                      if (options.order) {

    1175: [1] 62 ......................... GetLocalSlot_1 
    1176: [2] 80 96 83 01 c4 0a .......... GetObjName <order> <> 
    1182: [2] 12 19 ...................... BranchFalse.8 <addr: 1209> 

    # db/Record.es:432                          cmd += " ORDER BY " + options.order

    1192: [1] 63 ......................... GetLocalSlot_2 
    1193: [2] 5c d0 83 01 ................ LoadString < ORDER BY > 
    1197: [3] 62 ......................... GetLocalSlot_1 
    1198: [4] 80 96 83 01 c4 0a .......... GetObjName <order> <> 
    1204: [4] 00 ......................... Add 
    1205: [3] 00 ......................... Add 
    1206: [2] 9c ......................... PutLocalSlot_2 
    1207: [1] 40 00 ...................... Goto.8 <addr: 1209> 

    # db/Record.es:434                      if (options.limit) {

    1217: [1] 62 ......................... GetLocalSlot_1 
    1218: [2] 80 fc 83 01 c4 0a .......... GetObjName <limit> <> 
    1224: [2] 12 19 ...................... BranchFalse.8 <addr: 1251> 

    # db/Record.es:435                          cmd += " LIMIT " + options.limit

    1234: [1] 63 ......................... GetLocalSlot_2 
    1235: [2] 5c b3 84 01 ................ LoadString < LIMIT > 
    1239: [3] 62 ......................... GetLocalSlot_1 
    1240: [4] 80 fc 83 01 c4 0a .......... GetObjName <limit> <> 
    1246: [4] 00 ......................... Add 
    1247: [3] 00 ......................... Add 
    1248: [2] 9c ......................... PutLocalSlot_2 
    1249: [1] 40 00 ...................... Goto.8 <addr: 1251> 

    # db/Record.es:437                      if (options.offset) {

    1259: [1] 62 ......................... GetLocalSlot_1 
    1260: [2] 80 dd 84 01 c4 0a .......... GetObjName <offset> <> 
    1266: [2] 12 19 ...................... BranchFalse.8 <addr: 1293> 

    # db/Record.es:438                          cmd += " OFFSET " + options.offset

    1276: [1] 63 ......................... GetLocalSlot_2 
    1277: [2] 5c 97 85 01 ................ LoadString < OFFSET > 
    1281: [3] 62 ......................... GetLocalSlot_1 
    1282: [4] 80 dd 84 01 c4 0a .......... GetObjName <offset> <> 
    1288: [4] 00 ......................... Add 
    1289: [3] 00 ......................... Add 
    1290: [2] 9c ......................... PutLocalSlot_2 
    1291: [1] 40 00 ...................... Goto.8 <addr: 1293> 

    # db/Record.es:439                      }
    # db/Record.es:441                      cmd += ";"

    1308: [1] 63 ......................... GetLocalSlot_2 
    1309: [2] 5c 88 1c ................... LoadString <;> 
    1312: [3] 00 ......................... Add 
    1313: [2] 9c ......................... PutLocalSlot_2 

    # db/Record.es:442                      log("find", cmd)

    1322: [1] 5c a6 63 ................... LoadString <find> 
    1325: [2] 63 ......................... GetLocalSlot_2 
    1326: [3] 1c 2e 00 02 ................ CallThisStaticSlot <slot: 46> <0> <argc: 2> 

    # db/Record.es:444                      let db = getDb()

    1338: [1] 1c 23 00 00 ................ CallThisStaticSlot <slot: 35> <0> <argc: 0> 
    1342: [1] 99 ......................... PushResult 
    1343: [2] a1 ......................... PutLocalSlot_7 

    # db/Record.es:445                      if (db == null) {

    1352: [1] 68 ......................... GetLocalSlot_7 
    1353: [2] 5a ......................... LoadNull 
    1354: [3] 25 ......................... CompareEQ 
    1355: [2] 12 14 ...................... BranchFalse.8 <addr: 1377> 

    # db/Record.es:446                          throw new Error("Database connection has not yet been established")

    1365: [1] 83 0f ...................... GetGlobalSlot <15> 
    1367: [2] 8e ......................... New 
    1368: [2] 5c e3 86 01 ................ LoadString <Database connection has not yet been established> 
    1372: [3] 1f 01 ...................... CallConstructor <argc: 1> 
    1374: [2] cc ......................... Throw 
    1375: [2] 40 00 ...................... Goto.8 <addr: 1377> 

    # db/Record.es:447                      }
    # db/Record.es:449                      let results: Array
    # db/Record.es:450                      try {
    # db/Record.es:451                          results = db.query(cmd)

    1408: [2] 68 ......................... GetLocalSlot_7 
    1409: [3] 63 ......................... GetLocalSlot_2 
    1410: [4] 1d c5 05 00 01 ............. CallObjName <query> <> <argc: 1> 
    1415: [2] 99 ......................... PushResult 
    1416: [3] a2 ......................... PutLocalSlot_8 
    1417: [2] 40 17 ...................... Goto.8 <addr: 1442> 

    # db/Record.es:453                      catch (e) {

    1427: [2] 98 ......................... PushCatchArg 
    1428: [3] be 13 ...................... PutLocalSlot <slot: 19> 

    # db/Record.es:454                          throw e

    1438: [2] 84 13 ...................... GetLocalSlot <slot: 19> 
    1440: [3] cc ......................... Throw 
    1441: [3] 3e ......................... EndException 

    # db/Record.es:482                      return results

    1450: [3] 69 ......................... GetLocalSlot_8 
    1451: [4] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    399     402        427          427       StopIteration
1   iteration    443     446        548          548       StopIteration
2   iteration    782     785        810          810       StopIteration
3   iteration    875     878        917          917       StopIteration
4   catch       1392    1419       1419         1442       Void

VARIABLE:   [innerFind-00]  private var key : Object

VARIABLE:   [innerFind-01]  private var options : Object

VARIABLE:   [innerFind-02]  private var cmd : String

VARIABLE:   [innerFind-03]  private var columns : Array

VARIABLE:   [innerFind-04]  private var from : String

VARIABLE:   [innerFind-05]  private var conditions : String

VARIABLE:   [innerFind-06]  private var where : String

VARIABLE:   [innerFind-07]  private var db

VARIABLE:   [innerFind-08]  private var results : Array

VARIABLE:   [innerFind-09]  -hoisted-9 var index : Number

VARIABLE:   [innerFind-11]  -hoisted-11 var owner

VARIABLE:   [innerFind-12]  -hoisted-12 var owner

VARIABLE:   [innerFind-13]  -hoisted-13 var tname

VARIABLE:   [innerFind-14]  -hoisted-14 var parts : Array

VARIABLE:   [innerFind-16]  -hoisted-16 var cond

VARIABLE:   [innerFind-17]  -hoisted-17 var field

VARIABLE:   [innerFind-19]  -hoisted-19 var e

FUNCTION:   [Record-35]  public static function getDb() : Database



    # db/Record.es:491                      if (_db == null) {

    0008: [0] 88 0b 01 ................... GetThisTypeSlot <slot: 11> <1> 
    0011: [1] 5a ......................... LoadNull 
    0012: [2] 25 ......................... CompareEQ 
    0013: [1] 12 12 ...................... BranchFalse.8 <addr: 33> 

    # db/Record.es:492                          return Database.defaultDatabase

    0023: [0] 52 ......................... LoadGlobal 
    0024: [1] 80 46 1d ................... GetObjName <Database> <ejs.db> 
    0027: [1] 87 11 00 ................... GetTypeSlot <slot: 17> <0> 
    0030: [1] c5 ......................... ReturnValue 
    0031: [0] 40 13 ...................... Goto.8 <addr: 52> 

    # db/Record.es:493                      } else {
    # db/Record.es:494                          return _db

    0048: [0] 88 0b 01 ................... GetThisTypeSlot <slot: 11> <1> 
    0051: [1] c5 ......................... ReturnValue 
    0052: [0] 5a ......................... LoadNull 
    0053: [1] c5 ......................... ReturnValue 

    # db/Record.es:496                  }
    

FUNCTION:   [Record-36]  public get function columnNames() : Array

   LOCAL:   [local-00] var result : Array
   LOCAL:   [local-01] var name


    # db/Record.es:505                      if (_columnNames == null) {

    0007: [0] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0010: [1] 5a ......................... LoadNull 
    0011: [2] 25 ......................... CompareEQ 
    0012: [1] 12 0d ...................... BranchFalse.8 <addr: 27> 

    # db/Record.es:506                          getSchema()

    0021: [0] 1c 28 00 00 ................ CallThisStaticSlot <slot: 40> <0> <argc: 0> 
    0025: [0] 40 00 ...................... Goto.8 <addr: 27> 

    # db/Record.es:507                      }
    # db/Record.es:508                      let result: Array = []

    0042: [0] 83 07 ...................... GetGlobalSlot <7> 
    0044: [1] 8e ......................... New 
    0045: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:509                      for (name in _columnNames) {

    0054: [0] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0057: [1] 17 01 00 ................... CallObjSlot <slot: 1> <argc: 0> 
    0060: [0] 99 ......................... PushResult 
    0061: [1] 3b ......................... Dup 
    0062: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0065: [1] 99 ......................... PushResult 
    0066: [2] 9b ......................... PutLocalSlot_1 

    # db/Record.es:510                          result.append(name)

    0075: [1] 61 ......................... GetLocalSlot_0 
    0076: [2] 62 ......................... GetLocalSlot_1 
    0077: [3] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0080: [1] 40 eb ...................... Goto.8 <addr: 61> 
    0082: [1] 96 ......................... Pop 

    # db/Record.es:512                      return result

    0091: [0] 61 ......................... GetLocalSlot_0 
    0092: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     62      65         82           82       StopIteration

VARIABLE:   [columnNames-00]  private var result : Array

VARIABLE:   [columnNames-01]  -hoisted-1 var name

FUNCTION:   [Record-37]  public get function columnTitles() : Array

   LOCAL:   [local-00] var result : Array
   LOCAL:   [local-01] var title


    # db/Record.es:522                      if (_columnNames == null) {

    0007: [0] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0010: [1] 5a ......................... LoadNull 
    0011: [2] 25 ......................... CompareEQ 
    0012: [1] 12 0d ...................... BranchFalse.8 <addr: 27> 

    # db/Record.es:523                          getSchema()

    0021: [0] 1c 28 00 00 ................ CallThisStaticSlot <slot: 40> <0> <argc: 0> 
    0025: [0] 40 00 ...................... Goto.8 <addr: 27> 

    # db/Record.es:524                      }
    # db/Record.es:525                      let result: Array = []

    0042: [0] 83 07 ...................... GetGlobalSlot <7> 
    0044: [1] 8e ......................... New 
    0045: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:526                      for each (title in _columnNames) {

    0054: [0] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0057: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0060: [0] 99 ......................... PushResult 
    0061: [1] 3b ......................... Dup 
    0062: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0065: [1] 99 ......................... PushResult 
    0066: [2] 9b ......................... PutLocalSlot_1 

    # db/Record.es:527                          result.append(title)

    0075: [1] 61 ......................... GetLocalSlot_0 
    0076: [2] 62 ......................... GetLocalSlot_1 
    0077: [3] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0080: [1] 40 eb ...................... Goto.8 <addr: 61> 
    0082: [1] 96 ......................... Pop 

    # db/Record.es:529                      return result

    0091: [0] 61 ......................... GetLocalSlot_0 
    0092: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     62      65         82           82       StopIteration

VARIABLE:   [columnTitles-00]  private var result : Array

VARIABLE:   [columnTitles-01]  -hoisted-1 var title

FUNCTION:   [Record-38]  public static function getKeyName() : String



    # db/Record.es:537                      return _keyName

    0008: [0] 88 0d 01 ................... GetThisTypeSlot <slot: 13> <1> 
    0011: [1] c5 ......................... ReturnValue 
    

FUNCTION:   [Record-39]  public static function getNumRows() : Number

   LOCAL:   [local-00] var cmd : String
   LOCAL:   [local-01] var grid : Array


    # db/Record.es:546                      let cmd: String = "SELECT COUNT(*) FROM " + _tableName + " WHERE " + _keyName + " <> '';"

    0008: [0] 5c c5 8e 01 ................ LoadString <SELECT COUNT(*) FROM > 
    0012: [1] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0015: [2] 00 ......................... Add 
    0016: [1] 5c bc 58 ................... LoadString < WHERE > 
    0019: [2] 00 ......................... Add 
    0020: [1] 88 0d 01 ................... GetThisTypeSlot <slot: 13> <1> 
    0023: [2] 00 ......................... Add 
    0024: [1] 5c db 8e 01 ................ LoadString < <> '';> 
    0028: [2] 00 ......................... Add 
    0029: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:547                      log("getNumRows", cmd)

    0038: [0] 5c 86 8f 01 ................ LoadString <getNumRows> 
    0042: [1] 61 ......................... GetLocalSlot_0 
    0043: [2] 1c 2e 00 02 ................ CallThisStaticSlot <slot: 46> <0> <argc: 2> 

    # db/Record.es:548                      let grid: Array = getDb().query(cmd)

    0055: [0] 1c 23 00 00 ................ CallThisStaticSlot <slot: 35> <0> <argc: 0> 
    0059: [0] 99 ......................... PushResult 
    0060: [1] 61 ......................... GetLocalSlot_0 
    0061: [2] 1d c5 05 c4 0a 01 .......... CallObjName <query> <> <argc: 1> 
    0067: [0] 99 ......................... PushResult 
    0068: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:549                      return grid[0]["COUNT(*)"]

    0077: [0] 62 ......................... GetLocalSlot_1 
    0078: [1] 46 ......................... Load0 
    0079: [2] 81 ......................... GetObjNameExpr 
    0080: [1] 5c e9 8f 01 ................ LoadString <COUNT(*)> 
    0084: [2] 81 ......................... GetObjNameExpr 
    0085: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [getNumRows-00]  private var cmd : String

VARIABLE:   [getNumRows-01]  private var grid : Array

FUNCTION:   [Record-40]  [ejs.db::Record,private] static function getSchema() : Void

   LOCAL:   [local-00] var sql : String
   LOCAL:   [local-01] var grid : Array
   LOCAL:   [local-02] var row
   LOCAL:   [local-03] var name : String


    # db/Record.es:557                      if (_className == null) {

    0008: [0] 88 07 01 ................... GetThisTypeSlot <slot: 7> <1> 
    0011: [1] 5a ......................... LoadNull 
    0012: [2] 25 ......................... CompareEQ 
    0013: [1] 12 14 ...................... BranchFalse.8 <addr: 35> 

    # db/Record.es:558                          throw new Error("Model is not initialized. Must call Model.setup() first")

    0023: [0] 83 0f ...................... GetGlobalSlot <15> 
    0025: [1] 8e ......................... New 
    0026: [1] 5c a7 91 01 ................ LoadString <Model is not initialized. Must call Model.setup() first> 
    0030: [2] 1f 01 ...................... CallConstructor <argc: 1> 
    0032: [1] cc ......................... Throw 
    0033: [1] 40 00 ...................... Goto.8 <addr: 35> 

    # db/Record.es:560                      if (getDb() == undefined) {

    0043: [1] 1c 23 00 00 ................ CallThisStaticSlot <slot: 35> <0> <argc: 0> 
    0047: [1] 99 ......................... PushResult 
    0048: [2] 83 3a ...................... GetGlobalSlot <58> 
    0050: [3] 25 ......................... CompareEQ 
    0051: [2] 12 14 ...................... BranchFalse.8 <addr: 73> 

    # db/Record.es:561                          throw new Error("Can't get schema, database connection has not yet been established")

    0061: [1] 83 0f ...................... GetGlobalSlot <15> 
    0063: [2] 8e ......................... New 
    0064: [2] 5c ed 92 01 ................ LoadString <Can't get schema, database connection has not yet been established> 
    0068: [3] 1f 01 ...................... CallConstructor <argc: 1> 
    0070: [2] cc ......................... Throw 
    0071: [2] 40 00 ...................... Goto.8 <addr: 73> 

    # db/Record.es:562                      }
    # db/Record.es:564                      let sql: String = 'PRAGMA table_info("' + _tableName + '");'

    0088: [2] 5c d7 0b ................... LoadString <PRAGMA table_info("> 
    0091: [3] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0094: [4] 00 ......................... Add 
    0095: [3] 5c eb 0b ................... LoadString <");> 
    0098: [4] 00 ......................... Add 
    0099: [3] 9a ......................... PutLocalSlot_0 

    # db/Record.es:565                      log("schema", sql)

    0108: [2] 5c bd 32 ................... LoadString <schema> 
    0111: [3] 61 ......................... GetLocalSlot_0 
    0112: [4] 1c 2e 00 02 ................ CallThisStaticSlot <slot: 46> <0> <argc: 2> 

    # db/Record.es:567                      let grid: Array = getDb().query(sql)

    0124: [2] 1c 23 00 00 ................ CallThisStaticSlot <slot: 35> <0> <argc: 0> 
    0128: [2] 99 ......................... PushResult 
    0129: [3] 61 ......................... GetLocalSlot_0 
    0130: [4] 1d c5 05 c4 0a 01 .......... CallObjName <query> <> <argc: 1> 
    0136: [2] 99 ......................... PushResult 
    0137: [3] 9b ......................... PutLocalSlot_1 

    # db/Record.es:568                      _columnNames = {}

    0146: [2] 90 02 00 ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 0> 
    0149: [3] c2 08 01 ................... PutThisTypeSlot <slot: 8> <1> 

    # db/Record.es:569                      _columnTypes = {}

    0160: [2] 90 02 00 ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 0> 
    0163: [3] c2 09 01 ................... PutThisTypeSlot <slot: 9> <1> 

    # db/Record.es:570                      _sqlColumnTypes = {}

    0174: [2] 90 02 00 ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 0> 
    0177: [3] c2 0a 01 ................... PutThisTypeSlot <slot: 10> <1> 

    # db/Record.es:571                      for each (let row in grid) {

    0187: [2] 62 ......................... GetLocalSlot_1 
    0188: [3] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0191: [2] 99 ......................... PushResult 
    0192: [3] 3b ......................... Dup 
    0193: [4] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0196: [3] 99 ......................... PushResult 
    0197: [4] 9c ......................... PutLocalSlot_2 

    # db/Record.es:572                          let name: String = row["name"]

    0205: [3] 63 ......................... GetLocalSlot_2 
    0206: [4] 5c c2 06 ................... LoadString <name> 
    0209: [5] 81 ......................... GetObjNameExpr 
    0210: [4] 9d ......................... PutLocalSlot_3 

    # db/Record.es:573                          _columnNames[name] = name.toPascal()

    0219: [3] 64 ......................... GetLocalSlot_3 
    0220: [4] 17 17 00 ................... CallObjSlot <slot: 23> <argc: 0> 
    0223: [3] 99 ......................... PushResult 
    0224: [4] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0227: [5] 64 ......................... GetLocalSlot_3 
    0228: [6] b8 ......................... PutObjNameExpr 

    # db/Record.es:574                          _sqlColumnTypes[name] = row.type.toLower()

    0237: [3] 63 ......................... GetLocalSlot_2 
    0238: [4] 80 ac 33 00 ................ GetObjName <type> <> 
    0242: [4] 1d d5 75 00 00 ............. CallObjName <toLower> <> <argc: 0> 
    0247: [3] 99 ......................... PushResult 
    0248: [4] 88 0a 01 ................... GetThisTypeSlot <slot: 10> <1> 
    0251: [5] 64 ......................... GetLocalSlot_3 
    0252: [6] b8 ......................... PutObjNameExpr 

    # db/Record.es:575                          _columnTypes[name] = mapSqlTypeToEjs(row.type.toLower())

    0261: [3] 63 ......................... GetLocalSlot_2 
    0262: [4] 80 ac 33 00 ................ GetObjName <type> <> 
    0266: [4] 1d d5 75 00 00 ............. CallObjName <toLower> <> <argc: 0> 
    0271: [3] 99 ......................... PushResult 
    0272: [4] 1c 30 00 01 ................ CallThisStaticSlot <slot: 48> <0> <argc: 1> 
    0276: [3] 99 ......................... PushResult 
    0277: [4] 88 09 01 ................... GetThisTypeSlot <slot: 9> <1> 
    0280: [5] 64 ......................... GetLocalSlot_3 
    0281: [6] b8 ......................... PutObjNameExpr 
    0282: [3] 40 a4 ...................... Goto.8 <addr: 192> 
    0284: [3] 96 ......................... Pop 
    0285: [2] c4 ......................... Return 

    # db/Record.es:578                  }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    193     196        284          284       StopIteration

VARIABLE:   [getSchema-00]  private var sql : String

VARIABLE:   [getSchema-01]  private var grid : Array

VARIABLE:   [getSchema-02]  -hoisted-2 var row

VARIABLE:   [getSchema-03]  -hoisted-3 var name : String

FUNCTION:   [Record-41]  public static function getTableName() : String



    # db/Record.es:586                      return _tableName

    0008: [0] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0011: [1] c5 ......................... ReturnValue 
    

FUNCTION:   [Record-42]  public static function hasMany(model: Object, options: Object) : Void

     ARG:   [arg-00]   private model : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:602                      if (_hasMany == undefined) {

    0014: [0] 7f bd 98 01 c4 0a .......... GetScopedName <_hasMany> <> 
    0020: [1] 83 3a ...................... GetGlobalSlot <58> 
    0022: [2] 25 ......................... CompareEQ 
    0023: [1] 12 18 ...................... BranchFalse.8 <addr: 49> 

    # db/Record.es:603                          _hasMany = [model]

    0033: [0] 83 07 ...................... GetGlobalSlot <7> 
    0035: [1] 8e ......................... New 
    0036: [1] 3b ......................... Dup 
    0037: [2] 61 ......................... GetLocalSlot_0 
    0038: [3] cb ......................... Swap 
    0039: [3] 46 ......................... Load0 
    0040: [4] b8 ......................... PutObjNameExpr 
    0041: [1] bb bd 98 01 c4 0a .......... PutScopedName <_hasMany> <> 
    0047: [0] 40 1b ...................... Goto.8 <addr: 76> 

    # db/Record.es:604                      } else {
    # db/Record.es:605                          _hasMany.append(model)

    0064: [0] 7f bd 98 01 c4 0a .......... GetScopedName <_hasMany> <> 
    0070: [1] 61 ......................... GetLocalSlot_0 
    0071: [2] 1d a0 0d 00 01 ............. CallObjName <append> <> <argc: 1> 
    0076: [0] c4 ......................... Return 

    # db/Record.es:607                  }
    

VARIABLE:   [hasMany-00]  private var model : Object

VARIABLE:   [hasMany-01]  private var options : Object

FUNCTION:   [Record-43]  public static function hasAndBelongsToMany(thing: Object, options: Object) : Void

     ARG:   [arg-00]   private thing : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:620                      belongs(thing, options)

    0014: [0] 61 ......................... GetLocalSlot_0 
    0015: [1] 62 ......................... GetLocalSlot_1 
    0016: [2] 1e 9d 9a 01 c4 0a 02 ....... CallScopedName <belongs> <> <argc: 2> 

    # db/Record.es:621                      hasMany(thing, options)

    0031: [0] 61 ......................... GetLocalSlot_0 
    0032: [1] 62 ......................... GetLocalSlot_1 
    0033: [2] 1c 2a 00 02 ................ CallThisStaticSlot <slot: 42> <0> <argc: 2> 
    0037: [0] c4 ......................... Return 

    # db/Record.es:622                  }
    

VARIABLE:   [hasAndBelongsToMany-00]  private var thing : Object

VARIABLE:   [hasAndBelongsToMany-01]  private var options : Object

FUNCTION:   [Record-44]  public static function hasOne(model: Object, options: Object) : Void

     ARG:   [arg-00]   private model : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:637                      if (_hasOne == undefined) {

    0014: [0] 7f d9 9b 01 c4 0a .......... GetScopedName <_hasOne> <> 
    0020: [1] 83 3a ...................... GetGlobalSlot <58> 
    0022: [2] 25 ......................... CompareEQ 
    0023: [1] 12 18 ...................... BranchFalse.8 <addr: 49> 

    # db/Record.es:638                          _hasOne = [model]

    0033: [0] 83 07 ...................... GetGlobalSlot <7> 
    0035: [1] 8e ......................... New 
    0036: [1] 3b ......................... Dup 
    0037: [2] 61 ......................... GetLocalSlot_0 
    0038: [3] cb ......................... Swap 
    0039: [3] 46 ......................... Load0 
    0040: [4] b8 ......................... PutObjNameExpr 
    0041: [1] bb d9 9b 01 c4 0a .......... PutScopedName <_hasOne> <> 
    0047: [0] 40 1b ...................... Goto.8 <addr: 76> 

    # db/Record.es:639                      } else {
    # db/Record.es:640                          _hasOne.append(model)

    0064: [0] 7f d9 9b 01 c4 0a .......... GetScopedName <_hasOne> <> 
    0070: [1] 61 ......................... GetLocalSlot_0 
    0071: [2] 1d a0 0d 00 01 ............. CallObjName <append> <> <argc: 1> 
    0076: [0] c4 ......................... Return 

    # db/Record.es:642                  }
    

VARIABLE:   [hasOne-00]  private var model : Object

VARIABLE:   [hasOne-01]  private var options : Object

FUNCTION:   [Record-45]  [ejs.db::Record,private] static function loadReference(model, key: String, hasMany: Boolean) : Object

     ARG:   [arg-00]   private model
     ARG:   [arg-01]   private key : String
     ARG:   [arg-02]   private hasMany : Boolean
   LOCAL:   [local-03] var data : Array
   LOCAL:   [local-04] var result : Array
   LOCAL:   [local-05] var item

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 51 ......................... LoadFalse 
    0005: [1] 9c ......................... PutLocalSlot_2 

    # db/Record.es:646                      let data: Array = model.innerFind(key)

    0014: [0] 61 ......................... GetLocalSlot_0 
    0015: [1] 62 ......................... GetLocalSlot_1 
    0016: [2] 1d ce 88 01 00 01 .......... CallObjName <innerFind> <> <argc: 1> 
    0022: [0] 99 ......................... PushResult 
    0023: [1] 9d ......................... PutLocalSlot_3 

    # db/Record.es:647                      if (hasMany) {

    0032: [0] 63 ......................... GetLocalSlot_2 
    0033: [1] 12 46 ...................... BranchFalse.8 <addr: 105> 

    # db/Record.es:648                          let result: Array = new Array

    0043: [0] 83 07 ...................... GetGlobalSlot <7> 
    0045: [1] 8e ......................... New 
    0046: [1] 1f 00 ...................... CallConstructor <argc: 0> 
    0048: [1] 9e ......................... PutLocalSlot_4 

    # db/Record.es:649                          for each (item in data) {

    0057: [0] 64 ......................... GetLocalSlot_3 
    0058: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0061: [0] 99 ......................... PushResult 
    0062: [1] 3b ......................... Dup 
    0063: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0066: [1] 99 ......................... PushResult 
    0067: [2] 9f ......................... PutLocalSlot_5 

    # db/Record.es:650                              result.append(model.createRecord(data[0]))

    0076: [1] 65 ......................... GetLocalSlot_4 
    0077: [2] 61 ......................... GetLocalSlot_0 
    0078: [3] 64 ......................... GetLocalSlot_3 
    0079: [4] 46 ......................... Load0 
    0080: [5] 81 ......................... GetObjNameExpr 
    0081: [4] 1d a6 61 00 01 ............. CallObjName <createRecord> <> <argc: 1> 
    0086: [2] 99 ......................... PushResult 
    0087: [3] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0090: [1] 40 e2 ...................... Goto.8 <addr: 62> 
    0092: [1] 96 ......................... Pop 

    # db/Record.es:652                          return result

    0101: [0] 65 ......................... GetLocalSlot_4 
    0102: [1] c5 ......................... ReturnValue 
    0103: [0] 40 2c ...................... Goto.8 <addr: 149> 

    # db/Record.es:654                      } else {
    # db/Record.es:655                          if (data.length > 0) {

    0120: [0] 64 ......................... GetLocalSlot_3 
    0121: [1] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0124: [1] 46 ......................... Load0 
    0125: [2] 29 ......................... CompareGT 
    0126: [1] 12 15 ...................... BranchFalse.8 <addr: 149> 

    # db/Record.es:656                              return model.createRecord(data[0])

    0136: [0] 61 ......................... GetLocalSlot_0 
    0137: [1] 64 ......................... GetLocalSlot_3 
    0138: [2] 46 ......................... Load0 
    0139: [3] 81 ......................... GetObjNameExpr 
    0140: [2] 1d a6 61 00 01 ............. CallObjName <createRecord> <> <argc: 1> 
    0145: [0] 99 ......................... PushResult 
    0146: [1] c5 ......................... ReturnValue 
    0147: [0] 40 00 ...................... Goto.8 <addr: 149> 

    # db/Record.es:659                      return null

    0156: [0] 5a ......................... LoadNull 
    0157: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     63      66         92           92       StopIteration

VARIABLE:   [loadReference-00]  private var model

VARIABLE:   [loadReference-01]  private var key : String

VARIABLE:   [loadReference-02]  private var hasMany : Boolean

VARIABLE:   [loadReference-03]  private var data : Array

VARIABLE:   [loadReference-04]  -hoisted-4 var result : Array

VARIABLE:   [loadReference-05]  -hoisted-5 var item

FUNCTION:   [Record-46]  [ejs.db::Record,private] static function log(where: String, cmd: String) : Void

     ARG:   [arg-00]   private where : String
     ARG:   [arg-01]   private cmd : String


    # db/Record.es:665                      if (_traceSql) {

    0007: [0] 88 0f 01 ................... GetThisTypeSlot <slot: 15> <1> 
    0010: [1] 12 15 ...................... BranchFalse.8 <addr: 33> 

    # db/Record.es:666                          print(where + " SQL: " + cmd)

    0020: [0] 61 ......................... GetLocalSlot_0 
    0021: [1] 5c 8d a1 01 ................ LoadString < SQL: > 
    0025: [2] 00 ......................... Add 
    0026: [1] 62 ......................... GetLocalSlot_1 
    0027: [2] 00 ......................... Add 
    0028: [1] 16 45 01 ................... CallGlobalSlot <slot: 69> <argc: 1> 
    0031: [0] 40 00 ...................... Goto.8 <addr: 33> 
    0033: [0] c4 ......................... Return 

    # db/Record.es:668                  }
    

VARIABLE:   [log-00]  private var where : String

VARIABLE:   [log-01]  private var cmd : String

FUNCTION:   [Record-47]  [ejs.db::Record,private] static function logResult(data: Object) : Void

     ARG:   [arg-00]   private data : Object


    # db/Record.es:673                      dump(data)

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] 16 40 01 ................... CallGlobalSlot <slot: 64> <argc: 1> 
    0012: [0] c4 ......................... Return 

    # db/Record.es:674                  }
    

VARIABLE:   [logResult-00]  private var data : Object

FUNCTION:   [Record-48]  [ejs.db::Record,private] static function mapSqlTypeToEjs(sqlType: String) : String

     ARG:   [arg-00]   private sqlType : String
   LOCAL:   [local-01] var ejsType : String


    # db/Record.es:678                      sqlType = sqlType.replace(/\(.*/, "")

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] 5b f2 a2 01 ................ LoadRegexp </\(.*/> 
    0013: [2] 5c c4 0a ................... LoadString <> 
    0016: [3] 17 1b 02 ................... CallObjSlot <slot: 27> <argc: 2> 
    0019: [0] 99 ......................... PushResult 
    0020: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:679                      let ejsType: String = Database.SqliteToEjs[sqlType]

    0029: [0] 52 ......................... LoadGlobal 
    0030: [1] 80 46 1d ................... GetObjName <Database> <ejs.db> 
    0033: [1] 87 15 00 ................... GetTypeSlot <slot: 21> <0> 
    0036: [1] 61 ......................... GetLocalSlot_0 
    0037: [2] 81 ......................... GetObjNameExpr 
    0038: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:680                      if (ejsType == undefined) {

    0047: [0] 62 ......................... GetLocalSlot_1 
    0048: [1] 83 3a ...................... GetGlobalSlot <58> 
    0050: [2] 25 ......................... CompareEQ 
    0051: [1] 12 1a ...................... BranchFalse.8 <addr: 79> 

    # db/Record.es:681                          throw new Error("Unsupported SQL type: \"" + sqlType + "\"")

    0061: [0] 83 0f ...................... GetGlobalSlot <15> 
    0063: [1] 8e ......................... New 
    0064: [1] 5c b6 a4 01 ................ LoadString <Unsupported SQL type: "> 
    0068: [2] 61 ......................... GetLocalSlot_0 
    0069: [3] 00 ......................... Add 
    0070: [2] 5c ab 49 ................... LoadString <"> 
    0073: [3] 00 ......................... Add 
    0074: [2] 1f 01 ...................... CallConstructor <argc: 1> 
    0076: [1] cc ......................... Throw 
    0077: [1] 40 00 ...................... Goto.8 <addr: 79> 

    # db/Record.es:683                      return ejsType

    0087: [1] 62 ......................... GetLocalSlot_1 
    0088: [2] c5 ......................... ReturnValue 
    

VARIABLE:   [mapSqlTypeToEjs-00]  private var sqlType : String

VARIABLE:   [mapSqlTypeToEjs-01]  private var ejsType : String

FUNCTION:   [Record-49]  public static function remove(keys: Array) : Void

     ARG:   [arg-00]   private keys : Array
   LOCAL:   [local-01] var key : Object
   LOCAL:   [local-02] var cmd : String


    # db/Record.es:693                      for each (let key: Object in keys) {

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0012: [0] 99 ......................... PushResult 
    0013: [1] 3b ......................... Dup 
    0014: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0017: [1] 99 ......................... PushResult 
    0018: [2] 9b ......................... PutLocalSlot_1 

    # db/Record.es:694                          let cmd: String = "DELETE FROM " + _tableName + " WHERE " + _keyName + " = " + key + ";"

    0027: [1] 5c cb a6 01 ................ LoadString <DELETE FROM > 
    0031: [2] 88 0e 01 ................... GetThisTypeSlot <slot: 14> <1> 
    0034: [3] 00 ......................... Add 
    0035: [2] 5c bc 58 ................... LoadString < WHERE > 
    0038: [3] 00 ......................... Add 
    0039: [2] 88 0d 01 ................... GetThisTypeSlot <slot: 13> <1> 
    0042: [3] 00 ......................... Add 
    0043: [2] 5c c4 58 ................... LoadString < = > 
    0046: [3] 00 ......................... Add 
    0047: [2] 62 ......................... GetLocalSlot_1 
    0048: [3] 00 ......................... Add 
    0049: [2] 5c 88 1c ................... LoadString <;> 
    0052: [3] 00 ......................... Add 
    0053: [2] 9c ......................... PutLocalSlot_2 

    # db/Record.es:695                          log("remove", cmd)

    0062: [1] 5c fb 31 ................... LoadString <remove> 
    0065: [2] 63 ......................... GetLocalSlot_2 
    0066: [3] 1c 2e 00 02 ................ CallThisStaticSlot <slot: 46> <0> <argc: 2> 

    # db/Record.es:696                          getDb().query(cmd)

    0078: [1] 1c 23 00 00 ................ CallThisStaticSlot <slot: 35> <0> <argc: 0> 
    0082: [1] 99 ......................... PushResult 
    0083: [2] 63 ......................... GetLocalSlot_2 
    0084: [3] 1d c5 05 c4 0a 01 .......... CallObjName <query> <> <argc: 1> 
    0090: [1] 40 b1 ...................... Goto.8 <addr: 13> 
    0092: [1] 96 ......................... Pop 
    0093: [0] c4 ......................... Return 

    # db/Record.es:698                  }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     14      17         92           92       StopIteration

VARIABLE:   [remove-00]  private var keys : Array

VARIABLE:   [remove-01]  -hoisted-1 var key : Object

VARIABLE:   [remove-02]  -hoisted-2 var cmd : String

FUNCTION:   [Record-50]  public static function setDb(dbase) : Void

     ARG:   [arg-00]   private dbase


    # db/Record.es:706                      _db = dbase

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] c2 0b 01 ................... PutThisTypeSlot <slot: 11> <1> 
    0012: [0] c4 ......................... Return 

    # db/Record.es:707                  }
    

VARIABLE:   [setDb-00]  private var dbase

FUNCTION:   [Record-51]  public static function setup(database) : Void

     ARG:   [arg-00]   private database

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:715                      _db = database

    0014: [0] 61 ......................... GetLocalSlot_0 
    0015: [1] c2 0b 01 ................... PutThisTypeSlot <slot: 11> <1> 

    # db/Record.es:716                      _className = Reflect(this).name

    0026: [0] 5d ......................... LoadThis 
    0027: [1] 16 1e 01 ................... CallGlobalSlot <slot: 30> <argc: 1> 
    0030: [0] 99 ......................... PushResult 
    0031: [1] 87 06 00 ................... GetTypeSlot <slot: 6> <0> 
    0034: [1] c2 07 01 ................... PutThisTypeSlot <slot: 7> <1> 

    # db/Record.es:717                      _tableName = pluralize(_className)

    0045: [0] 88 07 01 ................... GetThisTypeSlot <slot: 7> <1> 
    0048: [1] 1e b5 a9 01 1d 01 .......... CallScopedName <pluralize> <ejs.db> <argc: 1> 
    0054: [0] 99 ......................... PushResult 
    0055: [1] c2 0e 01 ................... PutThisTypeSlot <slot: 14> <1> 

    # db/Record.es:718                      _foreignId = _className.toCamel() + "Id"

    0066: [0] 88 07 01 ................... GetThisTypeSlot <slot: 7> <1> 
    0069: [1] 17 16 00 ................... CallObjSlot <slot: 22> <argc: 0> 
    0072: [0] 99 ......................... PushResult 
    0073: [1] 5c df 69 ................... LoadString <Id> 
    0076: [2] 00 ......................... Add 
    0077: [1] c2 0c 01 ................... PutThisTypeSlot <slot: 12> <1> 

    # db/Record.es:719                      _keyName = "id"

    0088: [0] 5c a9 34 ................... LoadString <id> 
    0091: [1] c2 0d 01 ................... PutThisTypeSlot <slot: 13> <1> 
    0094: [0] c4 ......................... Return 

    # db/Record.es:720                  }
    

VARIABLE:   [setup-00]  private var database

FUNCTION:   [Record-52]  public static function setTableName(name: String) : Void

     ARG:   [arg-00]   private name : String


    # db/Record.es:728                      _tableName = name

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] c2 0e 01 ................... PutThisTypeSlot <slot: 14> <1> 
    0012: [0] c4 ......................... Return 

    # db/Record.es:729                  }
    

VARIABLE:   [setTableName-00]  private var name : String

FUNCTION:   [Record-53]  public static function setKeyName(value: String) : Void

     ARG:   [arg-00]   private value : String


    # db/Record.es:736                      _keyName = value

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] c2 0d 01 ................... PutThisTypeSlot <slot: 13> <1> 
    0012: [0] c4 ......................... Return 

    # db/Record.es:737                  }
    

VARIABLE:   [setKeyName-00]  private var value : String

FUNCTION:   [Record-54]  public static function sql(cmd: String, count: Number) : Array

     ARG:   [arg-00]   private cmd : String
     ARG:   [arg-01]   private count : Number

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:746                      cmd = "SELECT " + cmd + ";"

    0014: [0] 5c 87 82 01 ................ LoadString <SELECT > 
    0018: [1] 61 ......................... GetLocalSlot_0 
    0019: [2] 00 ......................... Add 
    0020: [1] 5c 88 1c ................... LoadString <;> 
    0023: [2] 00 ......................... Add 
    0024: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:747                      log("select", cmd)

    0033: [0] 5c fc ac 01 ................ LoadString <select> 
    0037: [1] 61 ......................... GetLocalSlot_0 
    0038: [2] 1c 2e 00 02 ................ CallThisStaticSlot <slot: 46> <0> <argc: 2> 

    # db/Record.es:748                      return getDb().query(cmd)

    0050: [0] 1c 23 00 00 ................ CallThisStaticSlot <slot: 35> <0> <argc: 0> 
    0054: [0] 99 ......................... PushResult 
    0055: [1] 61 ......................... GetLocalSlot_0 
    0056: [2] 1d c5 05 c4 0a 01 .......... CallObjName <query> <> <argc: 1> 
    0062: [0] 99 ......................... PushResult 
    0063: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [sql-00]  private var cmd : String

VARIABLE:   [sql-01]  private var count : Number

FUNCTION:   [Record-55]  public static function trace(on: Boolean) : Void

     ARG:   [arg-00]   private on : Boolean


    # db/Record.es:757                      _traceSql = on

    0007: [0] 61 ......................... GetLocalSlot_0 
    0008: [1] c2 0f 01 ................... PutThisTypeSlot <slot: 15> <1> 
    0011: [0] c4 ......................... Return 

    # db/Record.es:758                  }
    

VARIABLE:   [trace-00]  private var on : Boolean

FUNCTION:   [Record-56]  public static function validateFormat(fields: Object, options: Object) : void

     ARG:   [arg-00]   private fields : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:762                      if (_validations == null) {

    0014: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0017: [1] 5a ......................... LoadNull 
    0018: [2] 25 ......................... CompareEQ 
    0019: [1] 12 10 ...................... BranchFalse.8 <addr: 37> 

    # db/Record.es:763                          _validations = []

    0029: [0] 83 07 ...................... GetGlobalSlot <7> 
    0031: [1] 8e ......................... New 
    0032: [1] c2 10 01 ................... PutThisTypeSlot <slot: 16> <1> 
    0035: [0] 40 00 ...................... Goto.8 <addr: 37> 

    # db/Record.es:764                      }
    # db/Record.es:765                      _validations.append([checkFormat, fields, options])

    0052: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0055: [1] 83 07 ...................... GetGlobalSlot <7> 
    0057: [2] 8e ......................... New 
    0058: [2] 3b ......................... Dup 
    0059: [3] 88 3d 01 ................... GetThisTypeSlot <slot: 61> <1> 
    0062: [4] cb ......................... Swap 
    0063: [4] 46 ......................... Load0 
    0064: [5] b8 ......................... PutObjNameExpr 
    0065: [2] 3b ......................... Dup 
    0066: [3] 61 ......................... GetLocalSlot_0 
    0067: [4] cb ......................... Swap 
    0068: [4] 47 ......................... Load1 
    0069: [5] b8 ......................... PutObjNameExpr 
    0070: [2] 3b ......................... Dup 
    0071: [3] 62 ......................... GetLocalSlot_1 
    0072: [4] cb ......................... Swap 
    0073: [4] 48 ......................... Load2 
    0074: [5] b8 ......................... PutObjNameExpr 
    0075: [2] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0078: [0] c4 ......................... Return 

    # db/Record.es:766                  }
    

VARIABLE:   [validateFormat-00]  private var fields : Object

VARIABLE:   [validateFormat-01]  private var options : Object

FUNCTION:   [Record-57]  public static function validateNumber(fields: Object, options: Object) : void

     ARG:   [arg-00]   private fields : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:770                      if (_validations == null) {

    0014: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0017: [1] 5a ......................... LoadNull 
    0018: [2] 25 ......................... CompareEQ 
    0019: [1] 12 10 ...................... BranchFalse.8 <addr: 37> 

    # db/Record.es:771                          _validations = []

    0029: [0] 83 07 ...................... GetGlobalSlot <7> 
    0031: [1] 8e ......................... New 
    0032: [1] c2 10 01 ................... PutThisTypeSlot <slot: 16> <1> 
    0035: [0] 40 00 ...................... Goto.8 <addr: 37> 

    # db/Record.es:772                      }
    # db/Record.es:773                      _validations.append([checkNumber, fields, options])

    0052: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0055: [1] 83 07 ...................... GetGlobalSlot <7> 
    0057: [2] 8e ......................... New 
    0058: [2] 3b ......................... Dup 
    0059: [3] 88 3e 01 ................... GetThisTypeSlot <slot: 62> <1> 
    0062: [4] cb ......................... Swap 
    0063: [4] 46 ......................... Load0 
    0064: [5] b8 ......................... PutObjNameExpr 
    0065: [2] 3b ......................... Dup 
    0066: [3] 61 ......................... GetLocalSlot_0 
    0067: [4] cb ......................... Swap 
    0068: [4] 47 ......................... Load1 
    0069: [5] b8 ......................... PutObjNameExpr 
    0070: [2] 3b ......................... Dup 
    0071: [3] 62 ......................... GetLocalSlot_1 
    0072: [4] cb ......................... Swap 
    0073: [4] 48 ......................... Load2 
    0074: [5] b8 ......................... PutObjNameExpr 
    0075: [2] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0078: [0] c4 ......................... Return 

    # db/Record.es:774                  }
    

VARIABLE:   [validateNumber-00]  private var fields : Object

VARIABLE:   [validateNumber-01]  private var options : Object

FUNCTION:   [Record-58]  public static function validatePresence(fields: Object, options: Object) : void

     ARG:   [arg-00]   private fields : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:778                      if (_validations == null) {

    0014: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0017: [1] 5a ......................... LoadNull 
    0018: [2] 25 ......................... CompareEQ 
    0019: [1] 12 10 ...................... BranchFalse.8 <addr: 37> 

    # db/Record.es:779                          _validations = []

    0029: [0] 83 07 ...................... GetGlobalSlot <7> 
    0031: [1] 8e ......................... New 
    0032: [1] c2 10 01 ................... PutThisTypeSlot <slot: 16> <1> 
    0035: [0] 40 00 ...................... Goto.8 <addr: 37> 

    # db/Record.es:780                      }
    # db/Record.es:781                      _validations.append([checkPresent, fields, options])

    0052: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0055: [1] 83 07 ...................... GetGlobalSlot <7> 
    0057: [2] 8e ......................... New 
    0058: [2] 3b ......................... Dup 
    0059: [3] 88 3f 01 ................... GetThisTypeSlot <slot: 63> <1> 
    0062: [4] cb ......................... Swap 
    0063: [4] 46 ......................... Load0 
    0064: [5] b8 ......................... PutObjNameExpr 
    0065: [2] 3b ......................... Dup 
    0066: [3] 61 ......................... GetLocalSlot_0 
    0067: [4] cb ......................... Swap 
    0068: [4] 47 ......................... Load1 
    0069: [5] b8 ......................... PutObjNameExpr 
    0070: [2] 3b ......................... Dup 
    0071: [3] 62 ......................... GetLocalSlot_1 
    0072: [4] cb ......................... Swap 
    0073: [4] 48 ......................... Load2 
    0074: [5] b8 ......................... PutObjNameExpr 
    0075: [2] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0078: [0] c4 ......................... Return 

    # db/Record.es:782                  }
    

VARIABLE:   [validatePresence-00]  private var fields : Object

VARIABLE:   [validatePresence-01]  private var options : Object

FUNCTION:   [Record-59]  public static function validateUnique(fields: Object, options: Object) : void

     ARG:   [arg-00]   private fields : Object
     ARG:   [arg-01]   private options : Object

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:786                      _validations.append([checkUnique, fields, options])

    0014: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0017: [1] 83 07 ...................... GetGlobalSlot <7> 
    0019: [2] 8e ......................... New 
    0020: [2] 3b ......................... Dup 
    0021: [3] 88 40 01 ................... GetThisTypeSlot <slot: 64> <1> 
    0024: [4] cb ......................... Swap 
    0025: [4] 46 ......................... Load0 
    0026: [5] b8 ......................... PutObjNameExpr 
    0027: [2] 3b ......................... Dup 
    0028: [3] 61 ......................... GetLocalSlot_0 
    0029: [4] cb ......................... Swap 
    0030: [4] 47 ......................... Load1 
    0031: [5] b8 ......................... PutObjNameExpr 
    0032: [2] 3b ......................... Dup 
    0033: [3] 62 ......................... GetLocalSlot_1 
    0034: [4] cb ......................... Swap 
    0035: [4] 48 ......................... Load2 
    0036: [5] b8 ......................... PutObjNameExpr 
    0037: [2] 17 06 01 ................... CallObjSlot <slot: 6> <argc: 1> 
    0040: [0] c4 ......................... Return 

    # db/Record.es:787                  }
    

VARIABLE:   [validateUnique-00]  private var fields : Object

VARIABLE:   [validateUnique-01]  private var options : Object

VARIABLE:   [Record-60]  public static var ErrorMessages

FUNCTION:   [Record-61]  [ejs.db::Record,private] static function checkFormat(thisObj: Object, field: String, value, options) : Void

     ARG:   [arg-00]   private thisObj : Object
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private value
     ARG:   [arg-03]   private options


    # db/Record.es:808                      if (! RegExp(options.format).test(value)) {

    0008: [0] 64 ......................... GetLocalSlot_3 
    0009: [1] 80 ff ba 01 00 ............. GetObjName <format> <> 
    0014: [1] 16 20 01 ................... CallGlobalSlot <slot: 32> <argc: 1> 
    0017: [0] 99 ......................... PushResult 
    0018: [1] 63 ......................... GetLocalSlot_2 
    0019: [2] 17 12 01 ................... CallObjSlot <slot: 18> <argc: 1> 
    0022: [0] 99 ......................... PushResult 
    0023: [1] 8b ......................... LogicalNot 
    0024: [1] 12 2a ...................... BranchFalse.8 <addr: 68> 

    # db/Record.es:809                          thisObj._errors[field] = options.message ? options.message : ErrorMessages.wrongFormat

    0034: [0] 64 ......................... GetLocalSlot_3 
    0035: [1] 80 ed bb 01 00 ............. GetObjName <message> <> 
    0040: [1] 12 08 ...................... BranchFalse.8 <addr: 50> 
    0042: [0] 64 ......................... GetLocalSlot_3 
    0043: [1] 80 ed bb 01 00 ............. GetObjName <message> <> 
    0048: [1] 40 08 ...................... Goto.8 <addr: 58> 
    0050: [1] 88 3c 01 ................... GetThisTypeSlot <slot: 60> <1> 
    0053: [2] 80 ca b9 01 00 ............. GetObjName <wrongFormat> <> 
    0058: [2] 61 ......................... GetLocalSlot_0 
    0059: [3] 80 f8 45 c4 0a ............. GetObjName <_errors> <> 
    0064: [3] 62 ......................... GetLocalSlot_1 
    0065: [4] b8 ......................... PutObjNameExpr 
    0066: [1] 40 00 ...................... Goto.8 <addr: 68> 
    0068: [1] c4 ......................... Return 

    # db/Record.es:811                  }
    

VARIABLE:   [checkFormat-00]  private var thisObj : Object

VARIABLE:   [checkFormat-01]  private var field : String

VARIABLE:   [checkFormat-02]  private var value

VARIABLE:   [checkFormat-03]  private var options

FUNCTION:   [Record-62]  [ejs.db::Record,private] static function checkNumber(thisObj: Object, field: String, value, options) : Void

     ARG:   [arg-00]   private thisObj : Object
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private value
     ARG:   [arg-03]   private options


    # db/Record.es:815                      if (! RegExp(/^[0-9]+$/).test(value)) {

    0008: [0] 5b a1 bd 01 ................ LoadRegexp </^[0-9]+$/> 
    0012: [1] 16 20 01 ................... CallGlobalSlot <slot: 32> <argc: 1> 
    0015: [0] 99 ......................... PushResult 
    0016: [1] 63 ......................... GetLocalSlot_2 
    0017: [2] 17 12 01 ................... CallObjSlot <slot: 18> <argc: 1> 
    0020: [0] 99 ......................... PushResult 
    0021: [1] 8b ......................... LogicalNot 
    0022: [1] 12 2a ...................... BranchFalse.8 <addr: 66> 

    # db/Record.es:816                          thisObj._errors[field] = options.message ? options.message : ErrorMessages.notNumber

    0032: [0] 64 ......................... GetLocalSlot_3 
    0033: [1] 80 ed bb 01 00 ............. GetObjName <message> <> 
    0038: [1] 12 08 ...................... BranchFalse.8 <addr: 48> 
    0040: [0] 64 ......................... GetLocalSlot_3 
    0041: [1] 80 ed bb 01 00 ............. GetObjName <message> <> 
    0046: [1] 40 08 ...................... Goto.8 <addr: 56> 
    0048: [1] 88 3c 01 ................... GetThisTypeSlot <slot: 60> <1> 
    0051: [2] 80 d9 b6 01 00 ............. GetObjName <notNumber> <> 
    0056: [2] 61 ......................... GetLocalSlot_0 
    0057: [3] 80 f8 45 c4 0a ............. GetObjName <_errors> <> 
    0062: [3] 62 ......................... GetLocalSlot_1 
    0063: [4] b8 ......................... PutObjNameExpr 
    0064: [1] 40 00 ...................... Goto.8 <addr: 66> 
    0066: [1] c4 ......................... Return 

    # db/Record.es:818                  }
    

VARIABLE:   [checkNumber-00]  private var thisObj : Object

VARIABLE:   [checkNumber-01]  private var field : String

VARIABLE:   [checkNumber-02]  private var value

VARIABLE:   [checkNumber-03]  private var options

FUNCTION:   [Record-63]  [ejs.db::Record,private] static function checkPresent(thisObj: Object, field: String, value, options) : Void

     ARG:   [arg-00]   private thisObj : Object
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private value
     ARG:   [arg-03]   private options


    # db/Record.es:822                      if (value == undefined) {

    0008: [0] 63 ......................... GetLocalSlot_2 
    0009: [1] 83 3a ...................... GetGlobalSlot <58> 
    0011: [2] 25 ......................... CompareEQ 
    0012: [1] 12 2a ...................... BranchFalse.8 <addr: 56> 

    # db/Record.es:823                          thisObj._errors[field] = options.message ? options.message : ErrorMessages.missing

    0022: [0] 64 ......................... GetLocalSlot_3 
    0023: [1] 80 ed bb 01 00 ............. GetObjName <message> <> 
    0028: [1] 12 08 ...................... BranchFalse.8 <addr: 38> 
    0030: [0] 64 ......................... GetLocalSlot_3 
    0031: [1] 80 ed bb 01 00 ............. GetObjName <message> <> 
    0036: [1] 40 08 ...................... Goto.8 <addr: 46> 
    0038: [1] 88 3c 01 ................... GetThisTypeSlot <slot: 60> <1> 
    0041: [2] 80 9c b6 01 00 ............. GetObjName <missing> <> 
    0046: [2] 61 ......................... GetLocalSlot_0 
    0047: [3] 80 f8 45 c4 0a ............. GetObjName <_errors> <> 
    0052: [3] 62 ......................... GetLocalSlot_1 
    0053: [4] b8 ......................... PutObjNameExpr 
    0054: [1] 40 4e ...................... Goto.8 <addr: 134> 

    # db/Record.es:824                      } else if (value.length == 0 || value.trim() == "" && thisObj._errors[field] == undefined) {

    0064: [1] 63 ......................... GetLocalSlot_2 
    0065: [2] 80 c5 3d 00 ................ GetObjName <length> <> 
    0069: [2] 46 ......................... Load0 
    0070: [3] 25 ......................... CompareEQ 
    0071: [2] 22 ......................... CastBoolean 
    0072: [2] 3b ......................... Dup 
    0073: [3] 13 1f ...................... BranchTrue.8 <addr: 106> 
    0075: [2] 96 ......................... Pop 
    0076: [1] 63 ......................... GetLocalSlot_2 
    0077: [2] 1d f4 c0 01 00 00 .......... CallObjName <trim> <> <argc: 0> 
    0083: [1] 99 ......................... PushResult 
    0084: [2] 5c c4 0a ................... LoadString <> 
    0087: [3] 25 ......................... CompareEQ 
    0088: [2] 22 ......................... CastBoolean 
    0089: [2] 3b ......................... Dup 
    0090: [3] 12 0d ...................... BranchFalse.8 <addr: 105> 
    0092: [2] 96 ......................... Pop 
    0093: [1] 61 ......................... GetLocalSlot_0 
    0094: [2] 80 f8 45 c4 0a ............. GetObjName <_errors> <> 
    0099: [2] 62 ......................... GetLocalSlot_1 
    0100: [3] 81 ......................... GetObjNameExpr 
    0101: [2] 83 3a ...................... GetGlobalSlot <58> 
    0103: [3] 25 ......................... CompareEQ 
    0104: [2] 22 ......................... CastBoolean 
    0105: [2] 22 ......................... CastBoolean 
    0106: [2] 12 1a ...................... BranchFalse.8 <addr: 134> 

    # db/Record.es:825                          thisObj._errors[field] = ErrorMessages.blank

    0116: [1] 88 3c 01 ................... GetThisTypeSlot <slot: 60> <1> 
    0119: [2] 80 94 b4 01 00 ............. GetObjName <blank> <> 
    0124: [2] 61 ......................... GetLocalSlot_0 
    0125: [3] 80 f8 45 c4 0a ............. GetObjName <_errors> <> 
    0130: [3] 62 ......................... GetLocalSlot_1 
    0131: [4] b8 ......................... PutObjNameExpr 
    0132: [1] 40 00 ...................... Goto.8 <addr: 134> 
    0134: [1] c4 ......................... Return 

    # db/Record.es:827                  }
    

VARIABLE:   [checkPresent-00]  private var thisObj : Object

VARIABLE:   [checkPresent-01]  private var field : String

VARIABLE:   [checkPresent-02]  private var value

VARIABLE:   [checkPresent-03]  private var options

FUNCTION:   [Record-64]  [ejs.db::Record,private] static function checkUnique(thisObj: Object, field: String, value, options) : Void

     ARG:   [arg-00]   private thisObj : Object
     ARG:   [arg-01]   private field : String
     ARG:   [arg-02]   private value
     ARG:   [arg-03]   private options


    # db/Record.es:831                      if (thisObj._keyValue) {

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] 80 c2 45 c4 0a ............. GetObjName <_keyValue> <> 
    0014: [1] 12 28 ...................... BranchFalse.8 <addr: 56> 

    # db/Record.es:832                          grid = findWhere(field + ' = "' + value + '" AND id <> ' + thisObj._keyValue)

    0024: [0] 62 ......................... GetLocalSlot_1 
    0025: [1] 5c aa c3 01 ................ LoadString < = "> 
    0029: [2] 00 ......................... Add 
    0030: [1] 63 ......................... GetLocalSlot_2 
    0031: [2] 00 ......................... Add 
    0032: [1] 5c af c3 01 ................ LoadString <" AND id <> > 
    0036: [2] 00 ......................... Add 
    0037: [1] 61 ......................... GetLocalSlot_0 
    0038: [2] 80 c2 45 c4 0a ............. GetObjName <_keyValue> <> 
    0043: [2] 00 ......................... Add 
    0044: [1] 1c 20 00 01 ................ CallThisStaticSlot <slot: 32> <0> <argc: 1> 
    0048: [0] 99 ......................... PushResult 
    0049: [1] bb a4 08 c4 0a ............. PutScopedName <grid> <> 
    0054: [0] 40 25 ...................... Goto.8 <addr: 93> 

    # db/Record.es:833                      } else {
    # db/Record.es:834                          grid = findWhere(field + ' = "' + value + '"')

    0071: [0] 62 ......................... GetLocalSlot_1 
    0072: [1] 5c aa c3 01 ................ LoadString < = "> 
    0076: [2] 00 ......................... Add 
    0077: [1] 63 ......................... GetLocalSlot_2 
    0078: [2] 00 ......................... Add 
    0079: [1] 5c ab 49 ................... LoadString <"> 
    0082: [2] 00 ......................... Add 
    0083: [1] 1c 20 00 01 ................ CallThisStaticSlot <slot: 32> <0> <argc: 1> 
    0087: [0] 99 ......................... PushResult 
    0088: [1] bb a4 08 c4 0a ............. PutScopedName <grid> <> 

    # db/Record.es:836                      if (grid.length > 0) {

    0101: [0] 7f a4 08 c4 0a ............. GetScopedName <grid> <> 
    0106: [1] 80 c5 3d 00 ................ GetObjName <length> <> 
    0110: [1] 46 ......................... Load0 
    0111: [2] 29 ......................... CompareGT 
    0112: [1] 12 2a ...................... BranchFalse.8 <addr: 156> 

    # db/Record.es:837                          thisObj._errors[field] = options.message ? options.message : ErrorMessages.notUnique

    0122: [0] 64 ......................... GetLocalSlot_3 
    0123: [1] 80 ed bb 01 00 ............. GetObjName <message> <> 
    0128: [1] 12 08 ...................... BranchFalse.8 <addr: 138> 
    0130: [0] 64 ......................... GetLocalSlot_3 
    0131: [1] 80 ed bb 01 00 ............. GetObjName <message> <> 
    0136: [1] 40 08 ...................... Goto.8 <addr: 146> 
    0138: [1] 88 3c 01 ................... GetThisTypeSlot <slot: 60> <1> 
    0141: [2] 80 9b b7 01 00 ............. GetObjName <notUnique> <> 
    0146: [2] 61 ......................... GetLocalSlot_0 
    0147: [3] 80 f8 45 c4 0a ............. GetObjName <_errors> <> 
    0152: [3] 62 ......................... GetLocalSlot_1 
    0153: [4] b8 ......................... PutObjNameExpr 
    0154: [1] 40 00 ...................... Goto.8 <addr: 156> 
    0156: [1] c4 ......................... Return 

    # db/Record.es:839                  }
    

VARIABLE:   [checkUnique-00]  private var thisObj : Object

VARIABLE:   [checkUnique-01]  private var field : String

VARIABLE:   [checkUnique-02]  private var value

VARIABLE:   [checkUnique-03]  private var options

FUNCTION:   [Record-65]  public function error(field: String, msg: String) : Void

     ARG:   [arg-00]   private field : String
     ARG:   [arg-01]   private msg : String


    # db/Record.es:842                      if (!field) {

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] 8b ......................... LogicalNot 
    0010: [1] 12 0e ...................... BranchFalse.8 <addr: 26> 

    # db/Record.es:843                          field = ""

    0020: [0] 5c c4 0a ................... LoadString <> 
    0023: [1] 9a ......................... PutLocalSlot_0 
    0024: [0] 40 00 ...................... Goto.8 <addr: 26> 

    # db/Record.es:844                      }
    # db/Record.es:845                      _errors[field] = msg

    0041: [0] 62 ......................... GetLocalSlot_1 
    0042: [1] 76 ......................... GetThisSlot_1 
    0043: [2] 61 ......................... GetLocalSlot_0 
    0044: [3] b8 ......................... PutObjNameExpr 
    0045: [0] c4 ......................... Return 

    # db/Record.es:846                  }
    

VARIABLE:   [error-00]  private var field : String

VARIABLE:   [error-01]  private var msg : String

FUNCTION:   [Record-66]  public function validateModel() : Boolean

   LOCAL:   [local-00] var validation : String
   LOCAL:   [local-01] var field


    # db/Record.es:849                      _errors = {}

    0008: [0] 90 02 00 ................... NewObject <type: 0x2,  intrinsic::Object> <argc: 0> 
    0011: [1] af ......................... PutThisSlot_1 

    # db/Record.es:850                      if (_validations) {

    0020: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0023: [1] 06 e4 00 00 00 ............. BranchFalse <addr: 256> 

    # db/Record.es:851                          for each (let validation: String in _validations) {

    0036: [0] 88 10 01 ................... GetThisTypeSlot <slot: 16> <1> 
    0039: [1] 17 02 00 ................... CallObjSlot <slot: 2> <argc: 0> 
    0042: [0] 99 ......................... PushResult 
    0043: [1] 3b ......................... Dup 
    0044: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0047: [1] 99 ......................... PushResult 
    0048: [2] 9a ......................... PutLocalSlot_0 

    # db/Record.es:852                              check = validation[0]

    0057: [1] 61 ......................... GetLocalSlot_0 
    0058: [2] 46 ......................... Load0 
    0059: [3] 81 ......................... GetObjNameExpr 
    0060: [2] bb 93 c8 01 c4 0a .......... PutScopedName <check> <> 

    # db/Record.es:853                              fields = validation[1]

    0074: [1] 61 ......................... GetLocalSlot_0 
    0075: [2] 47 ......................... Load1 
    0076: [3] 81 ......................... GetObjNameExpr 
    0077: [2] bb 8a 4a c4 0a ............. PutScopedName <fields> <> 

    # db/Record.es:854                              options = validation[2]

    0090: [1] 61 ......................... GetLocalSlot_0 
    0091: [2] 48 ......................... Load2 
    0092: [3] 81 ......................... GetObjNameExpr 
    0093: [2] bb 83 1a c4 0a ............. PutScopedName <options> <> 

    # db/Record.es:855                              if (fields is Array) {

    0106: [1] 7f 8a 4a c4 0a ............. GetScopedName <fields> <> 
    0111: [2] 83 07 ...................... GetGlobalSlot <7> 
    0113: [3] 45 ......................... IsA 
    0114: [2] 12 5c ...................... BranchFalse.8 <addr: 208> 

    # db/Record.es:856                                  for each (let field in fields) {

    0124: [1] 7f 8a 4a c4 0a ............. GetScopedName <fields> <> 
    0129: [2] 1d c4 0c d9 0a 00 .......... CallObjName <getValues> <iterator> <argc: 0> 
    0135: [1] 99 ......................... PushResult 
    0136: [2] 3b ......................... Dup 
    0137: [3] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0140: [2] 99 ......................... PushResult 
    0141: [3] 9b ......................... PutLocalSlot_1 

    # db/Record.es:857                                      if (_errors[field]) {

    0150: [2] 76 ......................... GetThisSlot_1 
    0151: [3] 62 ......................... GetLocalSlot_1 
    0152: [4] 81 ......................... GetObjNameExpr 
    0153: [3] 12 0f ...................... BranchFalse.8 <addr: 170> 

    # db/Record.es:858                                          continue

    0163: [2] 3f e0 ff ff ff ............. Goto <addr: 136> 
    0168: [2] 40 00 ...................... Goto.8 <addr: 170> 

    # db/Record.es:859                                      }
    # db/Record.es:860                                      check(this, field, this[field], options)

    0186: [2] 5d ......................... LoadThis 
    0187: [3] 62 ......................... GetLocalSlot_1 
    0188: [4] 5d ......................... LoadThis 
    0189: [5] 62 ......................... GetLocalSlot_1 
    0190: [6] 81 ......................... GetObjNameExpr 
    0191: [5] 7f 83 1a c4 0a ............. GetScopedName <options> <> 
    0196: [6] 1e 93 c8 01 c4 0a 04 ....... CallScopedName <check> <> <argc: 4> 
    0203: [2] 40 bb ...................... Goto.8 <addr: 136> 
    0205: [2] 96 ......................... Pop 
    0206: [1] 40 28 ...................... Goto.8 <addr: 248> 

    # db/Record.es:862                              } else {
    # db/Record.es:863                                  check(this, fields, this[fields], options)

    0223: [1] 5d ......................... LoadThis 
    0224: [2] 7f 8a 4a c4 0a ............. GetScopedName <fields> <> 
    0229: [3] 5d ......................... LoadThis 
    0230: [4] 7f 8a 4a c4 0a ............. GetScopedName <fields> <> 
    0235: [5] 81 ......................... GetObjNameExpr 
    0236: [4] 7f 83 1a c4 0a ............. GetScopedName <options> <> 
    0241: [5] 1e 93 c8 01 c4 0a 04 ....... CallScopedName <check> <> <argc: 4> 
    0248: [1] 3f 2e ff ff ff ............. Goto <addr: 43> 
    0253: [1] 96 ......................... Pop 
    0254: [0] 40 00 ...................... Goto.8 <addr: 256> 

    # db/Record.es:866                      }
    # db/Record.es:867                      self = Reflect(this).type

    0271: [0] 5d ......................... LoadThis 
    0272: [1] 16 1e 01 ................... CallGlobalSlot <slot: 30> <argc: 1> 
    0275: [0] 99 ......................... PushResult 
    0276: [1] 87 07 00 ................... GetTypeSlot <slot: 7> <0> 
    0279: [1] bb fb cb 01 c4 0a .......... PutScopedName <self> <> 

    # db/Record.es:868                      if (self["validate"]) {

    0293: [0] 7f fb cb 01 c4 0a .......... GetScopedName <self> <> 
    0299: [1] 5c a4 cc 01 ................ LoadString <validate> 
    0303: [2] 81 ......................... GetObjNameExpr 
    0304: [1] 12 1b ...................... BranchFalse.8 <addr: 333> 

    # db/Record.es:869                          self["validate"].call(this)

    0314: [0] 7f fb cb 01 c4 0a .......... GetScopedName <self> <> 
    0320: [1] 5c a4 cc 01 ................ LoadString <validate> 
    0324: [2] 81 ......................... GetObjNameExpr 
    0325: [1] 5d ......................... LoadThis 
    0326: [2] 1d f4 51 00 01 ............. CallObjName <call> <> <argc: 1> 
    0331: [0] 40 00 ...................... Goto.8 <addr: 333> 

    # db/Record.es:871                      if (_errors.length == 0) {

    0341: [0] 76 ......................... GetThisSlot_1 
    0342: [1] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0345: [1] 46 ......................... Load0 
    0346: [2] 25 ......................... CompareEQ 
    0347: [1] 12 0d ...................... BranchFalse.8 <addr: 362> 

    # db/Record.es:872                          coerceTypes()

    0357: [0] 18 46 00 ................... CallThisSlot <slot: 70> <argc: 0> 
    0360: [0] 40 00 ...................... Goto.8 <addr: 362> 

    # db/Record.es:874                      return _errors.length == 0

    0370: [0] 76 ......................... GetThisSlot_1 
    0371: [1] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0374: [1] 46 ......................... Load0 
    0375: [2] 25 ......................... CompareEQ 
    0376: [1] c5 ......................... ReturnValue 
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration    137     140        205          205       StopIteration
1   iteration     44      47        253          253       StopIteration

VARIABLE:   [validateModel-00]  -hoisted-0 var validation : String

VARIABLE:   [validateModel-01]  -hoisted-1 var field

FUNCTION:   [Record-67]  public function getErrors() : Array



    # db/Record.es:879                      return _errors

    0008: [0] 76 ......................... GetThisSlot_1 
    0009: [1] c5 ......................... ReturnValue 
    

FUNCTION:   [Record-68]  public function hasError(field: String) : Boolean

     ARG:   [arg-00]   private field : String

    0000: [0] 43 02 02 04 ................ InitDefaultArgs.8 <2> <4> <6> 
    0004: [0] 5a ......................... LoadNull 
    0005: [1] 9a ......................... PutLocalSlot_0 

    # db/Record.es:884                      if (field) {

    0014: [0] 61 ......................... GetLocalSlot_0 
    0015: [1] 12 15 ...................... BranchFalse.8 <addr: 38> 

    # db/Record.es:885                          return (_errors && _errors[field])

    0025: [0] 76 ......................... GetThisSlot_1 
    0026: [1] 22 ......................... CastBoolean 
    0027: [1] 3b ......................... Dup 
    0028: [2] 12 05 ...................... BranchFalse.8 <addr: 35> 
    0030: [1] 96 ......................... Pop 
    0031: [0] 76 ......................... GetThisSlot_1 
    0032: [1] 61 ......................... GetLocalSlot_0 
    0033: [2] 81 ......................... GetObjNameExpr 
    0034: [1] 22 ......................... CastBoolean 
    0035: [1] c5 ......................... ReturnValue 
    0036: [0] 40 00 ...................... Goto.8 <addr: 38> 

    # db/Record.es:887                      return _errors && _errors.length > 0

    0046: [0] 76 ......................... GetThisSlot_1 
    0047: [1] 22 ......................... CastBoolean 
    0048: [1] 3b ......................... Dup 
    0049: [2] 12 08 ...................... BranchFalse.8 <addr: 59> 
    0051: [1] 96 ......................... Pop 
    0052: [0] 76 ......................... GetThisSlot_1 
    0053: [1] 87 03 01 ................... GetTypeSlot <slot: 3> <1> 
    0056: [1] 46 ......................... Load0 
    0057: [2] 29 ......................... CompareGT 
    0058: [1] 22 ......................... CastBoolean 
    0059: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [hasError-00]  private var field : String

FUNCTION:   [Record-69]  public function getFieldType(field: String) : String

     ARG:   [arg-00]   private field : String


    # db/Record.es:892                      if (_columnNames == null) {

    0007: [0] 88 08 01 ................... GetThisTypeSlot <slot: 8> <1> 
    0010: [1] 5a ......................... LoadNull 
    0011: [2] 25 ......................... CompareEQ 
    0012: [1] 12 0d ...................... BranchFalse.8 <addr: 27> 

    # db/Record.es:893                          getSchema()

    0021: [0] 1c 28 01 00 ................ CallThisStaticSlot <slot: 40> <1> <argc: 0> 
    0025: [0] 40 00 ...................... Goto.8 <addr: 27> 

    # db/Record.es:895                      return Database.SqliteToDatatype[_sqlColumnTypes[field]]

    0035: [0] 52 ......................... LoadGlobal 
    0036: [1] 80 46 1d ................... GetObjName <Database> <ejs.db> 
    0039: [1] 87 14 00 ................... GetTypeSlot <slot: 20> <0> 
    0042: [1] 88 0a 01 ................... GetThisTypeSlot <slot: 10> <1> 
    0045: [2] 61 ......................... GetLocalSlot_0 
    0046: [3] 81 ......................... GetObjNameExpr 
    0047: [2] 81 ......................... GetObjNameExpr 
    0048: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [getFieldType-00]  private var field : String

FUNCTION:   [Record-70]  [ejs.db::Record,private] function coerceTypes() : Void

   LOCAL:   [local-00] var field : String
   LOCAL:   [local-01] var value : String


    # db/Record.es:900                      for (let field: String in this) {

    0008: [0] 5d ......................... LoadThis 
    0009: [1] 1d ad 3d d9 0a 00 .......... CallObjName <get> <iterator> <argc: 0> 
    0015: [0] 99 ......................... PushResult 
    0016: [1] 3b ......................... Dup 
    0017: [2] 17 05 00 ................... CallObjSlot <slot: 5> <argc: 0> 
    0020: [1] 99 ......................... PushResult 
    0021: [2] 9a ......................... PutLocalSlot_0 

    # db/Record.es:901                          if (_columnTypes[field] == Reflect(this[field]).type) {

    0030: [1] 88 09 01 ................... GetThisTypeSlot <slot: 9> <1> 
    0033: [2] 61 ......................... GetLocalSlot_0 
    0034: [3] 81 ......................... GetObjNameExpr 
    0035: [2] 5d ......................... LoadThis 
    0036: [3] 61 ......................... GetLocalSlot_0 
    0037: [4] 81 ......................... GetObjNameExpr 
    0038: [3] 16 1e 01 ................... CallGlobalSlot <slot: 30> <argc: 1> 
    0041: [2] 99 ......................... PushResult 
    0042: [3] 87 07 00 ................... GetTypeSlot <slot: 7> <0> 
    0045: [3] 25 ......................... CompareEQ 
    0046: [2] 12 0f ...................... BranchFalse.8 <addr: 63> 

    # db/Record.es:902                              continue

    0056: [1] 3f d3 ff ff ff ............. Goto <addr: 16> 
    0061: [1] 40 00 ...................... Goto.8 <addr: 63> 

    # db/Record.es:903                          }
    # db/Record.es:904                          let value: String = this[field]

    0078: [1] 5d ......................... LoadThis 
    0079: [2] 61 ......................... GetLocalSlot_0 
    0080: [3] 81 ......................... GetObjNameExpr 
    0081: [2] 9b ......................... PutLocalSlot_1 

    # db/Record.es:905                          switch (_columnTypes[field]) {

    0090: [1] 88 09 01 ................... GetThisTypeSlot <slot: 9> <1> 
    0093: [2] 61 ......................... GetLocalSlot_0 
    0094: [3] 81 ......................... GetObjNameExpr 

    # db/Record.es:906                          case Boolean:

    0103: [2] 3b ......................... Dup 
    0104: [3] 83 01 ...................... GetGlobalSlot <1> 
    0106: [4] 26 ......................... CompareStrictlyEQ 
    0107: [3] 06 83 00 00 00 ............. BranchFalse <addr: 243> 

    # db/Record.es:907                              if (value is String) {

    0120: [2] 62 ......................... GetLocalSlot_1 
    0121: [3] 83 04 ...................... GetGlobalSlot <4> 
    0123: [4] 45 ......................... IsA 
    0124: [3] 12 17 ...................... BranchFalse.8 <addr: 149> 

    # db/Record.es:908                                  this[field] = (value.toLower() == "true")

    0134: [2] 62 ......................... GetLocalSlot_1 
    0135: [3] 17 24 00 ................... CallObjSlot <slot: 36> <argc: 0> 
    0138: [2] 99 ......................... PushResult 
    0139: [3] 5c 94 d4 01 ................ LoadString <true> 
    0143: [4] 25 ......................... CompareEQ 
    0144: [3] 5d ......................... LoadThis 
    0145: [4] 61 ......................... GetLocalSlot_0 
    0146: [5] b8 ......................... PutObjNameExpr 
    0147: [2] 40 34 ...................... Goto.8 <addr: 201> 

    # db/Record.es:909                              } else if (value is Number) {

    0157: [2] 62 ......................... GetLocalSlot_1 
    0158: [3] 83 03 ...................... GetGlobalSlot <3> 
    0160: [4] 45 ......................... IsA 
    0161: [3] 12 10 ...................... BranchFalse.8 <addr: 179> 

    # db/Record.es:910                                  this[field] = (value == 1)

    0171: [2] 62 ......................... GetLocalSlot_1 
    0172: [3] 47 ......................... Load1 
    0173: [4] 25 ......................... CompareEQ 
    0174: [3] 5d ......................... LoadThis 
    0175: [4] 61 ......................... GetLocalSlot_0 
    0176: [5] b8 ......................... PutObjNameExpr 
    0177: [2] 40 16 ...................... Goto.8 <addr: 201> 

    # db/Record.es:911                              } else {
    # db/Record.es:912                                  this[field] = value cast Boolean

    0194: [2] 62 ......................... GetLocalSlot_1 
    0195: [3] 83 01 ...................... GetGlobalSlot <1> 
    0197: [4] 21 ......................... Cast 
    0198: [3] 5d ......................... LoadThis 
    0199: [4] 61 ......................... GetLocalSlot_0 
    0200: [5] b8 ......................... PutObjNameExpr 

    # db/Record.es:913                              }
    # db/Record.es:914                              this[field] = (this[field]) ? true : false

    0216: [2] 5d ......................... LoadThis 
    0217: [3] 61 ......................... GetLocalSlot_0 
    0218: [4] 81 ......................... GetObjNameExpr 
    0219: [3] 12 03 ...................... BranchFalse.8 <addr: 224> 
    0221: [2] 5e ......................... LoadTrue 
    0222: [3] 40 01 ...................... Goto.8 <addr: 225> 
    0224: [3] 51 ......................... LoadFalse 
    0225: [4] 5d ......................... LoadThis 
    0226: [5] 61 ......................... GetLocalSlot_0 
    0227: [6] b8 ......................... PutObjNameExpr 

    # db/Record.es:915                              break

    0236: [3] 3f 5c 00 00 00 ............. Goto <addr: 333> 
    0241: [3] 40 0e ...................... Goto.8 <addr: 257> 

    # db/Record.es:917                          case Date:

    0251: [3] 3b ......................... Dup 
    0252: [4] 83 0a ...................... GetGlobalSlot <10> 
    0254: [5] 26 ......................... CompareStrictlyEQ 
    0255: [4] 12 20 ...................... BranchFalse.8 <addr: 289> 

    # db/Record.es:918                              this[field] = new Date(value)

    0265: [3] 83 0a ...................... GetGlobalSlot <10> 
    0267: [4] 8e ......................... New 
    0268: [4] 62 ......................... GetLocalSlot_1 
    0269: [5] 1f 01 ...................... CallConstructor <argc: 1> 
    0271: [4] 5d ......................... LoadThis 
    0272: [5] 61 ......................... GetLocalSlot_0 
    0273: [6] b8 ......................... PutObjNameExpr 

    # db/Record.es:919                              break

    0282: [3] 3f 2e 00 00 00 ............. Goto <addr: 333> 
    0287: [3] 40 0e ...................... Goto.8 <addr: 303> 

    # db/Record.es:921                          case Number:

    0297: [3] 3b ......................... Dup 
    0298: [4] 83 03 ...................... GetGlobalSlot <3> 
    0300: [5] 26 ......................... CompareStrictlyEQ 
    0301: [4] 12 1e ...................... BranchFalse.8 <addr: 333> 

    # db/Record.es:922                              this[field] = this[field] cast Number

    0311: [3] 5d ......................... LoadThis 
    0312: [4] 61 ......................... GetLocalSlot_0 
    0313: [5] 81 ......................... GetObjNameExpr 
    0314: [4] 83 03 ...................... GetGlobalSlot <3> 
    0316: [5] 21 ......................... Cast 
    0317: [4] 5d ......................... LoadThis 
    0318: [5] 61 ......................... GetLocalSlot_0 
    0319: [6] b8 ......................... PutObjNameExpr 

    # db/Record.es:923                              break

    0328: [3] 3f 00 00 00 00 ............. Goto <addr: 333> 
    0333: [3] 96 ......................... Pop 
    0334: [2] 3f bd fe ff ff ............. Goto <addr: 16> 
    0339: [2] 96 ......................... Pop 
    0340: [1] c4 ......................... Return 

    # db/Record.es:926                  }
    

#
#  Exception Section
#    Kind     TryStart TryEnd  HandlerStart  HandlerEnd   CatchType
#
0   iteration     17      20        339          339       StopIteration

VARIABLE:   [coerceTypes-00]  -hoisted-0 var field : String

VARIABLE:   [coerceTypes-01]  -hoisted-1 var value : String

VARIABLE:   [RecordInstanceType-00]  [ejs.db::Record,private] var _keyValue : Object

VARIABLE:   [RecordInstanceType-01]  [ejs.db::Record,private] var _errors : Object

FUNCTION:   [global-113]  ejs.db function pluralize(name: String) : String

     ARG:   [arg-00]   private name : String
   LOCAL:   [local-01] var s : String


    # db/Record.es:989                  var s: String = name + "s"

    0008: [0] 61 ......................... GetLocalSlot_0 
    0009: [1] 5c 82 d8 01 ................ LoadString <s> 
    0013: [2] 00 ......................... Add 
    0014: [1] 9b ......................... PutLocalSlot_1 

    # db/Record.es:990                  return s.toPascal()

    0023: [0] 62 ......................... GetLocalSlot_1 
    0024: [1] 17 17 00 ................... CallObjSlot <slot: 23> <argc: 0> 
    0027: [0] 99 ......................... PushResult 
    0028: [1] c5 ......................... ReturnValue 
    

VARIABLE:   [pluralize-00]  private var name : String

VARIABLE:   [pluralize-01]  private var s : String

----------------------------------------------------------------------------------------------

#
#  Global slot assignments (Num prop 114, num inherited 0)
#
0111    ejs.db var Database: Type
0112    ejs.db var Record: Type
0113    ejs.db function pluralize

#
#  Initializer slot assignments (Num prop 2)
#
0000    -block- var block_0007_1: Block
0001    -block- var block_0011_18: Block

#
#  Class slot assignments for the "Database" class (Num slots 35, num inherited 5)
#
0000    public function clone
0001    iterator function get
0002    iterator function getValues
0003    public function length
0004    public function toString
0005    -constructor- function Database
0006    -initializer- function Database-initializer
0007    [ejs.db::Database,private] var _defaultDb: Database
0008    [ejs.db::Database,private] var _traceSql: Boolean
0009    public function connect
0010    public function close
0011    public function sql
0012    public function query
0013    public function connection
0014    public function name
0015    public function getTables
0016    public function getColumns
0017    public function defaultDatabase
0018    public function set-defaultDatabase
0019    public var DatatypeToSqlite: Object
0020    public var SqliteToDatatype: Object
0021    public var SqliteToEjs: Object
0022    public function createDatabase
0023    public function destroyDatabase
0024    public function createTable
0025    public function renameTable
0026    public function destroyTable
0027    public function addIndex
0028    public function removeIndex
0029    public function addColumn
0030    public function changeColumn
0031    public function renameColumn
0032    public function removeColumns
0033    [ejs.db::Database,private] function log
0034    public function trace

#
#  Instance slot assignments for the "Database" class (Num prop 2, num inherited 0)
#
0000    [ejs.db::Database,private] var _name: String
0001    [ejs.db::Database,private] var _connection: String

#
#  Local slot assignments for the "Database" function (Num slots 1)
#
0000    private var connectionString: String

#
#  Local slot assignments for the "connect" function (Num slots 1)
#
0000    private var connectionString: String

#
#  Local slot assignments for the "sql" function (Num slots 1)
#
0000    private var cmd: String

#
#  Local slot assignments for the "query" function (Num slots 1)
#
0000    private var cmd: String

#
#  Local slot assignments for the "getTables" function (Num slots 5)
#
0000    private var cmd: String
0001    private var grid: Array
0002    private var result: Array
0003    -hoisted-3 var row: Object
0004    -hoisted-4 var name: String

#
#  Local slot assignments for the "getColumns" function (Num slots 4)
#
0000    private var table: String
0001    private var names
0002    -hoisted-2 var row
0003    -hoisted-3 var name: String

#
#  Local slot assignments for the "set-defaultDatabase" function (Num slots 1)
#
0000    private var db

#
#  Local slot assignments for the "createDatabase" function (Num slots 2)
#
0000    private var name: String
0001    private var options: Object

#
#  Local slot assignments for the "destroyDatabase" function (Num slots 1)
#
0000    private var name: String

#
#  Local slot assignments for the "createTable" function (Num slots 7)
#
0000    private var table: String
0001    private var columns: Array
0002    private var cmd: String
0003    -hoisted-3 var colspec: String
0004    -hoisted-4 var spec: Array
0005    -hoisted-5 var column: String
0006    -hoisted-6 var datatype: String

#
#  Local slot assignments for the "renameTable" function (Num slots 2)
#
0000    private var oldTable: String
0001    private var newTable: String

#
#  Local slot assignments for the "destroyTable" function (Num slots 1)
#
0000    private var table: String

#
#  Local slot assignments for the "addIndex" function (Num slots 3)
#
0000    private var table: String
0001    private var column: String
0002    private var indexName: String

#
#  Local slot assignments for the "removeIndex" function (Num slots 2)
#
0000    private var table: String
0001    private var indexName: String

#
#  Local slot assignments for the "addColumn" function (Num slots 4)
#
0000    private var table: String
0001    private var column: String
0002    private var datatype: String
0003    private var options: Object

#
#  Local slot assignments for the "changeColumn" function (Num slots 4)
#
0000    private var table: String
0001    private var column: String
0002    private var datatype: String
0003    private var options: Object

#
#  Local slot assignments for the "renameColumn" function (Num slots 3)
#
0000    private var table: String
0001    private var oldColumn: String
0002    private var newColumn: String

#
#  Local slot assignments for the "removeColumns" function (Num slots 8)
#
0000    private var table: String
0001    private var columns: Array
0002    -hoisted-2 var column
0003    reserved slot for static super property
0004    -hoisted-4 var row
0005    -hoisted-5 var name: String
0006    reserved slot for static super property
0007    -hoisted-7 var k

#
#  Local slot assignments for the "log" function (Num slots 1)
#
0000    private var cmd: String

#
#  Local slot assignments for the "trace" function (Num slots 1)
#
0000    private var on: Boolean

#
#  Class slot assignments for the "Record" class (Num slots 71, num inherited 5)
#
0000    public function clone
0001    iterator function get
0002    iterator function getValues
0003    public function length
0004    public function toString
0005    -initializer- function Record-initializer
0006    [ejs.db::Record,private] var _belongsTo: Object
0007    [ejs.db::Record,private] var _className: String
0008    [ejs.db::Record,private] var _columnNames: Object
0009    [ejs.db::Record,private] var _columnTypes: Object
0010    [ejs.db::Record,private] var _sqlColumnTypes: Object
0011    [ejs.db::Record,private] var _db: Database
0012    [ejs.db::Record,private] var _foreignId: String
0013    [ejs.db::Record,private] var _keyName: String
0014    [ejs.db::Record,private] var _tableName: String
0015    [ejs.db::Record,private] var _traceSql: Boolean
0016    [ejs.db::Record,private] var _validations: Array
0017    [ejs.db::Record,private] var _beforeFilters: Array
0018    [ejs.db::Record,private] var _afterFilters: Array
0019    [ejs.db::Record,private] var _wrapFilters: Array
0020    public function constructor
0021    public function beforeFilter
0022    public function afterFilter
0023    public function wrapFilter
0024    [ejs.db::Record,private] function runFilters
0025    public function save
0026    public function saveUpdate
0027    public function belongsTo
0028    [ejs.db::Record,private] function createRecord
0029    public function find
0030    public function findAll
0031    public function findOneWhere
0032    public function findWhere
0033    [ejs.db::Record,private] function includeJoin
0034    [ejs.db::Record,private] function innerFind
0035    public function getDb
0036    public function columnNames
0037    public function columnTitles
0038    public function getKeyName
0039    public function getNumRows
0040    [ejs.db::Record,private] function getSchema
0041    public function getTableName
0042    public function hasMany
0043    public function hasAndBelongsToMany
0044    public function hasOne
0045    [ejs.db::Record,private] function loadReference
0046    [ejs.db::Record,private] function log
0047    [ejs.db::Record,private] function logResult
0048    [ejs.db::Record,private] function mapSqlTypeToEjs
0049    public function remove
0050    public function setDb
0051    public function setup
0052    public function setTableName
0053    public function setKeyName
0054    public function sql
0055    public function trace
0056    public function validateFormat
0057    public function validateNumber
0058    public function validatePresence
0059    public function validateUnique
0060    public var ErrorMessages
0061    [ejs.db::Record,private] function checkFormat
0062    [ejs.db::Record,private] function checkNumber
0063    [ejs.db::Record,private] function checkPresent
0064    [ejs.db::Record,private] function checkUnique
0065    public function error
0066    public function validateModel
0067    public function getErrors
0068    public function hasError
0069    public function getFieldType
0070    [ejs.db::Record,private] function coerceTypes

#
#  Instance slot assignments for the "Record" class (Num prop 2, num inherited 0)
#
0000    [ejs.db::Record,private] var _keyValue: Object
0001    [ejs.db::Record,private] var _errors: Object

#
#  Local slot assignments for the "constructor" function (Num slots 2)
#
0000    private var fields: Object
0001    -hoisted-1 var field

#
#  Local slot assignments for the "beforeFilter" function (Num slots 2)
#
0000    private var fn
0001    private var options: Object

#
#  Local slot assignments for the "afterFilter" function (Num slots 2)
#
0000    private var fn
0001    private var options: Object

#
#  Local slot assignments for the "wrapFilter" function (Num slots 2)
#
0000    private var fn
0001    private var options: Object

#
#  Local slot assignments for the "runFilters" function (Num slots 4)
#
0000    private var filters
0001    -hoisted-1 var filter
0002    -hoisted-2 var fn
0003    -hoisted-3 var options

#
#  Local slot assignments for the "save" function (Num slots 6)
#
0000    private var sql: String
0001    private var result: Array
0002    -hoisted-2 var field: String
0003    -hoisted-3 var field: String
0004    reserved slot for static super property
0005    -hoisted-5 var field: String

#
#  Local slot assignments for the "saveUpdate" function (Num slots 2)
#
0000    private var fields: Object
0001    -hoisted-1 var field

#
#  Local slot assignments for the "belongsTo" function (Num slots 2)
#
0000    private var owner
0001    private var options: Object

#
#  Local slot assignments for the "createRecord" function (Num slots 3)
#
0000    private var rowData: Object
0001    private var rec: Record
0002    -hoisted-2 var field: String

#
#  Local slot assignments for the "find" function (Num slots 3)
#
0000    private var key: Object
0001    private var options: Object
0002    private var grid: Array

#
#  Local slot assignments for the "findAll" function (Num slots 3)
#
0000    private var options: Object
0001    private var grid: Array
0002    -hoisted-2 var i

#
#  Local slot assignments for the "findOneWhere" function (Num slots 2)
#
0000    private var where: String
0001    private var grid: Array

#
#  Local slot assignments for the "findWhere" function (Num slots 4)
#
0000    private var where: String
0001    private var count: Number
0002    private var grid: Array
0003    -hoisted-3 var i

#
#  Local slot assignments for the "includeJoin" function (Num slots 3)
#
0000    private var joins: Object
0001    private var cmd: String
0002    -hoisted-2 var join

#
#  Local slot assignments for the "innerFind" function (Num slots 20)
#
0000    private var key: Object
0001    private var options: Object
0002    private var cmd: String
0003    private var columns: Array
0004    private var from: String
0005    private var conditions: String
0006    private var where: String
0007    private var db
0008    private var results: Array
0009    -hoisted-9 var index: Number
0010    reserved slot for static super property
0011    -hoisted-11 var owner
0012    -hoisted-12 var owner
0013    -hoisted-13 var tname
0014    -hoisted-14 var parts: Array
0015    reserved slot for static super property
0016    -hoisted-16 var cond
0017    -hoisted-17 var field
0018    reserved slot for static super property
0019    -hoisted-19 var e

#
#  Local slot assignments for the "columnNames" function (Num slots 2)
#
0000    private var result: Array
0001    -hoisted-1 var name

#
#  Local slot assignments for the "columnTitles" function (Num slots 2)
#
0000    private var result: Array
0001    -hoisted-1 var title

#
#  Local slot assignments for the "getNumRows" function (Num slots 2)
#
0000    private var cmd: String
0001    private var grid: Array

#
#  Local slot assignments for the "getSchema" function (Num slots 4)
#
0000    private var sql: String
0001    private var grid: Array
0002    -hoisted-2 var row
0003    -hoisted-3 var name: String

#
#  Local slot assignments for the "hasMany" function (Num slots 2)
#
0000    private var model: Object
0001    private var options: Object

#
#  Local slot assignments for the "hasAndBelongsToMany" function (Num slots 2)
#
0000    private var thing: Object
0001    private var options: Object

#
#  Local slot assignments for the "hasOne" function (Num slots 2)
#
0000    private var model: Object
0001    private var options: Object

#
#  Local slot assignments for the "loadReference" function (Num slots 6)
#
0000    private var model
0001    private var key: String
0002    private var hasMany: Boolean
0003    private var data: Array
0004    -hoisted-4 var result: Array
0005    -hoisted-5 var item

#
#  Local slot assignments for the "log" function (Num slots 2)
#
0000    private var where: String
0001    private var cmd: String

#
#  Local slot assignments for the "logResult" function (Num slots 1)
#
0000    private var data: Object

#
#  Local slot assignments for the "mapSqlTypeToEjs" function (Num slots 2)
#
0000    private var sqlType: String
0001    private var ejsType: String

#
#  Local slot assignments for the "remove" function (Num slots 3)
#
0000    private var keys: Array
0001    -hoisted-1 var key: Object
0002    -hoisted-2 var cmd: String

#
#  Local slot assignments for the "setDb" function (Num slots 1)
#
0000    private var dbase

#
#  Local slot assignments for the "setup" function (Num slots 1)
#
0000    private var database

#
#  Local slot assignments for the "setTableName" function (Num slots 1)
#
0000    private var name: String

#
#  Local slot assignments for the "setKeyName" function (Num slots 1)
#
0000    private var value: String

#
#  Local slot assignments for the "sql" function (Num slots 2)
#
0000    private var cmd: String
0001    private var count: Number

#
#  Local slot assignments for the "trace" function (Num slots 1)
#
0000    private var on: Boolean

#
#  Local slot assignments for the "validateFormat" function (Num slots 2)
#
0000    private var fields: Object
0001    private var options: Object

#
#  Local slot assignments for the "validateNumber" function (Num slots 2)
#
0000    private var fields: Object
0001    private var options: Object

#
#  Local slot assignments for the "validatePresence" function (Num slots 2)
#
0000    private var fields: Object
0001    private var options: Object

#
#  Local slot assignments for the "validateUnique" function (Num slots 2)
#
0000    private var fields: Object
0001    private var options: Object

#
#  Local slot assignments for the "checkFormat" function (Num slots 4)
#
0000    private var thisObj: Object
0001    private var field: String
0002    private var value
0003    private var options

#
#  Local slot assignments for the "checkNumber" function (Num slots 4)
#
0000    private var thisObj: Object
0001    private var field: String
0002    private var value
0003    private var options

#
#  Local slot assignments for the "checkPresent" function (Num slots 4)
#
0000    private var thisObj: Object
0001    private var field: String
0002    private var value
0003    private var options

#
#  Local slot assignments for the "checkUnique" function (Num slots 4)
#
0000    private var thisObj: Object
0001    private var field: String
0002    private var value
0003    private var options

#
#  Local slot assignments for the "error" function (Num slots 2)
#
0000    private var field: String
0001    private var msg: String

#
#  Local slot assignments for the "validateModel" function (Num slots 2)
#
0000    -hoisted-0 var validation: String
0001    -hoisted-1 var field

#
#  Local slot assignments for the "hasError" function (Num slots 1)
#
0000    private var field: String

#
#  Local slot assignments for the "getFieldType" function (Num slots 1)
#
0000    private var field: String

#
#  Local slot assignments for the "coerceTypes" function (Num slots 2)
#
0000    -hoisted-0 var field: String
0001    -hoisted-1 var value: String

#
#  Local slot assignments for the "pluralize" function (Num slots 2)
#
0000    private var name: String
0001    private var s: String

----------------------------------------------------------------------------------------------
#
#  Constant Pool (size 27745 bytes)
#
0000   ""
0001   "db/Database.es"
0002   "}"
0003   "internal-0"
0004   "ejs.db"
0005   "module ejs.db {"
0006   "	class Database {"
0007   "Database"
0008   "        use default namespace public"
0009   "		private static var _defaultDb: Database"
0010   "_defaultDb"
0011   "[ejs.db::Database,private]"
0012   "		private static var _traceSql: Boolean"
0013   "_traceSql"
0014   "Boolean"
0015   "		private var _name: String"
0016   "_name"
0017   "String"
0018   "		private var _connection: String"
0019   "_connection"
0020   "		native function Database(connectionString: String)"
0021   "-constructor-"
0022   "connectionString"
0023   "private"
0024   "intrinsic"
0025   "		native function connect(connectionString: String): Void"
0026   "connect"
0027   "public"
0028   "Void"
0029   "		native function close(): Void"
0030   "close"
0031   "		native function sql(cmd: String): Array"
0032   "sql"
0033   "cmd"
0034   "Array"
0035   "        function query(cmd: String): Array {"
0036   "            log(cmd)"
0037   "            return sql(cmd)"
0038   "query"
0039   "		function get connection(): String {"
0040   "			return _connection"
0041   "connection"
0042   "		function get name(): String {"
0043   "			return _name"
0044   "name"
0045   "		function getTables(): Array {"
0046   "			let cmd: String = "SELECT name from sqlite_master WHERE type = 'table' order by NAME;""
0047   "SELECT name from sqlite_master WHERE type = 'table' order by NAME;"
0048   "			let grid: Array = query(cmd)"
0049   "grid"
0050   "			let result: Array = new Array"
0051   "result"
0052   "			for each (let row: Object in grid) {"
0053   "row"
0054   "-hoisted-3"
0055   "Object"
0056   "-hoisted-4"
0057   "				let name: String = row["name"]"
0058   "				if (!name.contains("sqlite_") && !name.contains("_Ejs")) {"
0059   "sqlite_"
0060   "_Ejs"
0061   "					result.append(row["name"])"
0062   "			return result"
0063   "getTables"
0064   ""
0065   "Block"
0066   "StopIteration"
0067   "iterator"
0068   "        function getColumns(table: String): Array {"
0069   "            grid =  query('PRAGMA table_info("' + table + '");')"
0070   "PRAGMA table_info(""
0071   "");"
0072   "            let names = []"
0073   "names"
0074   "            for each (let row in grid) {"
0075   "-hoisted-2"
0076   "getValues"
0077   "                let name: String = row["name"]"
0078   "                names.append(name)"
0079   "append"
0080   "            return names"
0081   "getColumns"
0082   "table"
0083   "        static function get defaultDatabase(): Database {"
0084   "            return _defaultDb"
0085   "defaultDatabase"
0086   "        static function set defaultDatabase(db: Database): Void {"
0087   "            _defaultDb = db"
0088   "        }"
0089   "set-defaultDatabase"
0090   "db"
0091   "        static const DatatypeToSqlite: Object = {"
0092   "DatatypeToSqlite"
0093   "            "binary":       "blob","
0094   "binary"
0095   "blob"
0096   "            "boolean":      "tinyint","
0097   "boolean"
0098   "tinyint"
0099   "            "date":         "date","
0100   "date"
0101   "            "datetime":     "datetime","
0102   "datetime"
0103   "            "decimal":      "decimal","
0104   "decimal"
0105   "            "float":        "float","
0106   "float"
0107   "            "integer":      "int","
0108   "integer"
0109   "int"
0110   "            "number":       "decimal","
0111   "number"
0112   "            "string":       "varchar","
0113   "string"
0114   "varchar"
0115   "            "text":         "text","
0116   "text"
0117   "            "time":         "time","
0118   "time"
0119   "            "timestamp":    "datetime","
0120   "timestamp"
0121   "        static const SqliteToDatatype: Object = {"
0122   "SqliteToDatatype"
0123   "            "blob":         "binary","
0124   "            "tinyint":      "boolean","
0125   "            "int":          "integer","
0126   "            "varchar":      "string","
0127   "        static const SqliteToEjs: Object = {"
0128   "SqliteToEjs"
0129   "            "blob":         String,"
0130   "            "date":         Date,"
0131   "            "datetime":     Date,"
0132   "            "decimal":      Number,"
0133   "            "integer":      Number,"
0134   "            "float":        Number,"
0135   "            "time":         Date,"
0136   "            "tinyint":      Boolean,"
0137   "            "text":         String,"
0138   "            "varchar":      String,"
0139   "        function createDatabase(name: String, options: Object = null): Void {"
0140   "createDatabase"
0141   "options"
0142   "        function destroyDatabase(name: String): Void {"
0143   "destroyDatabase"
0144   "        function createTable(table: String, columns: Array = null): Void {"
0145   "            let cmd: String"
0146   "            query("DROP TABLE IF EXISTS " + table + ";")"
0147   "DROP TABLE IF EXISTS "
0148   ";"
0149   "            query("CREATE TABLE " + table + "(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL);")"
0150   "CREATE TABLE "
0151   "(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL);"
0152   "            if (columns) {"
0153   "                for each (let colspec: String in columns) {"
0154   "colspec"
0155   "spec"
0156   "                    let spec: Array = colspec.split(":")"
0157   ":"
0158   "                    if (spec.length != 2) {"
0159   "                        throw "Bad column spec: " + spec"
0160   "Bad column spec: "
0161   "                    }"
0162   "column"
0163   "-hoisted-5"
0164   "                    let column: String = spec[0]"
0165   "                    let datatype: String = spec[1]"
0166   "datatype"
0167   "-hoisted-6"
0168   "                    addColumn(table, column.trim(), datatype.trim())"
0169   "createTable"
0170   "columns"
0171   "        function renameTable(oldTable: String, newTable: String): Void {"
0172   "            query("ALTER TABLE " + oldTable + " RENAME TO " + newTable + ";")"
0173   "ALTER TABLE "
0174   " RENAME TO "
0175   "renameTable"
0176   "oldTable"
0177   "newTable"
0178   "        function destroyTable(table: String): Void {"
0179   "destroyTable"
0180   "        function addIndex(table: String, column: String, indexName: String): Void {"
0181   "            query("CREATE INDEX " + indexName + " ON " + table + " (" + column + ");")"
0182   "CREATE INDEX "
0183   " ON "
0184   " ("
0185   ");"
0186   "addIndex"
0187   "indexName"
0188   "        function removeIndex(table: String, indexName: String): Void {"
0189   "            query("DROP INDEX " + indexName + ";")"
0190   "DROP INDEX "
0191   "removeIndex"
0192   "        function addColumn(table: String, column: String, datatype: String, options: Object = null): Void {"
0193   "            datatype = DatatypeToSqlite[datatype.toLower()]"
0194   "            if (datatype == undefined) {"
0195   "                throw "Bad Ejscript column type: " + datatype"
0196   "Bad Ejscript column type: "
0197   "            }"
0198   "            query("ALTER TABLE " + table + " ADD " + column + " " + datatype)"
0199   " ADD "
0200   " "
0201   "addColumn"
0202   "        function changeColumn(table: String, column: String, datatype: String, options: Object = null): Void {"
0203   "            datatype = datatype.toLower()"
0204   "            if (DatatypeToSqlite[datatype] == undefined) {"
0205   "                throw "Bad column type: " + datatype"
0206   "Bad column type: "
0207   "            throw "SQLite does not support column changes""
0208   "SQLite does not support column changes"
0209   "changeColumn"
0210   "        function renameColumn(table: String, oldColumn: String, newColumn: String): Void {"
0211   "            query("ALTER TABLE " + table + " RENAME " + oldColumn + " TO " + newColumn + ";")"
0212   " RENAME "
0213   " TO "
0214   "renameColumn"
0215   "oldColumn"
0216   "newColumn"
0217   "        function removeColumns(table: String, columns: Array): Void {"
0218   "            backup = "_backup_" + table"
0219   "_backup_"
0220   "backup"
0221   "            keep = getColumns(table)"
0222   "keep"
0223   "            for each (column in columns) {"
0224   "                if ((index = keep.indexOf(column)) < 0) {"
0225   "indexOf"
0226   "index"
0227   "                    throw "Column \"" + column + "\" does not exist in " + table"
0228   "Column ""
0229   "" does not exist in "
0230   "                } "
0231   "                keep.remove(index)"
0232   "remove"
0233   "            schema = 'PRAGMA table_info("' + table + '");'"
0234   "schema"
0235   "            grid = query(schema)"
0236   "            types = {}"
0237   "types"
0238   "                types[name] = row["type"]"
0239   "type"
0240   "            columnSpec = []"
0241   "columnSpec"
0242   "            for each (k in keep) {"
0243   "k"
0244   "-hoisted-7"
0245   "                if (k == "id") {"
0246   "id"
0247   "                    columnSpec.append(k + " INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL")"
0248   " INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL"
0249   "                } else {"
0250   "                    columnSpec.append(k + " " + types[k])"
0251   "            cmd = "BEGIN TRANSACTION;"
0252   "                DROP TABLE " + backup + ";"
0253   "                INSERT INTO " + table + " SELECT " + keep + " FROM " + backup + ";"
0254   "                CREATE TABLE " + table + "(" + columnSpec + ");"
0255   "                DROP TABLE " + table + ";"
0256   "                INSERT INTO " + backup + " SELECT " + keep + " FROM " + table + ";"
0257   "                CREATE TEMPORARY TABLE " + backup + "(" + columnSpec + ");"
0258   "BEGIN TRANSACTION;
                CREATE TEMPORARY TABLE "
0259   "("
0260   ");
                INSERT INTO "
0261   " SELECT "
0262   " FROM "
0263   ";
                DROP TABLE "
0264   ";
                CREATE TABLE "
0265   ";
                COMMIT;"
0266   "            query(cmd)"
0267   "removeColumns"
0268   "        private static function log(cmd: String): Void {"
0269   "            if (_traceSql) {"
0270   "                print("SQL: " + cmd)"
0271   "SQL: "
0272   "log"
0273   "        static function trace(on: Boolean): void {"
0274   "            _traceSql = on"
0275   "trace"
0276   "on"
0277   "Database-initializer"
0278   "-initializer-"
0279   "clone"
0280   "Function"
0281   "deep"
0282   "get"
0283   "Iterator"
0284   "namespaces"
0285   "length"
0286   "Number"
0287   "toString"
0288   "locale"
0289   "block_0007_1"
0290   "-block-"
0291   "db/Record.es"
0292   "internal-1"
0293   "    dynamic class Record {"
0294   "Record"
0295   "        private static var  _belongsTo: Object"
0296   "_belongsTo"
0297   "[ejs.db::Record,private]"
0298   "        private static var  _className: String"
0299   "_className"
0300   "        private static var  _columnNames: Object"
0301   "_columnNames"
0302   "        private static var  _columnTypes: Object"
0303   "_columnTypes"
0304   "        private static var  _sqlColumnTypes: Object"
0305   "_sqlColumnTypes"
0306   "        private static var  _db: Database = undefined"
0307   "_db"
0308   "        private static var  _foreignId: String"
0309   "_foreignId"
0310   "        private static var  _keyName: String"
0311   "_keyName"
0312   "        private static var  _tableName: String"
0313   "_tableName"
0314   "        private static var  _traceSql: Boolean = false"
0315   "        private static var  _validations: Array"
0316   "_validations"
0317   "        private static var  _beforeFilters: Array"
0318   "_beforeFilters"
0319   "        private static var  _afterFilters: Array"
0320   "_afterFilters"
0321   "        private static var  _wrapFilters: Array"
0322   "_wrapFilters"
0323   "        private var         _keyValue: Object"
0324   "_keyValue"
0325   "        private var         _errors: Object"
0326   "_errors"
0327   "        function constructor(fields: Object = null): Void {"
0328   "            if (_columnNames == null) {"
0329   "                getSchema()"
0330   "            if (fields) {"
0331   "                for (field in fields) {"
0332   "field"
0333   "-hoisted-1"
0334   "                    if (_columnNames[field] == undefined) {"
0335   "                        throw new Error("Column " + field + " is not a column in the table \"" + _tableName + "\"")"
0336   "Column "
0337   " is not a column in the table ""
0338   """
0339   "                    } else {"
0340   "                        this[field] = fields[field]"
0341   "constructor"
0342   "fields"
0343   "        static function beforeFilter(fn, options: Object = null): Void {"
0344   "            if (_beforeFilters == undefined) {"
0345   "                _beforeFilters = []"
0346   "            _beforeFilters.append([fn, options])"
0347   "beforeFilter"
0348   "fn"
0349   "        static function afterFilter(fn, options: Object = null): Void {"
0350   "            if (_afterFilters == undefined) {"
0351   "                _afterFilters = []"
0352   "            _afterFilters.append([fn, options])"
0353   "afterFilter"
0354   "        static function wrapFilter(fn, options: Object = null): Void {"
0355   "            if (_wrapFilters == undefined) {"
0356   "                _wrapFilters = []"
0357   "            _wrapFilters.append([fn, options])"
0358   "wrapFilter"
0359   "        private function runFilters(filters): Void {"
0360   "            if (!filters) {"
0361   "                return"
0362   "            for each (filter in filters) {"
0363   "filter"
0364   "                let fn = filter[0]"
0365   "                let options = filter[1]"
0366   "                if (options) {"
0367   "                    only = options.only"
0368   "only"
0369   "                }"
0370   "                fn.call(this)"
0371   "call"
0372   "runFilters"
0373   "filters"
0374   "        function save(): Boolean {"
0375   "            var sql: String"
0376   "            if (!validateModel()) {"
0377   "                return false"
0378   "            runFilters(_beforeFilters)"
0379   "            if (_keyValue == null) {"
0380   "                sql = "INSERT INTO " + _tableName + " (""
0381   "INSERT INTO "
0382   "                for (let field: String in this) {"
0383   "                    if (_columnNames[field]) {"
0384   "                        sql += field + ", ""
0385   ", "
0386   "                sql = sql.trim(', ')"
0387   "                sql += ") VALUES(""
0388   ") VALUES("
0389   "                    sql += "'" + this[field] + "', ""
0390   "'"
0391   "', "
0392   "                sql += ")""
0393   ")"
0394   "            } else {"
0395   "                sql = "UPDATE " + _tableName + " SET ""
0396   "UPDATE "
0397   " SET "
0398   "                        sql += field + " = '" + this[field] + "', ""
0399   " = '"
0400   "                sql += " WHERE " + _keyName + " = " +  _keyValue"
0401   " WHERE "
0402   " = "
0403   "            sql += "; SELECT last_insert_rowid();""
0404   "; SELECT last_insert_rowid();"
0405   "            log("save", sql)"
0406   "save"
0407   "            let result: Array = getDb().query(sql)"
0408   "            _keyValue = this["id"] = result[0]["last_insert_rowid()"] cast Number"
0409   "last_insert_rowid()"
0410   "            runFilters(_afterFilters)"
0411   "            return true"
0412   "        function saveUpdate(fields: Object): Boolean {"
0413   "            for (field in fields) {"
0414   "                if (this[field] != undefined) {"
0415   "                    this[field] = fields[field]"
0416   "            return save()"
0417   "saveUpdate"
0418   "        static function belongsTo(owner, options: Object = null): Void {"
0419   "            if (_belongsTo == undefined) {"
0420   "                _belongsTo = [owner]"
0421   "                _belongsTo.append(owner)"
0422   "belongsTo"
0423   "owner"
0424   "        private static function createRecord(rowData: Object): Record {"
0425   "rec"
0426   "            let rec: Record = new global[_className]"
0427   "            rec.constructor(rec)"
0428   "            for (let field: String in rowData) {"
0429   "                rec[field] = rowData[field]"
0430   "            rec.coerceTypes()"
0431   "            rec._keyValue = rowData[_keyName]"
0432   "            return rec"
0433   "createRecord"
0434   "rowData"
0435   "        static function find(key: Object, options: Object = null): Object {"
0436   "            let grid: Array = innerFind(key, options)"
0437   "            if (grid.length >= 1) {"
0438   "                return createRecord(grid[0])"
0439   "            return null"
0440   "find"
0441   "key"
0442   "        static function findAll(options: Object = null): Array {"
0443   "            let grid: Array = innerFind(null, options)"
0444   "            for (let i = 0; i < grid.length; i++) {"
0445   "i"
0446   "                grid[i] = createRecord(grid[i])"
0447   "            return grid"
0448   "findAll"
0449   "        static function findOneWhere(where: String): Object {"
0450   "            let grid: Array = innerFind(null, { conditions: [where]})"
0451   "conditions"
0452   "findOneWhere"
0453   "where"
0454   "        static function findWhere(where: String, count: Number = null): Array {"
0455   "findWhere"
0456   "count"
0457   "        private static function includeJoin(joins: Object): String {"
0458   "            var cmd: String = """
0459   "            for each (join in joins) {"
0460   "join"
0461   "                cmd ="LEFT OUTER JOIN " + join + ON + " " + prev + ".id = " + join + "." + singular(prev) + "Id" +"
0462   "LEFT OUTER JOIN "
0463   "ON"
0464   "prev"
0465   ".id = "
0466   "."
0467   "singular"
0468   "Id"
0469   "                     includeJoin(join)"
0470   "                break"
0471   "            return cmd"
0472   "includeJoin"
0473   "joins"
0474   "        static private function innerFind(key: Object, options: Object = null): Array {"
0475   "            let columns: Array"
0476   "            let from: String"
0477   "from"
0478   "            let conditions: String"
0479   "            let where: String"
0480   "            if (options == null) {"
0481   "                options = {}"
0482   "            if (options.columns) {"
0483   "                columns = options.columns"
0484   "                let index: Number = columns.indexOf("id")"
0485   "-hoisted-9"
0486   "                if (index >= 0) {"
0487   "                    columns[index] = _tableName + ".id""
0488   ".id"
0489   "                } else if (!columns.contains(_tableName + ".id")) {"
0490   "                    columns.insert(0, _tableName + ".id")"
0491   "                columns =  "*""
0492   "*"
0493   "            conditions = """
0494   "            from = """
0495   "            where = false"
0496   "            if (options.from) {"
0497   "                from = options.from"
0498   "            } else if (options.include) {"
0499   "include"
0500   "                from = _tableName + " " + includeJoins(options.include)"
0501   "includeJoins"
0502   "                from = _tableName"
0503   "                if (_belongsTo && options.joinBelongs != false) {"
0504   "joinBelongs"
0505   "                    conditions = " ON ""
0506   "                    for each (let owner in _belongsTo) {"
0507   "-hoisted-11"
0508   "                        from += " INNER JOIN " + owner._tableName"
0509   " INNER JOIN "
0510   "-hoisted-12"
0511   "tname"
0512   "-hoisted-13"
0513   "                        let tname = Reflect(owner).name"
0514   "                        tname = tname[0].toLower() + tname.slice(1) + "Id""
0515   "toLower"
0516   "slice"
0517   "                        conditions += _tableName + "." + tname + " = " + owner._tableName + "." + owner._keyName + " AND ""
0518   " AND "
0519   "                if (options.joins) {"
0520   "                    if (conditions == "") {"
0521   "                        conditions = " ON ""
0522   "parts"
0523   "-hoisted-14"
0524   "                    let parts: Array = options.joins.split(" ON ")"
0525   "split"
0526   "                    from += " " + parts[0]"
0527   "                    if (parts.length > 1) {"
0528   "                        conditions += parts[1] + " AND ""
0529   "            conditions = conditions.trim(" AND ")"
0530   "            if (options.conditions) {"
0531   "                where = true"
0532   "                conditions += " WHERE ""
0533   "                if (options.conditions is Array) {"
0534   "                    for each (cond in options.conditions) {"
0535   "cond"
0536   "-hoisted-16"
0537   "                        conditions += cond + " " + " OR ""
0538   " OR "
0539   "                    conditions = conditions.trim(" OR ")"
0540   "                } else if (options.conditions is Object) {"
0541   "                    for (field in options.conditions) {"
0542   "-hoisted-17"
0543   "                        conditions += field + " = '" + options.conditions[field] + "' " + " AND ""
0544   "' "
0545   "                conditions = conditions.trim(" AND ")"
0546   "                from = from.trim(" AND ")"
0547   "            if (key || options.key) {"
0548   "                if (!where) {"
0549   "                    conditions += " WHERE ""
0550   "                    where = true"
0551   "                    conditions += " AND ""
0552   "                conditions += (_tableName + "." + _keyName + " = ") + ((key) ? key : options.key)"
0553   "            cmd = "SELECT " + columns + " FROM " + from + conditions"
0554   "SELECT "
0555   "            if (options.group) {"
0556   "group"
0557   "                cmd += " GROUP BY " + options.group"
0558   " GROUP BY "
0559   "            if (options.order) {"
0560   "order"
0561   "                cmd += " ORDER BY " + options.order"
0562   " ORDER BY "
0563   "            if (options.limit) {"
0564   "limit"
0565   "                cmd += " LIMIT " + options.limit"
0566   " LIMIT "
0567   "            if (options.offset) {"
0568   "offset"
0569   "                cmd += " OFFSET " + options.offset"
0570   " OFFSET "
0571   "            cmd += ";""
0572   "            log("find", cmd)"
0573   "            let db = getDb()"
0574   "            if (db == null) {"
0575   "                throw new Error("Database connection has not yet been established")"
0576   "Database connection has not yet been established"
0577   "results"
0578   "            let results: Array"
0579   "            try {"
0580   "                results = db.query(cmd)"
0581   "            catch (e) {"
0582   "e"
0583   "-hoisted-19"
0584   "                throw e"
0585   "            return results"
0586   "innerFind"
0587   "        static function getDb(): Database {"
0588   "            if (_db == null) {"
0589   "                return Database.defaultDatabase"
0590   "                return _db"
0591   "getDb"
0592   "        static function get columnNames(): Array { "
0593   "            let result: Array = []"
0594   "            for (name in _columnNames) {"
0595   "                result.append(name)"
0596   "            return result"
0597   "columnNames"
0598   "        static function get columnTitles(): Array { "
0599   "            for each (title in _columnNames) {"
0600   "title"
0601   "                result.append(title)"
0602   "columnTitles"
0603   "        static function getKeyName(): String {"
0604   "            return _keyName"
0605   "getKeyName"
0606   "        static function getNumRows(): Number {"
0607   "            let cmd: String = "SELECT COUNT(*) FROM " + _tableName + " WHERE " + _keyName + " <> '';""
0608   "SELECT COUNT(*) FROM "
0609   " <> '';"
0610   "            log("getNumRows", cmd)"
0611   "getNumRows"
0612   "            let grid: Array = getDb().query(cmd)"
0613   "            return grid[0]["COUNT(*)"]"
0614   "COUNT(*)"
0615   "        private static function getSchema(): Void {"
0616   "            if (_className == null) {"
0617   "                throw new Error("Model is not initialized. Must call Model.setup() first")"
0618   "Model is not initialized. Must call Model.setup() first"
0619   "            if (getDb() == undefined) {"
0620   "                throw new Error("Can't get schema, database connection has not yet been established")"
0621   "Can't get schema, database connection has not yet been established"
0622   "            let sql: String = 'PRAGMA table_info("' + _tableName + '");'"
0623   "            log("schema", sql)"
0624   "            let grid: Array = getDb().query(sql)"
0625   "            _columnNames = {}"
0626   "            _columnTypes = {}"
0627   "            _sqlColumnTypes = {}"
0628   "                _columnNames[name] = name.toPascal()"
0629   "                _sqlColumnTypes[name] = row.type.toLower()"
0630   "                _columnTypes[name] = mapSqlTypeToEjs(row.type.toLower())"
0631   "getSchema"
0632   "        static function getTableName(): String {"
0633   "            return _tableName"
0634   "getTableName"
0635   "        static function hasMany(model: Object, options: Object = null): Void {"
0636   "            if (_hasMany == undefined) {"
0637   "_hasMany"
0638   "                _hasMany = [model]"
0639   "                _hasMany.append(model)"
0640   "hasMany"
0641   "model"
0642   "        static function hasAndBelongsToMany(thing: Object, options: Object = null): Void {"
0643   "            belongs(thing, options)"
0644   "belongs"
0645   "            hasMany(thing, options)"
0646   "hasAndBelongsToMany"
0647   "thing"
0648   "        static function hasOne(model: Object, options: Object = null): Void {"
0649   "            if (_hasOne == undefined) {"
0650   "_hasOne"
0651   "                _hasOne = [model]"
0652   "                _hasOne.append(model)"
0653   "hasOne"
0654   "        private static function loadReference(model: Record, key: String, hasMany: Boolean = false): Object {"
0655   "data"
0656   "            let data: Array = model.innerFind(key)"
0657   "            if (hasMany) {"
0658   "                let result: Array = new Array"
0659   "                for each (item in data) {"
0660   "item"
0661   "                    result.append(model.createRecord(data[0]))"
0662   "                return result"
0663   "                if (data.length > 0) {"
0664   "                    return model.createRecord(data[0])"
0665   "loadReference"
0666   "        private static function log(where: String, cmd: String): Void {"
0667   "                print(where + " SQL: " + cmd)"
0668   " SQL: "
0669   "        private static function logResult(data: Object): Void {"
0670   "            dump(data)"
0671   "logResult"
0672   "        private static function mapSqlTypeToEjs(sqlType: String): String {"
0673   "            sqlType = sqlType.replace(/\(.*/, "")"
0674   "/\(.*/"
0675   "            let ejsType: String = Database.SqliteToEjs[sqlType]"
0676   "ejsType"
0677   "            if (ejsType == undefined) {"
0678   "                throw new Error("Unsupported SQL type: \"" + sqlType + "\"")"
0679   "Unsupported SQL type: ""
0680   "            return ejsType"
0681   "mapSqlTypeToEjs"
0682   "sqlType"
0683   "        static function remove(...keys): Void {"
0684   "            for each (let key: Object in keys) {"
0685   "                let cmd: String = "DELETE FROM " + _tableName + " WHERE " + _keyName + " = " + key + ";""
0686   "DELETE FROM "
0687   "                log("remove", cmd)"
0688   "                getDb().query(cmd)"
0689   "keys"
0690   "        static function setDb(dbase: Database): Void {"
0691   "            _db = dbase"
0692   "setDb"
0693   "dbase"
0694   "        static function setup(database: Database = null): Void {"
0695   "            _db = database"
0696   "            _className = Reflect(this).name"
0697   "            _tableName = pluralize(_className)"
0698   "pluralize"
0699   "            _foreignId = _className.toCamel() + "Id""
0700   "            _keyName = "id""
0701   "setup"
0702   "database"
0703   "        static function setTableName(name: String): Void {"
0704   "            _tableName = name"
0705   "setTableName"
0706   "        static function setKeyName(value: String): Void {"
0707   "            _keyName = value"
0708   "setKeyName"
0709   "value"
0710   "        static function sql(cmd: String, count: Number = null): Array {"
0711   "            cmd = "SELECT " + cmd + ";""
0712   "            log("select", cmd)"
0713   "select"
0714   "            return getDb().query(cmd)"
0715   "        static function validateFormat(fields: Object, options: Object = null) {"
0716   "            if (_validations == null) {"
0717   "                _validations = []"
0718   "            _validations.append([checkFormat, fields, options])"
0719   "validateFormat"
0720   "        static function validateNumber(fields: Object, options: Object = null) {"
0721   "            _validations.append([checkNumber, fields, options])"
0722   "validateNumber"
0723   "        static function validatePresence(fields: Object, options: Object = null) {"
0724   "            _validations.append([checkPresent, fields, options])"
0725   "validatePresence"
0726   "        static function validateUnique(fields: Object, options: Object = null) {"
0727   "            _validations.append([checkUnique, fields, options])"
0728   "validateUnique"
0729   "        static var ErrorMessages = {"
0730   "ErrorMessages"
0731   "            accepted: "must be accepted","
0732   "accepted"
0733   "must be accepted"
0734   "            blank: "can't be blank","
0735   "blank"
0736   "can't be blank"
0737   "            confirmation: "doesn't match confirmation","
0738   "confirmation"
0739   "doesn't match confirmation"
0740   "            empty: "can't be empty","
0741   "empty"
0742   "can't be empty"
0743   "            invalid: "is invalid","
0744   "invalid"
0745   "is invalid"
0746   "            missing: "is missing","
0747   "missing"
0748   "is missing"
0749   "            notNumber: "is not a number","
0750   "notNumber"
0751   "is not a number"
0752   "            notUnique: "is not unique","
0753   "notUnique"
0754   "is not unique"
0755   "            taken: "already taken","
0756   "taken"
0757   "already taken"
0758   "            tooLong: "is too long","
0759   "tooLong"
0760   "is too long"
0761   "            tooShort: "is too short","
0762   "tooShort"
0763   "is too short"
0764   "            wrongLength: "wrong length","
0765   "wrongLength"
0766   "wrong length"
0767   "            wrongFormat: "wrong format","
0768   "wrongFormat"
0769   "wrong format"
0770   "        private static function checkFormat(thisObj: Object, field: String, value, options): Void {"
0771   "            if (! RegExp(options.format).test(value)) {"
0772   "format"
0773   "                thisObj._errors[field] = options.message ? options.message : ErrorMessages.wrongFormat"
0774   "message"
0775   "checkFormat"
0776   "thisObj"
0777   "        private static function checkNumber(thisObj: Object, field: String, value, options): Void {"
0778   "            if (! RegExp(/^[0-9]+$/).test(value)) {"
0779   "/^[0-9]+$/"
0780   "                thisObj._errors[field] = options.message ? options.message : ErrorMessages.notNumber"
0781   "checkNumber"
0782   "        private static function checkPresent(thisObj: Object, field: String, value, options): Void {"
0783   "            if (value == undefined) {"
0784   "                thisObj._errors[field] = options.message ? options.message : ErrorMessages.missing"
0785   "            } else if (value.length == 0 || value.trim() == "" && thisObj._errors[field] == undefined) {"
0786   "trim"
0787   "                thisObj._errors[field] = ErrorMessages.blank"
0788   "checkPresent"
0789   "        private static function checkUnique(thisObj: Object, field: String, value, options): Void {"
0790   "            if (thisObj._keyValue) {"
0791   "                grid = findWhere(field + ' = "' + value + '" AND id <> ' + thisObj._keyValue)"
0792   " = ""
0793   "" AND id <> "
0794   "                grid = findWhere(field + ' = "' + value + '"')"
0795   "            if (grid.length > 0) {"
0796   "                thisObj._errors[field] = options.message ? options.message : ErrorMessages.notUnique"
0797   "checkUnique"
0798   "        function error(field: String, msg: String): Void {"
0799   "            if (!field) {"
0800   "                field = """
0801   "            _errors[field] = msg"
0802   "error"
0803   "msg"
0804   "        function validateModel(): Boolean {"
0805   "            _errors = {}"
0806   "            if (_validations) {"
0807   "                for each (let validation: String in _validations) {"
0808   "validation"
0809   "-hoisted-0"
0810   "                    check = validation[0]"
0811   "check"
0812   "                    fields = validation[1]"
0813   "                    options = validation[2]"
0814   "                    if (fields is Array) {"
0815   "                        for each (let field in fields) {"
0816   "                            if (_errors[field]) {"
0817   "                                continue"
0818   "                            }"
0819   "                            check(this, field, this[field], options)"
0820   "                        check(this, fields, this[fields], options)"
0821   "            self = Reflect(this).type"
0822   "self"
0823   "            if (self["validate"]) {"
0824   "validate"
0825   "                self["validate"].call(this)"
0826   "            if (_errors.length == 0) {"
0827   "                coerceTypes()"
0828   "            return _errors.length == 0"
0829   "validateModel"
0830   "        function getErrors(): Array {"
0831   "            return _errors"
0832   "getErrors"
0833   "        function hasError(field: String = null): Boolean {"
0834   "            if (field) {"
0835   "                return (_errors && _errors[field])"
0836   "            return _errors && _errors.length > 0"
0837   "hasError"
0838   "        function getFieldType(field: String): String {"
0839   "            return Database.SqliteToDatatype[_sqlColumnTypes[field]]"
0840   "getFieldType"
0841   "        private function coerceTypes(): Void {"
0842   "            for (let field: String in this) {"
0843   "                if (_columnTypes[field] == Reflect(this[field]).type) {"
0844   "                    continue"
0845   "                let value: String = this[field]"
0846   "                switch (_columnTypes[field]) {"
0847   "                case Boolean:"
0848   "                    if (value is String) {"
0849   "                        this[field] = (value.toLower() == "true")"
0850   "true"
0851   "                    } else if (value is Number) {"
0852   "                        this[field] = (value == 1)"
0853   "                        this[field] = value cast Boolean"
0854   "                    this[field] = (this[field]) ? true : false"
0855   "                    break"
0856   "                case Date:"
0857   "                    this[field] = new Date(value)"
0858   "                case Number:"
0859   "                    this[field] = this[field] cast Number"
0860   "coerceTypes"
0861   "Record-initializer"
0862   "    function pluralize(name: String): String {"
0863   "s"
0864   "        var s: String = name + "s""
0865   "        return s.toPascal()"
0866   "block_0011_18"
0867   "__initializer__"
