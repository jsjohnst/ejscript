.TH EC "1" "March 2009" "ejsc" "User Commands"
.SH NAME
ejsc \- Ejscript compiler.
.SH SYNOPSIS
.B ejsc
[\fI--bind\fR]
[\fI--debug\fR]
[\fI--doc\fR]
[\fI--lang [ecma|plus|fixed]\fR]
[\fI--empty\fR]
[\fI--noout\fR]
[\fI--optimize level\fR]
[\fI--out filename\fR]
[\fI--parse\fR]
[\fI--searchPath ejsPath\fR]
[\fI--standard\fR]
[\fI--strict\fR]
[\fI--use 'module, ...'\fR]
[\fI--version\fR]
[\fI--warn level\fR]
files...
.SH DESCRIPTION
The \fBejsc\fR command compiles Ejscript programs to produce Ejscript module files containing byte code.
The module files may then be run via the \fBejsvm\fR virtual machine command or via the \fBejs\fR shell command.
.PP
The \fBejsc\fR command is both a compiler and link editor. Inputs can be either Ejscript source files or
Ejscript modules that have come from previous invocations of the \fBejsc\fR command. Outputs will be one or more Ejscript 
module files that contain declarations and byte code. 
.PP
An output module file will be created for each Ejscript module directive
encountered during compilation. A module file will also be created for any global variables or functions 
declared outside a module directive. These global declarations will go into the \fBdefault\fR module that is 
specially reserved for global declarations.  Each module file will be named according to the module directive name, 
but with a \fB.mod\fR extension appended. 
.SH LINKING
If \fBejsc\fR is invoked with the --out switch, all input scripts, modules and any other dependent modules are merged together 
into a single output module. The modules retain their logical naming, but are emitted in a single output module file. When 
that module file is loaded, all the contained modules will be available to the program. This creates not only a convenient 
way to package an entire application as a single file, it also permits many optimizations by merging the entire application 
and its dependent modules into a single module.
.SH BINDING
The \fBejsc\fR compiler will attempt to early-bind all possible variable and function references. Binding means resolving 
references to the underlying storage for properties and functions. Doing this at compile time usually results in much
faster execution at run-time.  
.PP
When using the --out switch, the compiler can early-bind all global variables, functions and 
type references, resulting in a much smaller and faster application. However, you must not subsequently load other 
modules that also have global declarations. Otherwise the Ejscript loader will throw an exception. Consequently, 
the --out switch must only be used to create a complete application including all the application's required modules.
.SH COMPLIANCE
Ejscript is fully compliant with the JavaScript (ECMA-262 3.X) standards, but it also offers a set of 
enhancements and fixes designed to improve the language and correct some longstanding JavaScript design issues. 
Use of these enhancements and fixes is optional and controlled via opt-in configuration switches and script pragmas.
.PP
The \fBejsc\fR compiler supports three language compliance modes: 
.IP "" 4
* \fBecma\fR  for strict ECMAScript compliance.
.IP "" 4
* \fBplus\fR  for close compliance plus compatible Ejscript enhancements.
.IP "" 4
* \fBfixed\fR  for close compliance, plus compatible Ejscript enhancements and breaking fixes.
.PP
When Ejscript is built, the default compliance mode is defined. By default, this is \fBplus\fR mode.
The \fBfixed\fR mode corrects several issues with Javascript that remain in the language due to browser compatibility 
requirements. Ejscript, by targeting non-browser envirnonments, can rectify these issues without impact to 
legacy applications. These changes are:
.IP "" 4
* Assignments to non-existent properties inside functions, will create local variables rather than global variables.
.IP "" 4
* Multiple declarations of the same variable in the same scope are not permitted.
.IP "" 4
* The == and != operators will perform like their more rigorous conterparts === and !===.
.SH OPTIONS
.TP
\fB\--bind\fR
Bind global variable declarations into slot references. This results in faster more compact code. However, only
one module can have its global variables bound.
.TP
\fB\--debug\fR
Generate symbolic debug instructions. This permits symbolic debugging of Ejscript programs and enables exception
stack backtraces to include line number information.
.TP
\fB\--doc\fR
Include documentation strings from input scripts in the output modules. The \fBejsmod\fR command can then generate
HTML documentation using these doc strings. The format of the doc strings resembles that of Javadoc.
.TP
\fB\--empty\fR
Start with an empty interpreter without the core language types such as Object, Array and Number. This option is 
used to build the foundation ejs.mod module which contains the core system types.
.TP
\fB\--lang [ecma|plus|fixed]\fR
Set the language compliance mode. Use \fBecma\fR for strict ECMAScript Edition 3 compliance. Use \fBplus\fR for 
close ECMAScript compliance plus Ejscript enhancements. Select \fBfixed\fR mode for ECMAScript features plus
enhancements and some compatibility breaking fixes.
.TP
\fB\--merge\fR
Merge all input files and modules together into a single output module. This option acts like a link-editor combining
all inputs together. Useful if you want to distribute your application as a single module file.
.TP
\fB\--optimize level\fR
Set the code optimization level. Level values must be between 0 (least) and 9 (most). Default is 9.
.TP
\fB\--parse\fR
Just parse the source scripts. Don't verify, execute or generate output. Useful to check the script syntax only.
.TP
\fB\--searchPath ejsPath\fR
Override the module search path. The module search path is a set of directories that the \fBejsc\fR command will use
when locating and loading Ejscript modules. Given a module named "a.b.c" in a script, \fBejsc\fR will use the following 
search strategy to locate the module:
.IP
1. Search for a module file named "a.b.c.mod"
.IP
2. Search for a module file named "a/b/c.mod"
.IP
3. Search for a module file named "a.b.c.mod" in EJSPATH
.IP
4. Search for a module file named c.mod in EJSPATH
.IP
The search path is initially specified by the environment variable EJSPATH and may be overridden 
by using the --searchPath ejsPath switch. EJSPATH and the ejsPath command line value are similar to 
the system PATH formats. On windows, path segments 
are separated by ";" and on Linux, Unix, FreeBSD and MAC, the path segments are separated by ":" delimiters.
.TP
\fB\--standard\fR
Run scripts in standard mode. Ejscript supports two parsing modes: strict and standard. Standard mode does not require 
variables be declared and typed before use.
.TP
\fB\--strict\fR
Run scripts in standard mode. Ejscript supports two parsing modes: strict and standard. Strict mode requires that 
all variables be declared and typed.
.TP
\fB\--use 'module, ...'\fR
List of modules to preload before compiling input files.
.TP
\fB\--version\fR
Print the \fBejsc\fR command version and exit.
.TP
\fB\--warn level \fR
Set the compiler warning verbosity level. Level values must be between 0 (least verbose) and 9 (most). Default is 0.
.SH BACKGROUND
Ejscript is an enhanced implementation of the JavaScript language for use in embedded applications such as web servers, 
embedded and mobile devices. It is especially suited for Server-Side JavaScript web applications.
.PP
Ejscript is a dynamic, interpreted, object-oriented scripting language that supports classes, objects, 
exceptions, statements, expressions and a powerful suite of data types.
.SH "REPORTING BUGS"
Report bugs to dev@embedthis.com.
.SH COPYRIGHT
Copyright \(co 2004-2009 Embedthis Software.  Ejscript is a trademark of Embedthis Software.
.br
.SH "SEE ALSO"
ejsgen, ejs, ejsmod, ejsvm
