.TH EJS "1" "March 2009" "ejs" "User Commands"
.SH NAME
ejs \- Interpreted object-oriented scripting language (Javascript) shell.
.SH SYNOPSIS
.B ejs
[\fI--class className\fR] 
[\fI--cmd literalScript\fR] 
[\fI--debug\fR]
[\fI--lang [ecma|plus|fixed]\fR]
[\fI--files "files..."\fR]
[\fI--log logSpec\fR]
[\fI--method methodName\fR]
[\fI--nodebug\fR]
[\fI--optimize level\fR]
[\fI--searchPath ejsPath\fR]
[\fI--standard\fR]
[\fI--stats\fR]
[\fI--strict\fR]
[\fI--use 'module, ...'\fR]
[\fI--version\fR]
[\fI--warn level\fR]
file [arguments ...]
.SH DESCRIPTION
The \fBejs\fR command is an Ejscript command shell that can interpret and run JavaScript programs.
.PP
Ejscript is an enhanced implementation of the JavaScript language for use in embedded applications such as 
web servers, embedded devices and mobile phones. It is especially well suited for Server-Side JavaScript web applications.
.SH INVOCATION
The \fBejs\fR command can be used as a shell to interactively interpret commands typed at the console or to 
run script files. When 
invoked with no files on the command line, \fBejs\fR runs in interactive mode.
In interactive mode, \fBejs\fR reads input from the console and parses and executes script code as it is 
entered. In this mode, \fBejs\fR command will read input until it has a complete block of code and will then execute the 
block. The last result value computed will be echoed to the console. For example:
.PP
.PD 0
ejs-0> if (true) {
.PP 0
ejs-2>     print("Hello World");
.PP
ejs-2> }
.PP
Hello World
.PD 1
.PP
ejs-0>
.PP
Note: the input prompt includes a level of nest indicator starting at zero and increasing upward as commands nest. This is 
a hint as to when you have closed sufficient braces for \fBejs\fR to execute your command. As this is an internal compiler
nest value, it will sometimes increment more than 1 for each brace.
.PP
If \fBejs\fR is invoked with a file name on the command line, that file will be read and its statements executed. One 
file may be supplied and the arguments after it will be passed into the script as command line arguments. For example:
.IP "" 8
ejs myscript.es arg1 arg2 arg3
.PP
The given file may be either a script file or it may be a previously compiled Ejscript module with a \fB.mod\fR extension.
.PP
If you require more script files to be parsed, use the --files "files ..." switch to supply extra scripts. These will be parsed
in order, but after the primary script on the command line.
.PP
The \fBejs\fR command can also invoke a specific static method on startup.  If either the --class or --method switches are 
supplied, then \fBejs\fR will run the requested static method after the input file script statements have been executed. 
.SH COMPLIANCE
Ejscript is fully compliant with the JavaScript (ECMA-262 3.X) standards, but it also offers a set of 
enhancements and fixes designed to improve the language and correct some longstanding JavaScript design issues. 
Use of these enhancements and fixes is optional and controlled via opt-in configuration switches and script pragmas.
.PP
The \fBec\fR compiler supports three language compliance modes: 
.IP "" 4
* \fBecma\fR  for strict ECMAScript compliance.
.IP "" 4
* \fBplus\fR  for close compliance plus compatible Ejscript enhancements.
.IP "" 4
* \fBfixed\fR  for close compliance, plus compatible Ejscript enhancements and breaking fixes.
.PP
When Ejscript is built, the default compliance mode is defined. By default, this is \fBplus\fR mode.
The \fBfixed\fR mode corrects several issues with Javascript that remain in the language due to browser compatibility 
requirements. Ejscript, by targeting non-browser environments, can rectify these issues without impact to 
legacy applications. These changes are:
.IP "" 4
* Assignments to non-existent properties inside functions, will create local variables rather than global variables.
.IP "" 4
* Multiple declarations of the same variable in the same scope are not permitted.
.IP "" 4
* The == and != operators will perform like their more rigorous conterparts === and !===.
.SH OPTIONS
.TP
\fB\--class className\fR
Use the given className when searching for the startup method specified via --method or "main" by default.
.TP
\fB\--cmd literalCommand\fR
Evaluate a literal command string.
.TP
\fB\--debug\fR
Run in debug mode and generate symbolic stack backtraces if required.
.TP
\fB\--files "files ..."\fR
Specifies an extra set of files to be compiled. The \fBejs\fR command normally takes just one script file on the command line.
The --files switch allows extra script to be compiled after the primary script, but before the scripts are run.
.TP
\fB\--log logName[:logLevel]\fR
Specify a file to log internal execution messages. Ejs will log execution related trace to the log file. The log level
specifies the desired verbosity of output. Level 0 is the least verbose and level 9 is the most. Level 2 will include
trace of each source statement and assembler instruction executed (provided --nodebug is not specifiec).
.TP
\fB\--lang [ecma|plus|fixed]\fR
Set the language compliance mode. Use \fBecma\fR for strict ECMAScript Edition 3 compliance. Use \fBplus\fR for 
close ECMAScript compliance plus Ejscript enhancements. Select \fBfixed\fR mode for ECMAScript features plus
enhancements and some compatibility breaking fixes.
.TP
\fB\---method methodName\fR
Set the startup method name. Defaults to "main" if a --className is specified and --method is not.
.TP
\fB\--nodebug\fR
Run the script without debug information. This will result in exceptions not having symbolic stack backtraces.
.TP
\fB\--optimize level\fR
Set the code optimization level. Level values must be between 0 (least) and 9 (most). Default is 9.
.TP
\fB\--searchPath ejsPath\fR
Override the module search path. The module search path is a set of directories that the \fBejs\fR command will use
when locating and loading Ejscript modules. Given a module named "a.b.c" in a script, \fBejs\fR will use the following 
search strategy to locate the module:
.IP
1. Search for a module file named "a.b.c.mod"
.IP
2. Search for a module file named "a/b/c.mod"
.IP
3. Search for a module file named "a.b.c.mod" in EJSPATH
.IP
4. Search for a module file named c.mod in EJSPATH
.IP
The search path is initially specified via the environment variable EJSPATH and may be overridden via the --searchPath ejsPath
switch. EJSPATH and the ejsPath command line value are similar to the system PATH formats. On windows, path segments 
are separated by ";" and on Linux, Unix, FreeBSD and MAC, the path segments are separated by ":" delimiters.
.TP
\fB\--standard\fR
Run scripts in standard mode. Ejscript supports two parsing modes: strict and standard. Standard mode does not require 
variables be declared and typed before use.
.TP
\fB\--stats\fR
Print various statistics on exit.
.TP
\fB\--strict\fR
Run scripts in standard mode. Ejscript supports two parsing modes: strict and standard. Strict mode requires that 
all variables be declared and typed.
.TP
\fB\--use 'module, ...'\fR
List of modules to preload before compiling input files.
.TP
\fB\--warn level \fR
Set the compiler warning verbosity level. Level values must be between 0 (least verbose) and 9 (most). Default is 0.
.TP
\fB\--version\fR
Print the \fBejs\fR command version and exit.
.PP
.SH "REPORTING BUGS"
Report bugs to dev@embedthis.com.
.SH COPYRIGHT
Copyright \(co 2004-2009 Embedthis Software.  Ejscript is a trademark of Embedthis Software.
.br
.SH "SEE ALSO"
ejsc, ejsgen, ejsmod, ejsvm
